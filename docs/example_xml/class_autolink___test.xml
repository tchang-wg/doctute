<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_autolink___test" kind="class" language="C++" prot="public">
    <compoundname>Autolink_Test</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2" prot="public" static="no">
        <name>EType</name>
        <enumvalue id="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2af70631e295bce280e74762d18af47a94" prot="public">
          <name>Val1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>enum value 1 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2a7d760f44a8971559d108a609b8fb9b3b" prot="public">
          <name>Val2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>enum value 2 </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An enum type. More details </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="autolink.cpp" line="66" column="1" bodyfile="autolink.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_autolink___test_1a8de85603114bc9b9e53bd40764e9b499" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Autolink_Test::var</definition>
        <argsstring></argsstring>
        <name>var</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_a" kindref="compound">A</ref> member variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="autolink.cpp" line="72" column="1" bodyfile="autolink.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_autolink___test_1a278d631f9943428c05b17d78f14488e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Autolink_Test::Autolink_Test</definition>
        <argsstring>()</argsstring>
        <name>Autolink_Test</name>
        <briefdescription>
<para>constructor </para>        </briefdescription>
        <detaileddescription>
<para>details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="autolink.cpp" line="60" column="1" bodyfile="autolink.cpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_autolink___test_1a03bf46c8e2b733680035f524fd7b193b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Autolink_Test::~Autolink_Test</definition>
        <argsstring>()</argsstring>
        <name>~Autolink_Test</name>
        <briefdescription>
<para>destructor </para>        </briefdescription>
        <detaileddescription>
<para>details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="autolink.cpp" line="61" column="1" bodyfile="autolink.cpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_autolink___test_1a393ea281f235a2f603d98daf72b0d411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Autolink_Test::member</definition>
        <argsstring>(int)</argsstring>
        <name>member</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_a" kindref="compound">A</ref> member function. Details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="autolink.cpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_autolink___test_1acf783a43c2b4b6cc9dd2361784eca2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Autolink_Test::member</definition>
        <argsstring>(int, int)</argsstring>
        <name>member</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An overloaded member function. Details </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="autolink.cpp" line="63" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Since this documentation block belongs to the class <ref refid="class_autolink___test" kindref="compound">Autolink_Test</ref> no link to <ref refid="class_autolink___test" kindref="compound">Autolink_Test</ref> is generated.</para><para>Two ways to link to a constructor are: <ref refid="class_autolink___test" kindref="compound">Autolink_Test</ref> and <ref refid="class_autolink___test_1a278d631f9943428c05b17d78f14488e2" kindref="member">Autolink_Test()</ref>.</para><para>Links to the destructor are: <ref refid="class_autolink___test_1a03bf46c8e2b733680035f524fd7b193b" kindref="member">~Autolink_Test</ref> and <ref refid="class_autolink___test_1a03bf46c8e2b733680035f524fd7b193b" kindref="member">~Autolink_Test()</ref>.</para><para><ref refid="class_a" kindref="compound">A</ref> link to a member in this class: <ref refid="class_autolink___test_1a393ea281f235a2f603d98daf72b0d411" kindref="member">member()</ref>.</para><para>More specific links to the each of the overloaded members: <ref refid="class_autolink___test_1a393ea281f235a2f603d98daf72b0d411" kindref="member">member(int)</ref> and <ref refid="class_autolink___test_1acf783a43c2b4b6cc9dd2361784eca2e1" kindref="member">member(int,int)</ref>.</para><para><ref refid="class_a" kindref="compound">A</ref> link to the variable <ref refid="class_autolink___test_1a8de85603114bc9b9e53bd40764e9b499" kindref="member">var</ref>.</para><para><ref refid="class_a" kindref="compound">A</ref> link to the global typedef <ref refid="class_b" kindref="compound">B</ref>.</para><para><ref refid="class_a" kindref="compound">A</ref> link to the global enumeration type <ref refid="autolink_8cpp_1a656d63cf384d2a6f23c2c18523a7bc5e" kindref="member">GlobEnum</ref>.</para><para><ref refid="class_a" kindref="compound">A</ref> link to the define <ref refid="define_8h_1a996f7be338ccb40d1a2a5abc1ad61759" kindref="member">ABS(x)</ref>.</para><para><ref refid="class_a" kindref="compound">A</ref> link to a variable <ref refid="class_autolink___test_1a8de85603114bc9b9e53bd40764e9b499" kindref="member">using another text</ref> as a link.</para><para><ref refid="class_a" kindref="compound">A</ref> link to the enumeration type <ref refid="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2" kindref="member">EType</ref>.</para><para><ref refid="class_a" kindref="compound">A</ref> link to some enumeration values: <ref refid="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2af70631e295bce280e74762d18af47a94" kindref="member">Val1 </ref> and <ref refid="autolink_8cpp_1a656d63cf384d2a6f23c2c18523a7bc5ea0f016f49e4f3bcd072319b9d68bc927d" kindref="member">GVal1</ref>.</para><para>And last but not least a link to a file: <ref refid="autolink_8cpp" kindref="compound">autolink.cpp</ref>.</para><para><simplesect kind="see"><para>Inside a see also section any word is checked, so <ref refid="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2" kindref="member">EType</ref>, <ref refid="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2af70631e295bce280e74762d18af47a94" kindref="member">Val1</ref>, <ref refid="autolink_8cpp_1a656d63cf384d2a6f23c2c18523a7bc5ea0f016f49e4f3bcd072319b9d68bc927d" kindref="member">GVal1</ref>, <ref refid="class_autolink___test_1a03bf46c8e2b733680035f524fd7b193b" kindref="member">~Autolink_Test</ref> and <ref refid="class_autolink___test_1a393ea281f235a2f603d98daf72b0d411" kindref="member">member</ref> will be replaced by links in HTML. </para></simplesect>
</para>    </detaileddescription>
    <location file="autolink.cpp" line="58" column="1" bodyfile="autolink.cpp" bodystart="57" bodyend="73"/>
    <listofallmembers>
      <member refid="class_autolink___test_1a278d631f9943428c05b17d78f14488e2" prot="public" virt="non-virtual"><scope>Autolink_Test</scope><name>Autolink_Test</name></member>
      <member refid="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2" prot="public" virt="non-virtual"><scope>Autolink_Test</scope><name>EType</name></member>
      <member refid="class_autolink___test_1a393ea281f235a2f603d98daf72b0d411" prot="public" virt="non-virtual"><scope>Autolink_Test</scope><name>member</name></member>
      <member refid="class_autolink___test_1acf783a43c2b4b6cc9dd2361784eca2e1" prot="public" virt="non-virtual"><scope>Autolink_Test</scope><name>member</name></member>
      <member refid="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2af70631e295bce280e74762d18af47a94" prot="public" virt="non-virtual"><scope>Autolink_Test</scope><name>Val1</name></member>
      <member refid="class_autolink___test_1aeb611627c332d067bded1806b1bb45c2a7d760f44a8971559d108a609b8fb9b3b" prot="public" virt="non-virtual"><scope>Autolink_Test</scope><name>Val2</name></member>
      <member refid="class_autolink___test_1a8de85603114bc9b9e53bd40764e9b499" prot="protected" virt="non-virtual"><scope>Autolink_Test</scope><name>var</name></member>
      <member refid="class_autolink___test_1a03bf46c8e2b733680035f524fd7b193b" prot="public" virt="non-virtual"><scope>Autolink_Test</scope><name>~Autolink_Test</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
