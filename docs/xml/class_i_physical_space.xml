<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_i_physical_space" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>IPhysicalSpace</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ReferenceCount</basecompoundref>
    <derivedcompoundref refid="class_physical_chunk_space" prot="public" virt="non-virtual">PhysicalChunkSpace</derivedcompoundref>
    <derivedcompoundref refid="class_physical_delegate_space" prot="public" virt="non-virtual">PhysicalDelegateSpace</derivedcompoundref>
    <includes refid="physical__space_8hpp" local="no">physical_space.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_i_physical_space_1a4f9b844ef47b8e9fa49a5ba4be6c4878" prot="public" static="no">
        <type>BW::list&lt; BW::Rect &gt;</type>
        <definition>typedef BW::list&lt; BW::Rect &gt; IPhysicalSpace::BoundsList</definition>
        <argsstring></argsstring>
        <name>BoundsList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="24" column="1" bodyfile="cellapp/physical_space.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_i_physical_space_1a6e8afeaa3ba55fcadbd15573288d5efa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual IPhysicalSpace::~IPhysicalSpace</definition>
        <argsstring>()</argsstring>
        <name>~IPhysicalSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="25" column="1" bodyfile="cellapp/physical_space.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1ad4bf6afa9821ec80944e29f0307f4f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IPhysicalSpace::loadResource</definition>
        <argsstring>(const SpaceEntryID &amp;mappingID, const BW::string &amp;path, const Matrix &amp;matrix=Matrix::identity)=0</argsstring>
        <name>loadResource</name>
        <reimplementedby refid="class_physical_delegate_space_1ac024b8db12255a502202ee9fc3334f4a">loadResource</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1ab6cee4fa3f92b46bf9770824b78c2464">loadResource</reimplementedby>
        <param>
          <type>const SpaceEntryID &amp;</type>
          <declname>mappingID</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const Matrix &amp;</type>
          <declname>matrix</declname>
          <defval>Matrix::identity</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method requests to load the specified resource, possibly using a translation matrix, and assigns it the given SpaceEntryID. (The loading itself may be performed asynchronously.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a66f5f1353ca3f5d31662ed24b4384092" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IPhysicalSpace::unloadResource</definition>
        <argsstring>(const SpaceEntryID &amp;mappingID)=0</argsstring>
        <name>unloadResource</name>
        <reimplementedby refid="class_physical_delegate_space_1a373f53e47415accb6d12af67d1f2483f">unloadResource</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a66b682896a3327315dad9849afd98cdd">unloadResource</reimplementedby>
        <param>
          <type>const SpaceEntryID &amp;</type>
          <declname>mappingID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method requests to unload the resource specified by the given SpaceEntryID. (The unloading itself may be performed asynchronously.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a84cc7d0187bd020f8455cf8d1b08b32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IPhysicalSpace::update</definition>
        <argsstring>(const BW::Rect &amp;rect, bool unloadOnly)=0</argsstring>
        <name>update</name>
        <reimplementedby refid="class_physical_delegate_space_1a6685c5f39acfea4e7d44661ceccc5cec">update</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a0f97fc938db187478a844dc1b36fc35e">update</reimplementedby>
        <param>
          <type>const BW::Rect &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unloadOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method loads and/or unloads resources, to cover the axis-aligned rectangle (the updated area that we serve). Return value: whether any new resources have been loaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a664f84b7d38ac0c87a1bb55570ff9043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IPhysicalSpace::getLoadedRect</definition>
        <argsstring>(BW::Rect &amp;rect) const  =0</argsstring>
        <name>getLoadedRect</name>
        <reimplementedby refid="class_physical_delegate_space_1a70527ddd74a2cb2e0ead6f63ed616b4a">getLoadedRect</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a76618846400cea35352da49cb41b8ef5">getLoadedRect</reimplementedby>
        <param>
          <type>BW::Rect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method does the best it can to determine an axis-aligned rectangle that has been loaded. If there is no loaded resource, then a very big rectangle is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a04668c9891fc677334611554fd3d9c84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IPhysicalSpace::getLoadableRects</definition>
        <argsstring>(BoundsList &amp;rects) const  =0</argsstring>
        <name>getLoadableRects</name>
        <reimplementedby refid="class_physical_delegate_space_1a335232515e8eefd7d1e79276d89e955e">getLoadableRects</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a3e20fe2d0058d128f26e6675e80bbcf8">getLoadableRects</reimplementedby>
        <param>
          <type>BoundsList &amp;</type>
          <declname>rects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method fills the list of Rects with loadable bounds of all mappings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rects</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to list of Rects to be filled with loadable bounds of all mappings. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if a full answer cannot be provided immediately, perhaps because resources are still being loaded, true otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a90222f03c3b303e65df7b30eae94628b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>BoundingBox</type>
        <definition>virtual BoundingBox IPhysicalSpace::bounds</definition>
        <argsstring>() const  =0</argsstring>
        <name>bounds</name>
        <reimplementedby refid="class_physical_chunk_space_1a5d3dbf6832ad5dc9137a7f95ac17d496">bounds</reimplementedby>
        <reimplementedby refid="class_physical_delegate_space_1ab94d903c4432f106f8f7b58d9015c02b">bounds</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns the minimal axis-aligned bounding box that contains all physical objects (including the terrain) in the space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a2b1485999fb6b6922a961c01c9e19595" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>BoundingBox</type>
        <definition>virtual BoundingBox IPhysicalSpace::subBounds</definition>
        <argsstring>() const </argsstring>
        <name>subBounds</name>
        <reimplementedby refid="class_physical_chunk_space_1aab4617e3f5050802a187a9147390142e">subBounds</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns the minimal loaded axis-aligned bounding box that contains all physical objects (including the terrain) in the space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="77" column="1" bodyfile="cellapp/physical_space.hpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a32893c92809c430fbe935414def2a73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IPhysicalSpace::cancelCurrentlyLoading</definition>
        <argsstring>()=0</argsstring>
        <name>cancelCurrentlyLoading</name>
        <reimplementedby refid="class_physical_delegate_space_1a1d0e2c0a032c9e6bf007c3b320a805d7">cancelCurrentlyLoading</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1adbd90cc324bd6999efbdb11efcbcd5a3">cancelCurrentlyLoading</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function goes through any resources that have been requested to be loaded, and cancels their loading process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a0b8c4865b1f1413425f436997e3c2b86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IPhysicalSpace::isFullyUnloaded</definition>
        <argsstring>() const  =0</argsstring>
        <name>isFullyUnloaded</name>
        <reimplementedby refid="class_physical_delegate_space_1aee5ad0463e46b05ca3fcc9921e78c54e">isFullyUnloaded</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a5f3b8588943e27538a296dfe26a74aa8">isFullyUnloaded</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether or not the space is fully unloaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a8ea6099ea1ff3fda89d18bf7747d32b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IPhysicalSpace::isFullyLoaded</definition>
        <argsstring>() const  =0</argsstring>
        <name>isFullyLoaded</name>
        <reimplementedby refid="class_physical_delegate_space_1a4b10c95ddbf1f9dc52c4f675776149a6">isFullyLoaded</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a17ab5f55a118e76b8272d68ea53842d6">isFullyLoaded</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether or not the space is fully loaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a979d4591e8ea39046b91536f4d34a414" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IPhysicalSpace::reuse</definition>
        <argsstring>()=0</argsstring>
        <name>reuse</name>
        <reimplementedby refid="class_physical_delegate_space_1a2c6b20d159ad363e593251d3744c07fd">reuse</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a5ecd562d88ba531bafa038336c68d2af">reuse</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method should prepare the space to be reused. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1aa2d11e478be0f5e6e4f9d65aec640908" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IPhysicalSpace::clear</definition>
        <argsstring>()=0</argsstring>
        <name>clear</name>
        <reimplementedby refid="class_physical_delegate_space_1a6efa79b0ef3c07363dfe1736f4e48848">clear</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a69a8088bbe7d3d27fc978d789947f162">clear</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method unloads all resources and clears all state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1a43f9319863c466901cf09c2237cd328a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IPhysicalSpace::getMatrixForGeometry</definition>
        <argsstring>(const StringRef path, const MatrixProviderPtr &amp;pMapper, Matrix &amp;matrix)=0</argsstring>
        <name>getMatrixForGeometry</name>
        <reimplementedby refid="class_physical_delegate_space_1a249b64415fc6423f6517096526f6a403">getMatrixForGeometry</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a08def531de4cc6b9d4036caaec261671">getMatrixForGeometry</reimplementedby>
        <param>
          <type>const StringRef</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const MatrixProviderPtr &amp;</type>
          <declname>pMapper</declname>
        </param>
        <param>
          <type>Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method extracts a Matrix suitable for loadResource from the MatrixProvider. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1ad02a52007c19413098e63d65a5a53ec6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const Scene &amp;</type>
        <definition>virtual const Scene&amp; IPhysicalSpace::scene</definition>
        <argsstring>() const  =0</argsstring>
        <name>scene</name>
        <reimplementedby refid="class_physical_delegate_space_1a9c6ff78c0ddb3bc17deca8e52ce28b70">scene</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a9df720e261f033fbe432cfd6f08df44c">scene</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These methods return Scene interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_physical_space_1ae87c93ad5f4a58c6715ebbabe046fd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Scene &amp;</type>
        <definition>virtual Scene&amp; IPhysicalSpace::scene</definition>
        <argsstring>()=0</argsstring>
        <name>scene</name>
        <reimplementedby refid="class_physical_delegate_space_1a951ad9937060b1338978a46124295b6c">scene</reimplementedby>
        <reimplementedby refid="class_physical_chunk_space_1a523dad80b9f04d72071091093ab2b457">scene</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_space.hpp" line="116" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This abstract interface is used to represent a Physical space with mapped resources, e.g. <ref refid="class_physical_chunk_space" kindref="compound">PhysicalChunkSpace</ref> or <ref refid="class_physical_delegate_space" kindref="compound">PhysicalDelegateSpace</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1551">
        <label>PhysicalChunkSpace</label>
        <link refid="class_physical_chunk_space"/>
        <childnode refid="1549" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1550">
        <label>ReferenceCount</label>
      </node>
      <node id="1549">
        <label>IPhysicalSpace</label>
        <link refid="class_i_physical_space"/>
        <childnode refid="1550" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1552">
        <label>PhysicalDelegateSpace</label>
        <link refid="class_physical_delegate_space"/>
        <childnode refid="1549" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1554">
        <label>ReferenceCount</label>
      </node>
      <node id="1553">
        <label>IPhysicalSpace</label>
        <link refid="class_i_physical_space"/>
        <childnode refid="1554" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="cellapp/physical_space.hpp" line="22" column="1" bodyfile="cellapp/physical_space.hpp" bodystart="21" bodyend="117"/>
    <listofallmembers>
      <member refid="class_i_physical_space_1a90222f03c3b303e65df7b30eae94628b" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>bounds</name></member>
      <member refid="class_i_physical_space_1a4f9b844ef47b8e9fa49a5ba4be6c4878" prot="public" virt="non-virtual"><scope>IPhysicalSpace</scope><name>BoundsList</name></member>
      <member refid="class_i_physical_space_1a32893c92809c430fbe935414def2a73b" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>cancelCurrentlyLoading</name></member>
      <member refid="class_i_physical_space_1aa2d11e478be0f5e6e4f9d65aec640908" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>clear</name></member>
      <member refid="class_i_physical_space_1a04668c9891fc677334611554fd3d9c84" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>getLoadableRects</name></member>
      <member refid="class_i_physical_space_1a664f84b7d38ac0c87a1bb55570ff9043" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>getLoadedRect</name></member>
      <member refid="class_i_physical_space_1a43f9319863c466901cf09c2237cd328a" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>getMatrixForGeometry</name></member>
      <member refid="class_i_physical_space_1a8ea6099ea1ff3fda89d18bf7747d32b8" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>isFullyLoaded</name></member>
      <member refid="class_i_physical_space_1a0b8c4865b1f1413425f436997e3c2b86" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>isFullyUnloaded</name></member>
      <member refid="class_i_physical_space_1ad4bf6afa9821ec80944e29f0307f4f7d" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>loadResource</name></member>
      <member refid="class_i_physical_space_1a979d4591e8ea39046b91536f4d34a414" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>reuse</name></member>
      <member refid="class_i_physical_space_1ad02a52007c19413098e63d65a5a53ec6" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>scene</name></member>
      <member refid="class_i_physical_space_1ae87c93ad5f4a58c6715ebbabe046fd82" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>scene</name></member>
      <member refid="class_i_physical_space_1a2b1485999fb6b6922a961c01c9e19595" prot="public" virt="virtual"><scope>IPhysicalSpace</scope><name>subBounds</name></member>
      <member refid="class_i_physical_space_1a66f5f1353ca3f5d31662ed24b4384092" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>unloadResource</name></member>
      <member refid="class_i_physical_space_1a84cc7d0187bd020f8455cf8d1b08b32e" prot="public" virt="pure-virtual"><scope>IPhysicalSpace</scope><name>update</name></member>
      <member refid="class_i_physical_space_1a6e8afeaa3ba55fcadbd15573288d5efa" prot="public" virt="virtual"><scope>IPhysicalSpace</scope><name>~IPhysicalSpace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
