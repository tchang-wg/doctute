<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="buffered__ghost__messages_8cpp" kind="file" language="C++">
    <compoundname>buffered_ghost_messages.cpp</compoundname>
    <includes refid="buffered__ghost__messages_8hpp" local="yes">buffered_ghost_messages.hpp</includes>
    <includes refid="buffered__ghost__messages__for__entity_8hpp" local="yes">buffered_ghost_messages_for_entity.hpp</includes>
    <includedby refid="cellapp__buffered__ghost__messages_8cpp" local="yes">cellapp/unit_test/cellapp_buffered_ghost_messages.cpp</includedby>
    <incdepgraph>
      <node id="6731">
        <label>buffered_ghost_messages.hpp</label>
        <link refid="buffered__ghost__messages_8hpp_source"/>
        <childnode refid="6732" relation="include">
        </childnode>
        <childnode refid="6738" relation="include">
        </childnode>
        <childnode refid="6735" relation="include">
        </childnode>
        <childnode refid="6744" relation="include">
        </childnode>
        <childnode refid="6737" relation="include">
        </childnode>
      </node>
      <node id="6744">
        <label>network/misc.hpp</label>
      </node>
      <node id="6739">
        <label>entitydef/volatile_info.hpp</label>
      </node>
      <node id="6732">
        <label>buffered_ghost_messages_for_entity.hpp</label>
        <link refid="buffered__ghost__messages__for__entity_8hpp_source"/>
        <childnode refid="6733" relation="include">
        </childnode>
        <childnode refid="6737" relation="include">
        </childnode>
      </node>
      <node id="6738">
        <label>cellapp_interface.hpp</label>
        <link refid="cellapp__interface_8hpp_source"/>
        <childnode refid="6739" relation="include">
        </childnode>
        <childnode refid="6740" relation="include">
        </childnode>
        <childnode refid="6741" relation="include">
        </childnode>
        <childnode refid="6742" relation="include">
        </childnode>
        <childnode refid="6743" relation="include">
        </childnode>
      </node>
      <node id="6730">
        <label>cellapp/buffered_ghost_messages.cpp</label>
        <link refid="buffered_ghost_messages.cpp"/>
        <childnode refid="6731" relation="include">
        </childnode>
        <childnode refid="6732" relation="include">
        </childnode>
      </node>
      <node id="6742">
        <label>server/common.hpp</label>
      </node>
      <node id="6734">
        <label>cstdmf/smartpointer.hpp</label>
      </node>
      <node id="6737">
        <label>cstdmf/bw_map.hpp</label>
      </node>
      <node id="6733">
        <label>buffered_ghost_message_queue.hpp</label>
        <link refid="buffered__ghost__message__queue_8hpp_source"/>
        <childnode refid="6734" relation="include">
        </childnode>
        <childnode refid="6735" relation="include">
        </childnode>
        <childnode refid="6736" relation="include">
        </childnode>
      </node>
      <node id="6736">
        <label>cstdmf/bw_list.hpp</label>
      </node>
      <node id="6735">
        <label>network/basictypes.hpp</label>
      </node>
      <node id="6743">
        <label>server/anonymous_channel_client.hpp</label>
      </node>
      <node id="6741">
        <label>network/msgtypes.hpp</label>
      </node>
      <node id="6740">
        <label>network/common_interface_macros.hpp</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;buffered_ghost_messages.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;buffered_ghost_messages_for_entity.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="namespace_b_w___b_e_g_i_n___n_a_m_e_s_p_a_c_e" kindref="compound">BW_BEGIN_NAMESPACE</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_ghost_messages_1a43a3a8cb18939c48c32228626238d592" kindref="member">BufferedGhostMessages::add</ref>(<sp/>EntityID<sp/>entityID,<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mercury::Address<sp/>&amp;<sp/>srcAddr,<sp/><ref refid="class_buffered_ghost_message" kindref="compound">BufferedGhostMessage</ref><sp/>*<sp/>pMessage<sp/>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>map_[<sp/>entityID<sp/>].add(<sp/>srcAddr,<sp/>pMessage<sp/>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_ghost_messages_1a94668a234fef6d762515765866ee627c" kindref="member">BufferedGhostMessages::playSubsequenceFor</ref>(<sp/>EntityID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mercury::Address<sp/>&amp;<sp/>srcAddr<sp/>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Map::iterator<sp/>iter<sp/>=<sp/>map_.find(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>map_.end())</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>&apos;this&apos;<sp/>may<sp/>have<sp/>been<sp/>deleted<sp/>already<sp/>if<sp/>false<sp/>is<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;second.playSubsequence(<sp/>srcAddr<sp/>))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_.erase(<sp/>iter<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_ghost_messages_1aea70fdfc6f2964486383e5d505f99bae" kindref="member">BufferedGhostMessages::playNewLifespanFor</ref>(<sp/>EntityID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>Map::iterator<sp/>iter<sp/>=<sp/>map_.find(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>map_.end())</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARNING_MSG(<sp/></highlight><highlight class="stringliteral">&quot;BufferedGhostMessages::playNewLifespanFor:<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>&apos;this&apos;<sp/>may<sp/>have<sp/>been<sp/>deleted<sp/>already<sp/>if<sp/>false<sp/>is<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;second.playNewLifespan())</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_.erase(<sp/>iter<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_buffered_ghost_messages_1a0d5b923daf54548931b1b10343bf68d5" kindref="member">BufferedGhostMessages::hasMessagesFor</ref>(<sp/>EntityID<sp/>entityID,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mercury::Address<sp/>&amp;<sp/>addr<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="66"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>Map::const_iterator<sp/>iter<sp/>=<sp/>map_.find(<sp/>entityID<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>map_.end())</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second.hasMessagesFrom(<sp/>addr<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_buffered_ghost_messages_1a100f8aec489341076c5aafd1784728b4" kindref="member">BufferedGhostMessages::isDelayingMessagesFor</ref>(<sp/>EntityID<sp/>entityID,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mercury::Address<sp/>&amp;<sp/>addr<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="84"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Map::const_iterator<sp/>iter<sp/>=<sp/>map_.find(<sp/>entityID<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>map_.end())</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second.isDelayingMessagesFor(<sp/>addr<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_buffered_ghost_messages_1ad98569b83c897912ff007c55bfee2be3" kindref="member">BufferedGhostMessages::delaySubsequence</ref>(<sp/>EntityID<sp/>entityID,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mercury::Address<sp/>&amp;<sp/>srcAddr,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_buffered_ghost_message" kindref="compound">BufferedGhostMessage</ref><sp/>*<sp/>pFirstMessage<sp/>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>map_[<sp/>entityID<sp/>].delaySubsequence(<sp/>srcAddr,<sp/>pFirstMessage<sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">BW_END_NAMESPACE</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffered_ghost_messages.cpp</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="cellapp/buffered_ghost_messages.cpp"/>
  </compounddef>
</doxygen>
