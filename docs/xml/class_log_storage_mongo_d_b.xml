<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_log_storage_mongo_d_b" kind="class" language="C++" prot="public">
    <compoundname>LogStorageMongoDB</compoundname>
    <basecompoundref refid="class_log_storage" prot="public" virt="non-virtual">LogStorage</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">TimerHandler</basecompoundref>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_log_storage_mongo_d_b_1ac694ada85cc3a7adc2fc08a90bcaca47" prot="private" static="no">
        <name>TimeOutType</name>
        <enumvalue id="class_log_storage_mongo_d_b_1ac694ada85cc3a7adc2fc08a90bcaca47ad9f8d5521e7edd48648f21d2153e1913" prot="private">
          <name>TIMEOUT_FLUSH_LOG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="115" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="114" bodyend="117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a412558dad71781232b2f536b7ffa38b4" prot="private" static="no" mutable="no">
        <type><ref refid="class_logger" kindref="compound">Logger</ref> &amp;</type>
        <definition>Logger&amp; LogStorageMongoDB::logger_</definition>
        <argsstring></argsstring>
        <name>logger_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="119" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a8e81f04b133f1fdbda5bbf8ecce067d4" prot="private" static="no" mutable="no">
        <type>TimerHandle</type>
        <definition>TimerHandle LogStorageMongoDB::flushTimer_</definition>
        <argsstring></argsstring>
        <name>flushTimer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="120" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1abbad0eb0d7b64adfb3f06957401c4b87" prot="private" static="no" mutable="no">
        <type>uint32</type>
        <definition>uint32 LogStorageMongoDB::currentBufSize_</definition>
        <argsstring></argsstring>
        <name>currentBufSize_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="121" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a3bc8196db1dc2437060d82c2863c974d" prot="private" static="no" mutable="no">
        <type>uint32</type>
        <definition>uint32 LogStorageMongoDB::maxBufSize_</definition>
        <argsstring></argsstring>
        <name>maxBufSize_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="123" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a04f9934c3844bc2caa72009c3f3f5819" prot="private" static="no" mutable="no">
        <type>uint32</type>
        <definition>uint32 LogStorageMongoDB::flushInterval_</definition>
        <argsstring></argsstring>
        <name>flushInterval_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="124" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1ae2e4eec00b163b02676af53912a8edab" prot="private" static="no" mutable="no">
        <type>uint32</type>
        <definition>uint32 LogStorageMongoDB::expireLogsDays_</definition>
        <argsstring></argsstring>
        <name>expireLogsDays_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="125" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a4db5bbb6a3573a771cf4798ce817f7ba" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t LogStorageMongoDB::cacheThreshold_</definition>
        <argsstring></argsstring>
        <name>cacheThreshold_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="126" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a2aeee3f2b415c3f4eef48c85f9f43a9a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t LogStorageMongoDB::numLogsDiscarded_</definition>
        <argsstring></argsstring>
        <name>numLogsDiscarded_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="127" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1acce2bf9bd8ac7bcecc974a1cd56fdf2d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::cacheWasFull_</definition>
        <argsstring></argsstring>
        <name>cacheWasFull_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="128" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a638e4f3b2e867233d4c1d138b870bea6" prot="private" static="no" mutable="no">
        <type>MongoDB::UserLogs</type>
        <definition>MongoDB::UserLogs LogStorageMongoDB::userLogs_</definition>
        <argsstring></argsstring>
        <name>userLogs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="130" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a95cab5af2616d382754a65af70fe3fb0" prot="private" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string LogStorageMongoDB::loggerID_</definition>
        <argsstring></argsstring>
        <name>loggerID_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="132" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a36b575c560d10b5bfab8f3a9e91db445" prot="private" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string LogStorageMongoDB::commonDBName_</definition>
        <argsstring></argsstring>
        <name>commonDBName_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="133" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a32a0742ed35749ae40e9d2bc03326c7c" prot="private" static="no" mutable="no">
        <type>mongo::DBClientConnection</type>
        <definition>mongo::DBClientConnection LogStorageMongoDB::conn_</definition>
        <argsstring></argsstring>
        <name>conn_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="135" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a998dc264f6f8e53a03323f51b6325e59" prot="private" static="no" mutable="no">
        <type><ref refid="class_mongo_d_b_1_1_connection_info" kindref="compound">MongoDB::ConnectionInfo</ref></type>
        <definition>MongoDB::ConnectionInfo LogStorageMongoDB::connectionInfo_</definition>
        <argsstring></argsstring>
        <name>connectionInfo_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="136" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1aeeb892403d282390aa69de765ef4abb9" prot="private" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">MongoDB::ConnectionThreadDataPtr</ref></type>
        <definition>MongoDB::ConnectionThreadDataPtr LogStorageMongoDB::pConnectionThreadData_</definition>
        <argsstring></argsstring>
        <name>pConnectionThreadData_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="137" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a239a16856f488690e78f03a5850c6977" prot="private" static="no" mutable="no">
        <type>TaskManager</type>
        <definition>TaskManager LogStorageMongoDB::mongoDBTaskMgr_</definition>
        <argsstring></argsstring>
        <name>mongoDBTaskMgr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="138" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a2ae2e40753e0276af40254f422111211" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::canAddLogs_</definition>
        <argsstring></argsstring>
        <name>canAddLogs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="139" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a0ce560776309c74bfdbc6fc138ab13a5" prot="private" static="no" mutable="no">
        <type><ref refid="class_hostnames_mongo_d_b" kindref="compound">HostnamesMongoDB</ref></type>
        <definition>HostnamesMongoDB LogStorageMongoDB::hostnames_</definition>
        <argsstring></argsstring>
        <name>hostnames_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="141" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1ae308fb0d5b27b3f868ecd53ae09110d9" prot="private" static="no" mutable="no">
        <type><ref refid="class_log_component_names_mongo_d_b" kindref="compound">LogComponentNamesMongoDB</ref></type>
        <definition>LogComponentNamesMongoDB LogStorageMongoDB::componentNames_</definition>
        <argsstring></argsstring>
        <name>componentNames_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="142" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a1494a2e380f83ebeb4603270d39492be" prot="private" static="no" mutable="no">
        <type><ref refid="class_format_strings_mongo_d_b" kindref="compound">FormatStringsMongoDB</ref></type>
        <definition>FormatStringsMongoDB LogStorageMongoDB::formatStrings_</definition>
        <argsstring></argsstring>
        <name>formatStrings_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="143" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1aac381121fa173d7e35f6a7dee7de3fab" prot="private" static="no" mutable="no">
        <type><ref refid="class_categories_mongo_d_b" kindref="compound">CategoriesMongoDB</ref></type>
        <definition>CategoriesMongoDB LogStorageMongoDB::categories_</definition>
        <argsstring></argsstring>
        <name>categories_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="144" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1af4a2ace1db79f20b2c39cdc316715157" prot="private" static="no" mutable="no">
        <type>AppIDMap</type>
        <definition>AppIDMap LogStorageMongoDB::appIDMap_</definition>
        <argsstring></argsstring>
        <name>appIDMap_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="145" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a7bf36f1f858dc28e794f4fbbfeee9ca8" prot="private" static="no" mutable="no">
        <type>uint64</type>
        <definition>uint64 LogStorageMongoDB::currentSecond_</definition>
        <argsstring></argsstring>
        <name>currentSecond_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="147" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1a0fcd5317fbe3e4a086e4e9db97472d8b" prot="private" static="no" mutable="no">
        <type>uint32</type>
        <definition>uint32 LogStorageMongoDB::currentCounter_</definition>
        <argsstring></argsstring>
        <name>currentCounter_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="148" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_storage_mongo_d_b_1aaa036fcd120230d740954e78693072d6" prot="private" static="no" mutable="no">
        <type>ComponentMap</type>
        <definition>ComponentMap LogStorageMongoDB::componentMap_</definition>
        <argsstring></argsstring>
        <name>componentMap_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="150" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a0f1aeb58681d6856d8743b10c2a1bc6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BW_BEGIN_NAMESPACE LogStorageMongoDB::LogStorageMongoDB</definition>
        <argsstring>(Logger &amp;logger)</argsstring>
        <name>LogStorageMongoDB</name>
        <param>
          <type><ref refid="class_logger" kindref="compound">Logger</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="46" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="33" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a635fd4a7fc498c48d0a5cd109a067763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogStorageMongoDB::~LogStorageMongoDB</definition>
        <argsstring>()</argsstring>
        <name>~LogStorageMongoDB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="47" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="68" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a07673271de84449f7e8a7605e37aa1c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::init</definition>
        <argsstring>(const ConfigReader &amp;config, const char *root)</argsstring>
        <name>init</name>
        <reimplements refid="class_log_storage_1a12fbfd9c33447d881dcd381ff3c95c63">init</reimplements>
        <param>
          <type>const ConfigReader &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the log storage, including reading configurations, initializing MongoDB connection and reading necessary data from MongoDB </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="52" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="121" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1acafaff1be07c4891508b4ab92a2b2c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::isConnected</definition>
        <argsstring>()</argsstring>
        <name>isConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reports if the thread is connected to MongoDB. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="53" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="184" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a97d0463492e0d3ddc8c2dbf40cecb9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void LogStorageMongoDB::tick</definition>
        <argsstring>()</argsstring>
        <name>tick</name>
        <reimplements refid="class_log_storage_1a4ea44cc8d860d001371e639664177797">tick</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger a tick in the TaskManager, as it expects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="54" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="195" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a372e6375bb27ae0ac73d0e9ce2d73ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::roll</definition>
        <argsstring>()</argsstring>
        <name>roll</name>
        <reimplements refid="class_log_storage_1a0d9879f1ae182940bf81e33fb34fcbaf">roll</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Roll up user active log collections and purge expired user log collections. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="55" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="213" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1aeafec74b2af3f6ba07174c71f612c64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::setAppInstanceID</definition>
        <argsstring>(const Mercury::Address &amp;addr, ServerAppInstanceID id)</argsstring>
        <name>setAppInstanceID</name>
        <param>
          <type>const Mercury::Address &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>ServerAppInstanceID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the App Instance ID of a address </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="57" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="225" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a53cb8c471a933ceb0f83924582126845" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::stopLoggingFromComponent</definition>
        <argsstring>(const Mercury::Address &amp;addr)</argsstring>
        <name>stopLoggingFromComponent</name>
        <reimplements refid="class_log_storage_1acad8876928ff3b9e62069dede8b7a9f5">stopLoggingFromComponent</reimplements>
        <param>
          <type>const Mercury::Address &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop logging from the component, delete in-memory data associated with it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="59" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="247" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1ac3ca612e2b14cbd2b1f34b80720a252f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HostnamesValidatorProcessStatus</type>
        <definition>HostnamesValidatorProcessStatus LogStorageMongoDB::validateNextHostname</definition>
        <argsstring>()</argsstring>
        <name>validateNextHostname</name>
        <reimplements refid="class_log_storage_1a8b6022714692f2511d9067a6a18de5e5">validateNextHostname</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="60" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a546438f7cc44a68e6888778db402cff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AddLogMessageResult</type>
        <definition>AddLogMessageResult LogStorageMongoDB::addLogMessage</definition>
        <argsstring>(const LoggerComponentMessage &amp;componentMessage, const Mercury::Address &amp;address, MemoryIStream &amp;inputStream)</argsstring>
        <name>addLogMessage</name>
        <reimplements refid="class_log_storage_1af66ef56c2b42c6f3068ee6ac65768501">addLogMessage</reimplements>
        <param>
          <type>const LoggerComponentMessage &amp;</type>
          <declname>componentMessage</declname>
        </param>
        <param>
          <type>const Mercury::Address &amp;</type>
          <declname>address</declname>
        </param>
        <param>
          <type>MemoryIStream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method overrides the parent class <ref refid="class_log_storage_1af66ef56c2b42c6f3068ee6ac65768501" kindref="member">LogStorage::addLogMessage</ref>.</para><para>If the DB connection is down, </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="62" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="272" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a321d90f5f4d854d14a8fbc7af84a1f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AddLogMessageResult</type>
        <definition>AddLogMessageResult LogStorageMongoDB::writeLogToDB</definition>
        <argsstring>(const LoggerComponentMessage &amp;componentMessage, const Mercury::Address &amp;address, MemoryIStream &amp;inputStream, const LoggerMessageHeader &amp;header, LogStringInterpolator *pHandler, MessageLogger::CategoryID categoryID)</argsstring>
        <name>writeLogToDB</name>
        <reimplements refid="class_log_storage_1a0651089583bf3e3660b4c0a629c7e466">writeLogToDB</reimplements>
        <param>
          <type>const LoggerComponentMessage &amp;</type>
          <declname>componentMessage</declname>
        </param>
        <param>
          <type>const Mercury::Address &amp;</type>
          <declname>address</declname>
        </param>
        <param>
          <type>MemoryIStream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type>const LoggerMessageHeader &amp;</type>
          <declname>header</declname>
        </param>
        <param>
          <type><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
          <declname>pHandler</declname>
        </param>
        <param>
          <type>MessageLogger::CategoryID</type>
          <declname>categoryID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write one log line to database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="66" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="317" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a0e3903704171f9959849f1ac84931e23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_format_strings" kindref="compound">FormatStrings</ref> *</type>
        <definition>FormatStrings* LogStorageMongoDB::getFormatStrings</definition>
        <argsstring>()</argsstring>
        <name>getFormatStrings</name>
        <reimplements refid="class_log_storage_1a42cedcc0167478c2c5a3511b899d961b">getFormatStrings</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="73" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a5ee2afd1c47600b84bd9dc7b38735e72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_hostnames" kindref="compound">Hostnames</ref> *</type>
        <definition>Hostnames* LogStorageMongoDB::getHostnames</definition>
        <argsstring>()</argsstring>
        <name>getHostnames</name>
        <reimplements refid="class_log_storage_1a5c3e0078fda44c489113c73c4dc6a641">getHostnames</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="74" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a2d57fa0707dc8b7af1ba3a20abc1bdc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_categories" kindref="compound">Categories</ref> *</type>
        <definition>Categories* LogStorageMongoDB::getCategories</definition>
        <argsstring>()</argsstring>
        <name>getCategories</name>
        <reimplements refid="class_log_storage_1a9bbcfc0ca040f15af0786430f0e8ce38">getCategories</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="75" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1ab42223a70a2dc13b8e54c31b1804fa3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_hostnames_validator" kindref="compound">HostnamesValidator</ref> *</type>
        <definition>HostnamesValidator* LogStorageMongoDB::getHostnamesValidator</definition>
        <argsstring>()</argsstring>
        <name>getHostnamesValidator</name>
        <reimplements refid="class_log_storage_1a05f39e95df725b40ffaeac3763774647">getHostnamesValidator</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="76" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="76" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1ac887952647905a1eb515f283776c0451" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::initMongoDBDriver</definition>
        <argsstring>()</argsstring>
        <name>initMongoDBDriver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the MongoDB driver. This should be done before calling any MongoDB driver API, according to MongoDB C++ legacy driver documentation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="49" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="89" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1ad09c1fa4f9d895db945ebc3e19c84d59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogStorageMongoDB::shutdownMongoDBDriver</definition>
        <argsstring>()</argsstring>
        <name>shutdownMongoDBDriver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shutdown and clean up MongoDB driver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="50" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a62fdfe4acd4b3067e01ae8eb19ccc798" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::connectToDB</definition>
        <argsstring>(mongo::DBClientConnection &amp;connection, MongoDB::ConnectionInfo &amp;connectionInfo)</argsstring>
        <name>connectToDB</name>
        <param>
          <type>mongo::DBClientConnection &amp;</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="class_mongo_d_b_1_1_connection_info" kindref="compound">MongoDB::ConnectionInfo</ref> &amp;</type>
          <declname>connectionInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A static method to connect and authenticate a passed-in MongoDB connection object using the passed-in connection info. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="78" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="687" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a06e530cde20d403399eca5a521f9ff8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LogStorageMongoDB::getShardKey</definition>
        <argsstring>(const LoggerComponentMessage &amp;componentMessage)</argsstring>
        <name>getShardKey</name>
        <param>
          <type>const LoggerComponentMessage &amp;</type>
          <declname>componentMessage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate the cluster shard key for the given message.</para><para>A good shard key should have two components:<itemizedlist>
<listitem><para>the first component with low cardinality to both group similar records and make even use of the available shards</para></listitem><listitem><para>the second component with high cardinality to ensure that chunks can always be split, and constantly increasing to allow for efficient index updates. This method generates the first component, and the second component is simply the timestamp field. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="80" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1106" bodyend="1112"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a010542955e955db85403a7039229738e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::initFromConfig</definition>
        <argsstring>(const ConfigReader &amp;config)</argsstring>
        <name>initFromConfig</name>
        <param>
          <type>const ConfigReader &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="83" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="498" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1ad2d9537004629d5a41c8cf1027076536" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::initCommonCollections</definition>
        <argsstring>()</argsstring>
        <name>initCommonCollections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="84" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="732" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a7a543834cbbecf2211c2f3bbb52e6dd7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::initSourcesColl</definition>
        <argsstring>(const MongoDB::CollList &amp;collList)</argsstring>
        <name>initSourcesColl</name>
        <param>
          <type>const MongoDB::CollList &amp;</type>
          <declname>collList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write sources to database if the collection doesn&apos;t exist. This is mainly for query </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="86" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="809" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1acfe1ce97b47167539a8bd2efa7840802" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::insertSourceToDB</definition>
        <argsstring>(DebugMessageSource type)</argsstring>
        <name>insertSourceToDB</name>
        <param>
          <type>DebugMessageSource</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert one source info into database </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="87" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="843" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1af4493663a4c5f229f1066a8fab493fb2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::initSeveritiesColl</definition>
        <argsstring>(const MongoDB::CollList &amp;collList)</argsstring>
        <name>initSeveritiesColl</name>
        <param>
          <type>const MongoDB::CollList &amp;</type>
          <declname>collList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write severity levels to database if the collection doesn&apos;t exist. This is mainly for query </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="88" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="868" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a3712c0af8e34d06d361b154da7b629aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::insertSeverityToDB</definition>
        <argsstring>(DebugMessagePriority level)</argsstring>
        <name>insertSeverityToDB</name>
        <param>
          <type>DebugMessagePriority</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert one severity level into database </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="89" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="909" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a3aaa278b173f475830ef2fb6c5a0f19d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::initVersionColl</definition>
        <argsstring>(const MongoDB::CollList &amp;collList)</argsstring>
        <name>initVersionColl</name>
        <param>
          <type>const MongoDB::CollList &amp;</type>
          <declname>collList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write version to database if the collection doesn&apos;t exist. Return false if the schema version in the database is different from that one in the code.</para><para>This is to identify the version of db schema that is used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="90" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="939" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a1ab00461fcc2add4f75f7895e3df63a5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogStorageMongoDB::insertVersion</definition>
        <argsstring>()</argsstring>
        <name>insertVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert version record into database </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="91" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1005" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1aed140a90c46a48119b8ea4dfdfb24f82" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mongo::BSONObj</type>
        <definition>mongo::BSONObj LogStorageMongoDB::createBson</definition>
        <argsstring>(const LoggerComponentMessage &amp;componentMessage, const Mercury::Address &amp;address, MemoryIStream &amp;inputStream, const LoggerMessageHeader &amp;header, LogStringInterpolator *pHandler, MessageLogger::CategoryID categoryID, uint64 timestamp)</argsstring>
        <name>createBson</name>
        <param>
          <type>const LoggerComponentMessage &amp;</type>
          <declname>componentMessage</declname>
        </param>
        <param>
          <type>const Mercury::Address &amp;</type>
          <declname>address</declname>
        </param>
        <param>
          <type>MemoryIStream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type>const LoggerMessageHeader &amp;</type>
          <declname>header</declname>
        </param>
        <param>
          <type><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
          <declname>pHandler</declname>
        </param>
        <param>
          <type>MessageLogger::CategoryID</type>
          <declname>categoryID</declname>
        </param>
        <param>
          <type>uint64</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create BSONobj for the log mesaage. Throw exception unpon error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="93" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1031" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1ab1bcc58d54825d5b4c8b4582227eb3cd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64</type>
        <definition>uint64 LogStorageMongoDB::getCurrentTime</definition>
        <argsstring>()</argsstring>
        <name>getCurrentTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current time in milliseconds </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="99" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1117" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a5a0ab0dbae017ee8e7b31fe2b577e082" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 LogStorageMongoDB::getCounter</definition>
        <argsstring>(uint64 milliseconds)</argsstring>
        <name>getCounter</name>
        <param>
          <type>uint64</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get counter by time. Counter automatically increase and starts from 1 for every second </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="100" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1130" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1abedf07c095ac5c803f14d8daffdd05c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ServerAppInstanceID</type>
        <definition>ServerAppInstanceID LogStorageMongoDB::getAppID</definition>
        <argsstring>(const Mercury::Address &amp;addr)</argsstring>
        <name>getAppID</name>
        <param>
          <type>const Mercury::Address &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the app id of a process by its address Return 0 if the address is not found </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="101" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1152" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1ae2f17d9ac1b64de7556a4ef624283f25" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogStorageMongoDB::parseMessage</definition>
        <argsstring>(LogStringInterpolator *pHandler, MemoryIStream &amp;inputStream, const Mercury::Address &amp;address, MessageLogger::NetworkVersion version, BW::string &amp;msg, mongo::BSONObj &amp;metadataObj)</argsstring>
        <name>parseMessage</name>
        <param>
          <type><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
          <declname>pHandler</declname>
        </param>
        <param>
          <type>MemoryIStream &amp;</type>
          <declname>inputStream</declname>
        </param>
        <param>
          <type>const Mercury::Address &amp;</type>
          <declname>address</declname>
        </param>
        <param>
          <type>MessageLogger::NetworkVersion</type>
          <declname>version</declname>
        </param>
        <param>
          <type>BW::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>mongo::BSONObj &amp;</type>
          <declname>metadataObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse out message and meta data from stream </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="102" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1167" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1acacdf0d024c5037486e9ab95374b0a64" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogStorageMongoDB::startFlushTimer</definition>
        <argsstring>()</argsstring>
        <name>startFlushTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="109" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1191" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1a2bf8bd8d4264d159fe02569ca2b863f4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64</type>
        <definition>uint64 LogStorageMongoDB::getExpireLogsSeconds</definition>
        <argsstring>()</argsstring>
        <name>getExpireLogsSeconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get log expiration time in seconds.</para><para>The expiration and purging is over entire collection, which means one collection will only be expired and purged when all of its logs have expired and collections containing expired and non-expired logs will not be purged. So one hour offset will be deducted when checking the timestamp of each collection, to avoid keeping one extra day logs when rolling doesn&apos;t happen at the exact second everyday. For example if the expireLogsDays_ is 7, in rare cases only logs of the last 6 days and 23 hours are kept. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="110" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1aa9e0f173ee7be4beff8ca23324afa417" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogStorageMongoDB::handleTimeout</definition>
        <argsstring>(TimerHandle handle, void *arg)</argsstring>
        <name>handleTimeout</name>
        <param>
          <type>TimerHandle</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle time out event, to flush logs to MongoDB server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="111" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1203" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="class_log_storage_mongo_d_b_1aa1fd567171489bd84d247541ea68efc8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AddLogMessageResult</type>
        <definition>AddLogMessageResult LogStorageMongoDB::flushLogs</definition>
        <argsstring>()</argsstring>
        <name>flushLogs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flush log to MongoDB server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mongodb/log_storage.hpp" line="112" column="1" bodyfile="tools/message_logger/mongodb/log_storage.cpp" bodystart="1217" bodyend="1246"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1805">
        <label>LogStorage</label>
        <link refid="class_log_storage"/>
      </node>
      <node id="1806">
        <label>TimerHandler</label>
      </node>
      <node id="1804">
        <label>LogStorageMongoDB</label>
        <link refid="class_log_storage_mongo_d_b"/>
        <childnode refid="1805" relation="public-inheritance">
        </childnode>
        <childnode refid="1806" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1808">
        <label>LogStorage</label>
        <link refid="class_log_storage"/>
      </node>
      <node id="1809">
        <label>TimerHandler</label>
      </node>
      <node id="1807">
        <label>LogStorageMongoDB</label>
        <link refid="class_log_storage_mongo_d_b"/>
        <childnode refid="1808" relation="public-inheritance">
        </childnode>
        <childnode refid="1809" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="tools/message_logger/mongodb/log_storage.hpp" line="44" column="1" bodyfile="tools/message_logger/mongodb/log_storage.hpp" bodystart="43" bodyend="151"/>
    <listofallmembers>
      <member refid="class_log_storage_mongo_d_b_1a546438f7cc44a68e6888778db402cff1" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>addLogMessage</name></member>
      <member refid="class_log_storage_mongo_d_b_1af4a2ace1db79f20b2c39cdc316715157" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>appIDMap_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a4db5bbb6a3573a771cf4798ce817f7ba" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>cacheThreshold_</name></member>
      <member refid="class_log_storage_mongo_d_b_1acce2bf9bd8ac7bcecc974a1cd56fdf2d" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>cacheWasFull_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a2ae2e40753e0276af40254f422111211" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>canAddLogs_</name></member>
      <member refid="class_log_storage_mongo_d_b_1aac381121fa173d7e35f6a7dee7de3fab" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>categories_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a36b575c560d10b5bfab8f3a9e91db445" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>commonDBName_</name></member>
      <member refid="class_log_storage_mongo_d_b_1aaa036fcd120230d740954e78693072d6" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>componentMap_</name></member>
      <member refid="class_log_storage_mongo_d_b_1ae308fb0d5b27b3f868ecd53ae09110d9" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>componentNames_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a32a0742ed35749ae40e9d2bc03326c7c" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>conn_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a998dc264f6f8e53a03323f51b6325e59" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>connectionInfo_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a62fdfe4acd4b3067e01ae8eb19ccc798" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>connectToDB</name></member>
      <member refid="class_log_storage_mongo_d_b_1aed140a90c46a48119b8ea4dfdfb24f82" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>createBson</name></member>
      <member refid="class_log_storage_mongo_d_b_1abbad0eb0d7b64adfb3f06957401c4b87" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>currentBufSize_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a0fcd5317fbe3e4a086e4e9db97472d8b" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>currentCounter_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a7bf36f1f858dc28e794f4fbbfeee9ca8" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>currentSecond_</name></member>
      <member refid="class_log_storage_mongo_d_b_1ae2e4eec00b163b02676af53912a8edab" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>expireLogsDays_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a04f9934c3844bc2caa72009c3f3f5819" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>flushInterval_</name></member>
      <member refid="class_log_storage_mongo_d_b_1aa1fd567171489bd84d247541ea68efc8" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>flushLogs</name></member>
      <member refid="class_log_storage_mongo_d_b_1a8e81f04b133f1fdbda5bbf8ecce067d4" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>flushTimer_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a1494a2e380f83ebeb4603270d39492be" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>formatStrings_</name></member>
      <member refid="class_log_storage_mongo_d_b_1abedf07c095ac5c803f14d8daffdd05c9" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>getAppID</name></member>
      <member refid="class_log_storage_mongo_d_b_1a2d57fa0707dc8b7af1ba3a20abc1bdc3" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>getCategories</name></member>
      <member refid="class_log_storage_mongo_d_b_1a5a0ab0dbae017ee8e7b31fe2b577e082" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>getCounter</name></member>
      <member refid="class_log_storage_mongo_d_b_1ab1bcc58d54825d5b4c8b4582227eb3cd" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>getCurrentTime</name></member>
      <member refid="class_log_storage_mongo_d_b_1a2bf8bd8d4264d159fe02569ca2b863f4" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>getExpireLogsSeconds</name></member>
      <member refid="class_log_storage_mongo_d_b_1a0e3903704171f9959849f1ac84931e23" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>getFormatStrings</name></member>
      <member refid="class_log_storage_mongo_d_b_1a5ee2afd1c47600b84bd9dc7b38735e72" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>getHostnames</name></member>
      <member refid="class_log_storage_mongo_d_b_1ab42223a70a2dc13b8e54c31b1804fa3a" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>getHostnamesValidator</name></member>
      <member refid="class_log_storage_mongo_d_b_1a06e530cde20d403399eca5a521f9ff8c" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>getShardKey</name></member>
      <member refid="class_log_storage_mongo_d_b_1aa9e0f173ee7be4beff8ca23324afa417" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>handleTimeout</name></member>
      <member refid="class_log_storage_mongo_d_b_1a0ce560776309c74bfdbc6fc138ab13a5" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>hostnames_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a07673271de84449f7e8a7605e37aa1c5" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>init</name></member>
      <member refid="class_log_storage_mongo_d_b_1ad2d9537004629d5a41c8cf1027076536" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>initCommonCollections</name></member>
      <member refid="class_log_storage_mongo_d_b_1a010542955e955db85403a7039229738e" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>initFromConfig</name></member>
      <member refid="class_log_storage_mongo_d_b_1ac887952647905a1eb515f283776c0451" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>initMongoDBDriver</name></member>
      <member refid="class_log_storage_mongo_d_b_1af4493663a4c5f229f1066a8fab493fb2" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>initSeveritiesColl</name></member>
      <member refid="class_log_storage_mongo_d_b_1a7a543834cbbecf2211c2f3bbb52e6dd7" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>initSourcesColl</name></member>
      <member refid="class_log_storage_mongo_d_b_1a3aaa278b173f475830ef2fb6c5a0f19d" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>initVersionColl</name></member>
      <member refid="class_log_storage_mongo_d_b_1a3712c0af8e34d06d361b154da7b629aa" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>insertSeverityToDB</name></member>
      <member refid="class_log_storage_mongo_d_b_1acfe1ce97b47167539a8bd2efa7840802" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>insertSourceToDB</name></member>
      <member refid="class_log_storage_mongo_d_b_1a1ab00461fcc2add4f75f7895e3df63a5" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>insertVersion</name></member>
      <member refid="class_log_storage_mongo_d_b_1acafaff1be07c4891508b4ab92a2b2c0f" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>isConnected</name></member>
      <member refid="class_log_storage_mongo_d_b_1a412558dad71781232b2f536b7ffa38b4" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>logger_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a95cab5af2616d382754a65af70fe3fb0" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>loggerID_</name></member>
      <member refid="class_log_storage_1a52d61df7f346353bdee03e762c8b68ee" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>LogStorage</name></member>
      <member refid="class_log_storage_mongo_d_b_1a0f1aeb58681d6856d8743b10c2a1bc6f" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>LogStorageMongoDB</name></member>
      <member refid="class_log_storage_mongo_d_b_1a3bc8196db1dc2437060d82c2863c974d" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>maxBufSize_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a239a16856f488690e78f03a5850c6977" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>mongoDBTaskMgr_</name></member>
      <member refid="class_log_storage_mongo_d_b_1a2aeee3f2b415c3f4eef48c85f9f43a9a" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>numLogsDiscarded_</name></member>
      <member refid="class_log_storage_mongo_d_b_1ae2f17d9ac1b64de7556a4ef624283f25" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>parseMessage</name></member>
      <member refid="class_log_storage_mongo_d_b_1aeeb892403d282390aa69de765ef4abb9" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>pConnectionThreadData_</name></member>
      <member refid="class_log_storage_1a11b5bbf9056e55e773d1e6a7b4c2c9ed" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>resolveUID</name></member>
      <member refid="class_log_storage_mongo_d_b_1a372e6375bb27ae0ac73d0e9ce2d73ca9" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>roll</name></member>
      <member refid="class_log_storage_mongo_d_b_1aeafec74b2af3f6ba07174c71f612c64b" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>setAppInstanceID</name></member>
      <member refid="class_log_storage_1a01a715ce3061931e04f7a5ddcd31d0a7" prot="public" virt="pure-virtual" ambiguityscope="LogStorage::"><scope>LogStorageMongoDB</scope><name>setAppInstanceID</name></member>
      <member refid="class_log_storage_mongo_d_b_1ad09c1fa4f9d895db945ebc3e19c84d59" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>shutdownMongoDBDriver</name></member>
      <member refid="class_log_storage_mongo_d_b_1acacdf0d024c5037486e9ab95374b0a64" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>startFlushTimer</name></member>
      <member refid="class_log_storage_mongo_d_b_1a53cb8c471a933ceb0f83924582126845" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>stopLoggingFromComponent</name></member>
      <member refid="class_log_storage_mongo_d_b_1a97d0463492e0d3ddc8c2dbf40cecb9fb" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>tick</name></member>
      <member refid="class_log_storage_mongo_d_b_1ac694ada85cc3a7adc2fc08a90bcaca47ad9f8d5521e7edd48648f21d2153e1913" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>TIMEOUT_FLUSH_LOG</name></member>
      <member refid="class_log_storage_mongo_d_b_1ac694ada85cc3a7adc2fc08a90bcaca47" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>TimeOutType</name></member>
      <member refid="class_log_storage_mongo_d_b_1a638e4f3b2e867233d4c1d138b870bea6" prot="private" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>userLogs_</name></member>
      <member refid="class_log_storage_mongo_d_b_1ac3ca612e2b14cbd2b1f34b80720a252f" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>validateNextHostname</name></member>
      <member refid="class_log_storage_mongo_d_b_1a321d90f5f4d854d14a8fbc7af84a1f00" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>writeLogToDB</name></member>
      <member refid="class_log_storage_1a5aa7a05fed0b9d0e9c22e3a360d95d8d" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>writeToStdout</name></member>
      <member refid="class_log_storage_1abda7927b1354a16005f8ca5b37a739b1" prot="protected" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>writeToStdout_</name></member>
      <member refid="class_log_storage_1ad9e92e507c284c1e6fc2b6d9e8eefce5" prot="public" virt="virtual"><scope>LogStorageMongoDB</scope><name>~LogStorage</name></member>
      <member refid="class_log_storage_mongo_d_b_1a635fd4a7fc498c48d0a5cd109a067763" prot="public" virt="non-virtual"><scope>LogStorageMongoDB</scope><name>~LogStorageMongoDB</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
