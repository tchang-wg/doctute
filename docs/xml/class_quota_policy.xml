<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_quota_policy" kind="class" language="C++" prot="public">
    <compoundname>QuotaPolicy</compoundname>
    <derivedcompoundref refid="class_rotating_quota_policy" prot="public" virt="non-virtual">RotatingQuotaPolicy</derivedcompoundref>
    <includes refid="quota__policy_8hpp" local="no">quota_policy.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937" prot="public" static="no">
        <name>PolicyType</name>
        <enumvalue id="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a9fbcf898476017dabcf7efa3ad2bb1d3" prot="public">
          <name>OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a06998ddd9079a86593bff3b7ef065327" prot="public">
          <name>ROTATING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a305d2ed60b72c7e5e8cd5ab6ae2ec4d2" prot="public">
          <name>CAPPED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a5f5a7e85d521f6af1e0e5f2049800d29" prot="public">
          <name>UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="23" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="22" bodyend="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quota_policy_1a9465dbd639d3802ad9656e0cce1081b1" prot="protected" static="no" mutable="no">
        <type>PolicyType</type>
        <definition>PolicyType QuotaPolicy::policyType_</definition>
        <argsstring></argsstring>
        <name>policyType_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="78" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quota_policy_1ad4dc4bb68948f7e7cc1db33a6da26b6d" prot="protected" static="no" mutable="no">
        <type>uint32</type>
        <definition>uint32 QuotaPolicy::maxQuotaBytes_</definition>
        <argsstring></argsstring>
        <name>maxQuotaBytes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="80" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_quota_policy_1a56978f602dd3dcaf79a4d4c681b3c18b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quota_policy" kindref="compound">QuotaPolicy</ref> *</type>
        <definition>QuotaPolicy * QuotaPolicy::getPolicy</definition>
        <argsstring>(const QuotaConfig &amp;config)</argsstring>
        <name>getPolicy</name>
        <param>
          <type>const <ref refid="class_quota_config" kindref="compound">QuotaConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Factory method to create a policy of the type contained in the config object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The container for all the configuration options </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created policy object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="31" column="1" bodyfile="tools/message_logger/quota_policy.cpp" bodystart="86" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_quota_policy_1a717df3d4a471ad3f17d9db94ecc6e184" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BW::string</type>
        <definition>BW_BEGIN_NAMESPACE BW::string QuotaPolicy::policyToStr</definition>
        <argsstring>(PolicyType type)</argsstring>
        <name>policyToStr</name>
        <param>
          <type>PolicyType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the string representation of the given type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy type to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="33" column="1" bodyfile="tools/message_logger/quota_policy.cpp" bodystart="16" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_quota_policy_1aac8fef20c2591b75554e76d111b71523" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PolicyType</type>
        <definition>QuotaPolicy::PolicyType QuotaPolicy::strToPolicy</definition>
        <argsstring>(BW::string type)</argsstring>
        <name>strToPolicy</name>
        <param>
          <type>BW::string</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the enumeration for the given string type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy type to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="35" column="1" bodyfile="tools/message_logger/quota_policy.cpp" bodystart="37" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_quota_policy_1a2324f60a1832eeb721283c52db356afe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuotaPolicy::tracksUsage</definition>
        <argsstring>(PolicyType type)</argsstring>
        <name>tracksUsage</name>
        <param>
          <type>PolicyType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the given policy actually tracks usage, and therefore whether there&apos;s any need for other parts of the code to collect it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy type to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether it tracks usage </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="37" column="1" bodyfile="tools/message_logger/quota_policy.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quota_policy_1a37f62646ae9ed50e1851b3a6e4401378" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuotaPolicy::tracksUsage</definition>
        <argsstring>() const </argsstring>
        <name>tracksUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the current policy actually tracks usage</para><para><simplesect kind="return"><para>Whether it tracks usage </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="39" column="1" bodyfile="tools/message_logger/quota_policy.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quota_policy_1a7eee9d7d1d3d728c19668b360b79d365" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PolicyType</type>
        <definition>PolicyType QuotaPolicy::type</definition>
        <argsstring>()</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="41" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_quota_policy_1a175a9af938644eddff5f09795e88fc55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BW::string</type>
        <definition>BW::string QuotaPolicy::str</definition>
        <argsstring>() const </argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the string representation of the current policy TODO: Currently just displays the type, should we include details too?</para><para><simplesect kind="return"><para>The string representation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="49" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_quota_policy_1abe8b8ba3aed35b203aa3caba8be8b7ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool QuotaPolicy::canAddEntries</definition>
        <argsstring>(uint32 currentUsageBytes) const </argsstring>
        <name>canAddEntries</name>
        <param>
          <type>uint32</type>
          <declname>currentUsageBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates whether the current user is allowed to add any more data with the given usage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUsageBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The user&apos;s current usage in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether they are allowed to add new records </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="60" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_quota_policy_1af7431c80a333e6a095764790498562e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool QuotaPolicy::shouldDeleteOldData</definition>
        <argsstring>(uint32 currentUsageBytes) const </argsstring>
        <name>shouldDeleteOldData</name>
        <reimplementedby refid="class_rotating_quota_policy_1a9d1a0a69d80e8fe2f09f9b76b70c7e7c">shouldDeleteOldData</reimplementedby>
        <param>
          <type>uint32</type>
          <declname>currentUsageBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates whether the current policy requires old data to be deleted for the given usage, in order to make space for new records.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentUsageBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The user&apos;s current usage in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether to delete old data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="72" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quota_policy_1a1c99444a8766bad1cb3620cf6d0b5b33" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuotaPolicy::QuotaPolicy</definition>
        <argsstring>(uint32 maxQuotaBytes, PolicyType type=OFF)</argsstring>
        <name>QuotaPolicy</name>
        <param>
          <type>uint32</type>
          <declname>maxQuotaBytes</declname>
        </param>
        <param>
          <type>PolicyType</type>
          <declname>type</declname>
          <defval>OFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/quota_policy.hpp" line="82" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_base" kindref="compound">Base</ref> policy class that is equivalent to no limits at all </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2331">
        <label>RotatingQuotaPolicy</label>
        <link refid="class_rotating_quota_policy"/>
        <childnode refid="2330" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2330">
        <label>QuotaPolicy</label>
        <link refid="class_quota_policy"/>
      </node>
    </inheritancegraph>
    <location file="tools/message_logger/quota_policy.hpp" line="20" column="1" bodyfile="tools/message_logger/quota_policy.hpp" bodystart="19" bodyend="88"/>
    <listofallmembers>
      <member refid="class_quota_policy_1abe8b8ba3aed35b203aa3caba8be8b7ee" prot="public" virt="virtual"><scope>QuotaPolicy</scope><name>canAddEntries</name></member>
      <member refid="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a305d2ed60b72c7e5e8cd5ab6ae2ec4d2" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>CAPPED</name></member>
      <member refid="class_quota_policy_1a56978f602dd3dcaf79a4d4c681b3c18b" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>getPolicy</name></member>
      <member refid="class_quota_policy_1ad4dc4bb68948f7e7cc1db33a6da26b6d" prot="protected" virt="non-virtual"><scope>QuotaPolicy</scope><name>maxQuotaBytes_</name></member>
      <member refid="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a9fbcf898476017dabcf7efa3ad2bb1d3" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>OFF</name></member>
      <member refid="class_quota_policy_1a717df3d4a471ad3f17d9db94ecc6e184" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>policyToStr</name></member>
      <member refid="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>PolicyType</name></member>
      <member refid="class_quota_policy_1a9465dbd639d3802ad9656e0cce1081b1" prot="protected" virt="non-virtual"><scope>QuotaPolicy</scope><name>policyType_</name></member>
      <member refid="class_quota_policy_1a1c99444a8766bad1cb3620cf6d0b5b33" prot="protected" virt="non-virtual"><scope>QuotaPolicy</scope><name>QuotaPolicy</name></member>
      <member refid="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a06998ddd9079a86593bff3b7ef065327" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>ROTATING</name></member>
      <member refid="class_quota_policy_1af7431c80a333e6a095764790498562e5" prot="public" virt="virtual"><scope>QuotaPolicy</scope><name>shouldDeleteOldData</name></member>
      <member refid="class_quota_policy_1a175a9af938644eddff5f09795e88fc55" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>str</name></member>
      <member refid="class_quota_policy_1aac8fef20c2591b75554e76d111b71523" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>strToPolicy</name></member>
      <member refid="class_quota_policy_1a2324f60a1832eeb721283c52db356afe" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>tracksUsage</name></member>
      <member refid="class_quota_policy_1a37f62646ae9ed50e1851b3a6e4401378" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>tracksUsage</name></member>
      <member refid="class_quota_policy_1a7eee9d7d1d3d728c19668b360b79d365" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>type</name></member>
      <member refid="class_quota_policy_1a7aadf563a21fb73ff8d6213d20c3d937a5f5a7e85d521f6af1e0e5f2049800d29" prot="public" virt="non-virtual"><scope>QuotaPolicy</scope><name>UNKNOWN</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
