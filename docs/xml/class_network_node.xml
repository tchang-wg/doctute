<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_network_node" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>NetworkNode</compoundname>
    <derivedcompoundref refid="class_leaf_network_node" prot="public" virt="non-virtual">LeafNetworkNode</derivedcompoundref>
    <derivedcompoundref refid="class_ring_network_node" prot="public" virt="non-virtual">RingNetworkNode</derivedcompoundref>
    <derivedcompoundref refid="class_top_level_network_node" prot="public" virt="non-virtual">TopLevelNetworkNode</derivedcompoundref>
    <includes refid="network__node_8hpp" local="no">network_node.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_network_node_1a7581ca5d2410231b999f367487e4a84c" prot="public" static="no">
        <name>NodeType</name>
        <enumvalue id="class_network_node_1a7581ca5d2410231b999f367487e4a84ca5d429b377cb75808342dec855e5d09e0" prot="public">
          <name>NODE_UNKNOWN_NETWORK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_network_node_1a7581ca5d2410231b999f367487e4a84cadd46432278229d8ac679fbfeb21e2cc9" prot="public">
          <name>NODE_RING_NETWORK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_network_node_1a7581ca5d2410231b999f367487e4a84cad003b2e47c1e88e14ada5c4a8e75eb32" prot="public">
          <name>NODE_TOP_LEVEL</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_network_node_1a7581ca5d2410231b999f367487e4a84ca1cdc9fcaead5ce7048dd19951c818ccd" prot="public">
          <name>NODE_LEAF</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="33" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="32" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_network_node_1a95fa25b039d62d0ef9f9ac796cef20e1" prot="protected" static="no" mutable="no">
        <type><ref refid="class_connection_wrapper_mgr" kindref="compound">ConnectionWrapperMgr</ref></type>
        <definition>ConnectionWrapperMgr NetworkNode::connectionWrapperMgr_</definition>
        <argsstring></argsstring>
        <name>connectionWrapperMgr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="206" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_network_node_1a47c3fc0d9456d5f3bf6ba389f2dce53f" prot="private" static="no" mutable="no">
        <type>uint16</type>
        <definition>uint16 NetworkNode::port_</definition>
        <argsstring></argsstring>
        <name>port_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="211" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_network_node_1aa8efe8d5cae9845f568097bd428bdf9d" prot="private" static="no" mutable="no">
        <type>uint16</type>
        <definition>uint16 NetworkNode::discoveryPort_</definition>
        <argsstring></argsstring>
        <name>discoveryPort_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="212" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_network_node_1ab631237fffa434c32c3ea59f89923bb5" prot="private" static="no" mutable="no">
        <type>u_int32_t</type>
        <definition>u_int32_t NetworkNode::networkAddr_</definition>
        <argsstring></argsstring>
        <name>networkAddr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="216" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_network_node_1a4a80b7f8391782dfb7a5e403fe4154ea" prot="private" static="no" mutable="no">
        <type>Endpoint</type>
        <definition>Endpoint NetworkNode::epLocal_</definition>
        <argsstring></argsstring>
        <name>epLocal_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="219" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_network_node_1afa838caf084c3a46d1bf8503fc4d1642" prot="private" static="no" mutable="no">
        <type>Endpoint</type>
        <definition>Endpoint NetworkNode::epLocalTCP_</definition>
        <argsstring></argsstring>
        <name>epLocalTCP_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="223" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_network_node_1a8ea43d56e13f46b2a1819e5b96ad3478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BW_BEGIN_NAMESPACE NetworkNode::NetworkNode</definition>
        <argsstring>(Mercury::EventDispatcher &amp;dispatcher, ConnectionWrapper::ReadHandler *pConnectionReadHandler, uint16 port)</argsstring>
        <name>NetworkNode</name>
        <param>
          <type>Mercury::EventDispatcher &amp;</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type><ref refid="class_connection_wrapper_1_1_read_handler" kindref="compound">ConnectionWrapper::ReadHandler</ref> *</type>
          <declname>pConnectionReadHandler</declname>
        </param>
        <param>
          <type>uint16</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>The Event Dispatcher object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pConnectionReadHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A handler for packet data that has been read from connections </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port on which the <ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> Network is communicating. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="40" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="20" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1ad8c42da72e920b4b2470d24c588019b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NetworkNode::setInternalInterface</definition>
        <argsstring>(const BW::string &amp;internalInterface)</argsstring>
        <name>setInternalInterface</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>internalInterface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the network address based on the passed-in internal interface.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>internalInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>An address or interface name</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="44" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="47" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a2b0a5947366d4e22c7a6c7396556a761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NetworkNode::initNetworkInterfaces</definition>
        <argsstring>()</argsstring>
        <name>initNetworkInterfaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialises the internal and external interfaces.</para><para><simplesect kind="return"><para>true on success, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="45" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="121" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a0162469d287b9bde677fd2d8fda5bf9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NetworkNode::listenOnEndpoints</definition>
        <argsstring>()</argsstring>
        <name>listenOnEndpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts listening to the network by registering all owned endpoints with the socket handler manager and therefore the event dispatcher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="46" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="305" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a5d7ead3a7f13ef8209e654c3122f970e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NetworkNode::closeEndpoints</definition>
        <argsstring>()</argsstring>
        <name>closeEndpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes all owned endpoints. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="47" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="326" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1ae46a963d5928e991d1be31524c8ddf62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NetworkNode::cleanupConnectionHandlers</definition>
        <argsstring>(bool freeAll)</argsstring>
        <name>cleanupConnectionHandlers</name>
        <param>
          <type>bool</type>
          <declname>freeAll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="49" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1aa52b6fb625756b157e33f0f10e2cd98b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u_int32_t</type>
        <definition>u_int32_t NetworkNode::networkAddr</definition>
        <argsstring>() const </argsstring>
        <name>networkAddr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="54" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1ad4449bcbf4ce02e3ca57552ce4fb71d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NetworkNode::isDefaultPort</definition>
        <argsstring>() const </argsstring>
        <name>isDefaultPort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="60" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a214eacbc97325fc7290634954d43fdc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16</type>
        <definition>uint16 NetworkNode::port</definition>
        <argsstring>() const </argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="66" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a69e0f788ad274f7268455975c428466f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NetworkNode::startHeartbeat</definition>
        <argsstring>()=0</argsstring>
        <name>startHeartbeat</name>
        <reimplementedby refid="class_top_level_network_node_1ab98804991b7ebe6d7af758e6a5892f08">startHeartbeat</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1af46a8b364fd684ffdcc636e96ce318c6">startHeartbeat</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1a47381a0ce28e488928c45e22d389ef96">startHeartbeat</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts the inter-machined announcement/heartbeat/keepalive system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a86cc9b4937b3eaafd2bc9bf25f734277" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::sendBroadcast</definition>
        <argsstring>(MachineGuardMessage *pMGM)=0</argsstring>
        <name>sendBroadcast</name>
        <reimplementedby refid="class_leaf_network_node_1a57f613b8b586fe8fdeca7250b4e4f7f3">sendBroadcast</reimplementedby>
        <reimplementedby refid="class_top_level_network_node_1a28761938ba80d99a4fbd395b7cc1d671">sendBroadcast</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1abae73fce9402cfe3b33ec2f0f9b88325">sendBroadcast</reimplementedby>
        <param>
          <type>MachineGuardMessage *</type>
          <declname>pMGM</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Broadcasts the provided mgm to the cluster.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pMGM</parametername>
</parameternamelist>
<parameterdescription>
<para>The MGM to broadcast</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a1be580af296fb1893b14237762170ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::sendBroadcast</definition>
        <argsstring>(MGMPacket *pPacket)=0</argsstring>
        <name>sendBroadcast</name>
        <reimplementedby refid="class_leaf_network_node_1adf733d69cb883306845981c51b9f350d">sendBroadcast</reimplementedby>
        <reimplementedby refid="class_top_level_network_node_1a03fbb55cc31ce6565b3e98b676913984">sendBroadcast</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1ab49a8b9c9ba482b11bbc82f7f1c15763">sendBroadcast</reimplementedby>
        <param>
          <type>MGMPacket *</type>
          <declname>pPacket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Broadcasts the provided packet to the cluster.</para><para>This method differs from sendWrappedBroadcastPacket in that responses will be handled by this <ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> as a normal MGM response.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pPacket</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet to broadcast</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a36002a456a2583950e986e6a6f02b180" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::sendWrappedBroadcastPacket</definition>
        <argsstring>(MGMPacket *pPacket)=0</argsstring>
        <name>sendWrappedBroadcastPacket</name>
        <reimplementedby refid="class_leaf_network_node_1a75b3a73cdda80a6ef103715104c96b30">sendWrappedBroadcastPacket</reimplementedby>
        <reimplementedby refid="class_top_level_network_node_1a85c046038033503153a83f0a2b57c89a">sendWrappedBroadcastPacket</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1acc6c8ad7e976f6d6a1ff96e80eb6ca39">sendWrappedBroadcastPacket</reimplementedby>
        <param>
          <type>MGMPacket *</type>
          <declname>pPacket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Broadcasts the provided wrapped packet to the cluster.</para><para>This method differs to sendBroadcast in that it is for sending packets that were wrapped within a BroadcastWrapperMessage, and therefore responses will be treated as a response to a wrapped broadcast.</para><para>These responses are intended to be gathered together as a ResponseWrapperMessage and forwarded on to the original sender via a <ref refid="class_broadcast_manager" kindref="compound">BroadcastManager</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pPacket</parametername>
</parameternamelist>
<parameterdescription>
<para>The wrapped packet to broadcast.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1aa1319f908f02d0ec2d978671d4ae290d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::isBroadcastResponse</definition>
        <argsstring>(const ConnectionWrapperPtr pConnection, MGMPacket &amp;packet) const  =0</argsstring>
        <name>isBroadcastResponse</name>
        <reimplementedby refid="class_leaf_network_node_1a0c43923534ad603dca87156009f8115a">isBroadcastResponse</reimplementedby>
        <reimplementedby refid="class_top_level_network_node_1aa9d928e6e7ef822c773597d14ce9e9eb">isBroadcastResponse</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1a8ee4ed66770b47fa5b84babe80ed942f">isBroadcastResponse</reimplementedby>
        <param>
          <type>const <ref refid="class_smart_pointer" kindref="compound">ConnectionWrapperPtr</ref></type>
          <declname>pConnection</declname>
        </param>
        <param>
          <type>MGMPacket &amp;</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the provided parameters indicate that this is a broadcast response message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint on which the MGM arrived </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>The received packet</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the provided mgm was a broadcast response, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1acba74dd33fa9e64e0096c521f132a982" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Endpoint &amp;</type>
        <definition>virtual Endpoint&amp; NetworkNode::outgoingUDPEndpoint</definition>
        <argsstring>()=0</argsstring>
        <name>outgoingUDPEndpoint</name>
        <reimplementedby refid="class_leaf_network_node_1a68b71379405716f49d19ecee197f6f11">outgoingUDPEndpoint</reimplementedby>
        <reimplementedby refid="class_top_level_network_node_1aacf4ede8d4b8777c34dc942333468a3b">outgoingUDPEndpoint</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1ae5359cb00a527b4b54a3d3cccdfbb47d">outgoingUDPEndpoint</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the UDP endpoint which is to be used for sending directed messages to a destination. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a5d49ce01329d82f326d534e378ec16a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_broadcast_manager" kindref="compound">BroadcastManager</ref> *</type>
        <definition>virtual BroadcastManager* NetworkNode::createBroadcastManager</definition>
        <argsstring>(BroadcastWrapperMessage &amp;bwm, ConnectionWrapperPtr pReplyConnection, ManagerLookup &amp;lookup)=0</argsstring>
        <name>createBroadcastManager</name>
        <reimplementedby refid="class_leaf_network_node_1a8295b3a5a36b3095dec03fe4fcc06700">createBroadcastManager</reimplementedby>
        <reimplementedby refid="class_top_level_network_node_1a2a032a42b843f94507dcd13d43bf07a9">createBroadcastManager</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1a84b73de4462b1f73265b7208fa7821d4">createBroadcastManager</reimplementedby>
        <param>
          <type>BroadcastWrapperMessage &amp;</type>
          <declname>bwm</declname>
        </param>
        <param>
          <type><ref refid="class_smart_pointer" kindref="compound">ConnectionWrapperPtr</ref></type>
          <declname>pReplyConnection</declname>
        </param>
        <param>
          <type>ManagerLookup &amp;</type>
          <declname>lookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A generator method which creates a <ref refid="class_broadcast_manager" kindref="compound">BroadcastManager</ref> that handles broadcasts sent by this network node.</para><para>The <ref refid="class_broadcast_manager" kindref="compound">BroadcastManager</ref>&apos;s subclass will be specific to this type of <ref refid="class_network_node" kindref="compound">NetworkNode</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bwm</parametername>
</parameternamelist>
<parameterdescription>
<para>The BroadcastWrapperMessage that the new <ref refid="class_broadcast_manager" kindref="compound">BroadcastManager</ref> sends and handles responses for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pReplyConnection</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection wrapper to handle sending responses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lookup</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to update with sequence number references to the new <ref refid="class_broadcast_manager" kindref="compound">BroadcastManager</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a <ref refid="class_broadcast_manager" kindref="compound">BroadcastManager</ref> object. This memory must be managed by the caller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a2f6da3a9dc5d366ab8a5d155f5e64e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::handleWholeMachineMessageReply</definition>
        <argsstring>(WholeMachineMessage &amp;wmm, sockaddr_in &amp;sin)=0</argsstring>
        <name>handleWholeMachineMessageReply</name>
        <reimplementedby refid="class_top_level_network_node_1af6c62fdc839e58297b181244a0ea32a8">handleWholeMachineMessageReply</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1acc815d14a1366f24c0375639df79d373">handleWholeMachineMessageReply</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1aa6e04c5362b841c08cbce6f6a5cf36cb">handleWholeMachineMessageReply</reimplementedby>
        <param>
          <type>WholeMachineMessage &amp;</type>
          <declname>wmm</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>sin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles WholeMachineMessages sent by another <ref refid="class_b_w_machined" kindref="compound">BWMachined</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wmm</parametername>
</parameternamelist>
<parameterdescription>
<para>The received WholeMachineMessage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sin</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address that received the message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if handled, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a2e52e8a4ae330c682b4b1f6c0bce10f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::handleHighPrecisionMachineMessageReply</definition>
        <argsstring>(HighPrecisionMachineMessage &amp;hpmm, sockaddr_in &amp;sin)=0</argsstring>
        <name>handleHighPrecisionMachineMessageReply</name>
        <reimplementedby refid="class_top_level_network_node_1a34c8cd077712149a66069a075516606e">handleHighPrecisionMachineMessageReply</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1add155bcc9d72bdb7427b308eaa217978">handleHighPrecisionMachineMessageReply</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1a47b2367c810a81f3040662d91c2e6061">handleHighPrecisionMachineMessageReply</reimplementedby>
        <param>
          <type>HighPrecisionMachineMessage &amp;</type>
          <declname>hpmm</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>sin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles HighPrecisionMachineMessages sent by another <ref refid="class_b_w_machined" kindref="compound">BWMachined</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hpmm</parametername>
</parameternamelist>
<parameterdescription>
<para>The received HighPrecisionMachineMessage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sin</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address that received the message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if handled, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a8a6e43d2bd94491fac81db96160874a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NetworkNode::handleMachinedAnnounceBirth</definition>
        <argsstring>(MachinedAnnounceMessage &amp;mam, sockaddr_in &amp;sin, MGMPacket &amp;replies)=0</argsstring>
        <name>handleMachinedAnnounceBirth</name>
        <reimplementedby refid="class_top_level_network_node_1a2bba2c2fd38da8be47321584077add95">handleMachinedAnnounceBirth</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1ab4f690a4f8354ae57b6a60e4e4a3dcf4">handleMachinedAnnounceBirth</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1a4b87845366479659d05f2914f084a9e9">handleMachinedAnnounceBirth</reimplementedby>
        <param>
          <type>MachinedAnnounceMessage &amp;</type>
          <declname>mam</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>sin</declname>
        </param>
        <param>
          <type>MGMPacket &amp;</type>
          <declname>replies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles MachinedAnnounceMessage type ANNOUNCE_BIRTH.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mam</parametername>
</parameternamelist>
<parameterdescription>
<para>The received MachinedAnnounceMessage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sin</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address that received the message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replies</parametername>
</parameternamelist>
<parameterdescription>
<para>The package to append birth replies to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a1776c9aab09009a1d6f5c07102adface" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NetworkNode::handleMachinedAnnounceDeath</definition>
        <argsstring>(MachinedAnnounceMessage &amp;mam, sockaddr_in &amp;sin)=0</argsstring>
        <name>handleMachinedAnnounceDeath</name>
        <reimplementedby refid="class_top_level_network_node_1a2b1b641edc262ec3fc8bf6715b5b46d5">handleMachinedAnnounceDeath</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1a008ac8d9f4017a2d23105828703c69ec">handleMachinedAnnounceDeath</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1a5516eed09e8de5c0edc3534a1e39bd31">handleMachinedAnnounceDeath</reimplementedby>
        <param>
          <type>MachinedAnnounceMessage &amp;</type>
          <declname>mam</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>sin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles MachinedAnnounceMessage type ANNOUNCE_DEATH.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mam</parametername>
</parameternamelist>
<parameterdescription>
<para>The received MachinedAnnounceMessage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sin</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address that received the message. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a49e8e8ef3d832d28ffaba2371a5e74a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NetworkNode::handleMachinedAnnounceExists</definition>
        <argsstring>(MachinedAnnounceMessage &amp;mam, sockaddr_in &amp;sin)=0</argsstring>
        <name>handleMachinedAnnounceExists</name>
        <reimplementedby refid="class_top_level_network_node_1a919852aff5c4388237c3ed4b127d8353">handleMachinedAnnounceExists</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1a3a46aa0c93ea07adec6b1c183f1e311c">handleMachinedAnnounceExists</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1a45cbee37d4f5cae6d48896359fc2806b">handleMachinedAnnounceExists</reimplementedby>
        <param>
          <type>MachinedAnnounceMessage &amp;</type>
          <declname>mam</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>sin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles MachinedAnnounceMessage type ANNOUNCE_EXISTS.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mam</parametername>
</parameternamelist>
<parameterdescription>
<para>The received MachinedAnnounceMessage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sin</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address that received the message. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="202" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_network_node_1ac17508bae117c8a432a361c02c224e13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NetworkNode::NodeType</type>
        <definition>NetworkNode::NodeType NetworkNode::strToNodeType</definition>
        <argsstring>(BW::string &amp;type)</argsstring>
        <name>strToNodeType</name>
        <param>
          <type>BW::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the ClusterMode config option string to the related enum representation</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The enum representation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="51" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="356" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a37bc8d64c323d46841bdbac935a43dbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NetworkNode::NodeType</type>
        <definition>NetworkNode::NodeType NetworkNode::strToNodeType</definition>
        <argsstring>(const char *type)</argsstring>
        <name>strToNodeType</name>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the ClusterMode config option char pointer to the related enum representation</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The char pointer to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The enum representation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="52" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="382" bodyend="386"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_network_node_1abacbf8daab390687c7fee13d21cec12e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16</type>
        <definition>uint16 NetworkNode::discoveryPort</definition>
        <argsstring>()</argsstring>
        <name>discoveryPort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="208" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_network_node_1a56f568f8958519df76cc520aaebd96d1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NetworkNode::findNetworkAddr</definition>
        <argsstring>()</argsstring>
        <name>findNetworkAddr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a broadcast message out to the network and listens for it on all our interfaces to determine what our default broadcast interface is.</para><para><simplesect kind="return"><para>true on success, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="225" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="155" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1afb5dd767be9e2b81e51b4b7554287c42" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NetworkNode::initLocalNetworkInterfaces</definition>
        <argsstring>()</argsstring>
        <name>initLocalNetworkInterfaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialises the local endpoints.</para><para><simplesect kind="return"><para>true on success, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="226" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="264" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a536be70736eccbab33bffefdeb10cb54" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NetworkNode::listenOnLocalEndpoints</definition>
        <argsstring>()</argsstring>
        <name>listenOnLocalEndpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers local endpoints with the socket handler manager </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="227" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="315" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a518017244e1499252b3f02358fb7c4d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NetworkNode::closeLocalEndpoints</definition>
        <argsstring>()</argsstring>
        <name>closeLocalEndpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes local endpoints. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="228" column="1" bodyfile="tools/bwmachined/network_node.cpp" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1afbbdbf252700a4f76d011912fdb943f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::initExternalNetworkInterfaces</definition>
        <argsstring>()=0</argsstring>
        <name>initExternalNetworkInterfaces</name>
        <reimplementedby refid="class_top_level_network_node_1ad0441959c5827d540bbc0067276ae705">initExternalNetworkInterfaces</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1a32d7bdc1dfdc989bda853d83878180bd">initExternalNetworkInterfaces</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1a4dd84148789507d180bbdd0dda79f8e0">initExternalNetworkInterfaces</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialises external endpoints.</para><para><simplesect kind="return"><para>true on success, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1aaebcbb0bd4bb1b687d03eb4a813e65f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NetworkNode::listenOnExternalEndpoints</definition>
        <argsstring>()=0</argsstring>
        <name>listenOnExternalEndpoints</name>
        <reimplementedby refid="class_top_level_network_node_1a547cd367ac4863f1c39c9c51af447536">listenOnExternalEndpoints</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1ab556aca247d5fdb524a3205662af0080">listenOnExternalEndpoints</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1a4bb1f2041144a6224b0f6d88e9dd7ee1">listenOnExternalEndpoints</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers external endpoints for dispatching and socket handling. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_network_node_1a848358d82476d2c5bbf0bb8feb5631d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NetworkNode::closeExternalEndpoints</definition>
        <argsstring>()=0</argsstring>
        <name>closeExternalEndpoints</name>
        <reimplementedby refid="class_top_level_network_node_1a27a6c5dbf66d2d4e13b4444763bdb550">closeExternalEndpoints</reimplementedby>
        <reimplementedby refid="class_ring_network_node_1ab2bd56ee9ce93935394a8a2cccd07f2e">closeExternalEndpoints</reimplementedby>
        <reimplementedby refid="class_leaf_network_node_1ae140541a918e97950f280150e2fd44c5">closeExternalEndpoints</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes external endpoints. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/network_node.hpp" line="245" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class handles both network initialisation and ongoing communication with the BigWorld server as well as with the BWMachineD cluster.</para><para>Implementation-specific versions of this class are to implement their own non-local network endpoints, cluster communications and broadcast methods. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2046">
        <label>RingNetworkNode</label>
        <link refid="class_ring_network_node"/>
        <childnode refid="2044" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2045">
        <label>LeafNetworkNode</label>
        <link refid="class_leaf_network_node"/>
        <childnode refid="2044" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2044">
        <label>NetworkNode</label>
        <link refid="class_network_node"/>
      </node>
      <node id="2047">
        <label>TopLevelNetworkNode</label>
        <link refid="class_top_level_network_node"/>
        <childnode refid="2044" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2049">
        <label>ConnectionWrapperMgr</label>
        <link refid="class_connection_wrapper_mgr"/>
      </node>
      <node id="2048">
        <label>NetworkNode</label>
        <link refid="class_network_node"/>
        <childnode refid="2049" relation="usage">
          <edgelabel>connectionWrapperMgr_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="tools/bwmachined/network_node.hpp" line="30" column="1" bodyfile="tools/bwmachined/network_node.hpp" bodystart="29" bodyend="246"/>
    <listofallmembers>
      <member refid="class_network_node_1ae46a963d5928e991d1be31524c8ddf62" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>cleanupConnectionHandlers</name></member>
      <member refid="class_network_node_1a5d7ead3a7f13ef8209e654c3122f970e" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>closeEndpoints</name></member>
      <member refid="class_network_node_1a848358d82476d2c5bbf0bb8feb5631d6" prot="private" virt="pure-virtual"><scope>NetworkNode</scope><name>closeExternalEndpoints</name></member>
      <member refid="class_network_node_1a518017244e1499252b3f02358fb7c4d5" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>closeLocalEndpoints</name></member>
      <member refid="class_network_node_1a95fa25b039d62d0ef9f9ac796cef20e1" prot="protected" virt="non-virtual"><scope>NetworkNode</scope><name>connectionWrapperMgr_</name></member>
      <member refid="class_network_node_1a5d49ce01329d82f326d534e378ec16a5" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>createBroadcastManager</name></member>
      <member refid="class_network_node_1abacbf8daab390687c7fee13d21cec12e" prot="protected" virt="non-virtual"><scope>NetworkNode</scope><name>discoveryPort</name></member>
      <member refid="class_network_node_1aa8efe8d5cae9845f568097bd428bdf9d" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>discoveryPort_</name></member>
      <member refid="class_network_node_1a4a80b7f8391782dfb7a5e403fe4154ea" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>epLocal_</name></member>
      <member refid="class_network_node_1afa838caf084c3a46d1bf8503fc4d1642" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>epLocalTCP_</name></member>
      <member refid="class_network_node_1a56f568f8958519df76cc520aaebd96d1" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>findNetworkAddr</name></member>
      <member refid="class_network_node_1a2e52e8a4ae330c682b4b1f6c0bce10f3" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>handleHighPrecisionMachineMessageReply</name></member>
      <member refid="class_network_node_1a8a6e43d2bd94491fac81db96160874a9" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>handleMachinedAnnounceBirth</name></member>
      <member refid="class_network_node_1a1776c9aab09009a1d6f5c07102adface" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>handleMachinedAnnounceDeath</name></member>
      <member refid="class_network_node_1a49e8e8ef3d832d28ffaba2371a5e74a1" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>handleMachinedAnnounceExists</name></member>
      <member refid="class_network_node_1a2f6da3a9dc5d366ab8a5d155f5e64e3f" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>handleWholeMachineMessageReply</name></member>
      <member refid="class_network_node_1afbbdbf252700a4f76d011912fdb943f0" prot="private" virt="pure-virtual"><scope>NetworkNode</scope><name>initExternalNetworkInterfaces</name></member>
      <member refid="class_network_node_1afb5dd767be9e2b81e51b4b7554287c42" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>initLocalNetworkInterfaces</name></member>
      <member refid="class_network_node_1a2b0a5947366d4e22c7a6c7396556a761" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>initNetworkInterfaces</name></member>
      <member refid="class_network_node_1aa1319f908f02d0ec2d978671d4ae290d" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>isBroadcastResponse</name></member>
      <member refid="class_network_node_1ad4449bcbf4ce02e3ca57552ce4fb71d5" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>isDefaultPort</name></member>
      <member refid="class_network_node_1a0162469d287b9bde677fd2d8fda5bf9e" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>listenOnEndpoints</name></member>
      <member refid="class_network_node_1aaebcbb0bd4bb1b687d03eb4a813e65f6" prot="private" virt="pure-virtual"><scope>NetworkNode</scope><name>listenOnExternalEndpoints</name></member>
      <member refid="class_network_node_1a536be70736eccbab33bffefdeb10cb54" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>listenOnLocalEndpoints</name></member>
      <member refid="class_network_node_1aa52b6fb625756b157e33f0f10e2cd98b" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>networkAddr</name></member>
      <member refid="class_network_node_1ab631237fffa434c32c3ea59f89923bb5" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>networkAddr_</name></member>
      <member refid="class_network_node_1a8ea43d56e13f46b2a1819e5b96ad3478" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>NetworkNode</name></member>
      <member refid="class_network_node_1a7581ca5d2410231b999f367487e4a84ca1cdc9fcaead5ce7048dd19951c818ccd" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>NODE_LEAF</name></member>
      <member refid="class_network_node_1a7581ca5d2410231b999f367487e4a84cadd46432278229d8ac679fbfeb21e2cc9" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>NODE_RING_NETWORK</name></member>
      <member refid="class_network_node_1a7581ca5d2410231b999f367487e4a84cad003b2e47c1e88e14ada5c4a8e75eb32" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>NODE_TOP_LEVEL</name></member>
      <member refid="class_network_node_1a7581ca5d2410231b999f367487e4a84ca5d429b377cb75808342dec855e5d09e0" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>NODE_UNKNOWN_NETWORK</name></member>
      <member refid="class_network_node_1a7581ca5d2410231b999f367487e4a84c" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>NodeType</name></member>
      <member refid="class_network_node_1acba74dd33fa9e64e0096c521f132a982" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>outgoingUDPEndpoint</name></member>
      <member refid="class_network_node_1a214eacbc97325fc7290634954d43fdc5" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>port</name></member>
      <member refid="class_network_node_1a47c3fc0d9456d5f3bf6ba389f2dce53f" prot="private" virt="non-virtual"><scope>NetworkNode</scope><name>port_</name></member>
      <member refid="class_network_node_1a86cc9b4937b3eaafd2bc9bf25f734277" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>sendBroadcast</name></member>
      <member refid="class_network_node_1a1be580af296fb1893b14237762170ea5" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>sendBroadcast</name></member>
      <member refid="class_network_node_1a36002a456a2583950e986e6a6f02b180" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>sendWrappedBroadcastPacket</name></member>
      <member refid="class_network_node_1ad8c42da72e920b4b2470d24c588019b3" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>setInternalInterface</name></member>
      <member refid="class_network_node_1a69e0f788ad274f7268455975c428466f" prot="public" virt="pure-virtual"><scope>NetworkNode</scope><name>startHeartbeat</name></member>
      <member refid="class_network_node_1ac17508bae117c8a432a361c02c224e13" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>strToNodeType</name></member>
      <member refid="class_network_node_1a37bc8d64c323d46841bdbac935a43dbb" prot="public" virt="non-virtual"><scope>NetworkNode</scope><name>strToNodeType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
