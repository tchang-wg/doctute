<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test__wrapped__message__handler_8cpp" kind="file" language="C++">
    <compoundname>test_wrapped_message_handler.cpp</compoundname>
    <includes refid="tools_2bwmachined_2unit__test_2pch_8hpp" local="yes">pch.hpp</includes>
    <includes refid="bwmachined_8hpp" local="yes">../bwmachined.hpp</includes>
    <includes refid="wrapped__message__handler_8hpp" local="yes">../wrapped_message_handler.hpp</includes>
    <includes refid="broadcast__manager_8hpp" local="yes">../broadcast_manager.hpp</includes>
    <includes refid="ring__broadcast__manager_8hpp" local="yes">../ring_broadcast_manager.hpp</includes>
    <includes local="yes">network/machine_guard.hpp</includes>
    <includes local="yes">network/bwmachined_network.hpp</includes>
    <includes local="yes">network/endpoint.hpp</includes>
    <includes local="yes">network/network_utils.hpp</includes>
    <includes local="yes">network/transport_wrapper.hpp</includes>
    <includes local="yes">network/udp_transport_wrapper.hpp</includes>
    <includes local="yes">cstdmf/memory_stream.hpp</includes>
    <includes local="yes">cstdmf/bwversion.hpp</includes>
    <includes local="yes">cstdmf/time_queue.hpp</includes>
    <includes local="no">memory</includes>
    <incdepgraph>
      <node id="18427">
        <label>stdarg.h</label>
      </node>
      <node id="18417">
        <label>network_node.hpp</label>
        <link refid="network__node_8hpp_source"/>
        <childnode refid="18393" relation="include">
        </childnode>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18418" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18413" relation="include">
        </childnode>
        <childnode refid="18397" relation="include">
        </childnode>
      </node>
      <node id="18430">
        <label>cstdmf/singleton.hpp</label>
      </node>
      <node id="18397">
        <label>cstdmf/memory_stream.hpp</label>
      </node>
      <node id="18439">
        <label>network/udp_transport_wrapper.hpp</label>
      </node>
      <node id="18425">
        <label>cstdmf/log_meta_data.hpp</label>
      </node>
      <node id="18432">
        <label>../ring_broadcast_manager.hpp</label>
        <link refid="ring__broadcast__manager_8hpp_source"/>
        <childnode refid="18393" relation="include">
        </childnode>
        <childnode refid="18433" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18401" relation="include">
        </childnode>
      </node>
      <node id="18420">
        <label>tcp_connection_wrapper.hpp</label>
        <link refid="tcp__connection__wrapper_8hpp_source"/>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18421" relation="include">
        </childnode>
        <childnode refid="18412" relation="include">
        </childnode>
        <childnode refid="18396" relation="include">
        </childnode>
        <childnode refid="18397" relation="include">
        </childnode>
      </node>
      <node id="18409">
        <label>cstdmf/stdmf.hpp</label>
      </node>
      <node id="18391">
        <label>unit_test_lib/unit_test.hpp</label>
      </node>
      <node id="18395">
        <label>network/endpoint.hpp</label>
      </node>
      <node id="18399">
        <label>network/machine_guard.hpp</label>
      </node>
      <node id="18396">
        <label>cstdmf/binary_stream.hpp</label>
      </node>
      <node id="18426">
        <label>cstdmf/debug_message_callbacks.hpp</label>
      </node>
      <node id="18390">
        <label>CppUnitLite2/src/CppUnitLite2.h</label>
      </node>
      <node id="18436">
        <label>network/bwmachined_network.hpp</label>
      </node>
      <node id="18437">
        <label>network/network_utils.hpp</label>
      </node>
      <node id="18419">
        <label>udp_connection_wrapper.hpp</label>
        <link refid="udp__connection__wrapper_8hpp_source"/>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18396" relation="include">
        </childnode>
        <childnode refid="18397" relation="include">
        </childnode>
      </node>
      <node id="18398">
        <label>cstdmf/smartpointer.hpp</label>
      </node>
      <node id="18405">
        <label>cstdmf/bw_string.hpp</label>
      </node>
      <node id="18418">
        <label>connection_wrapper_mgr.hpp</label>
        <link refid="connection__wrapper__mgr_8hpp_source"/>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18419" relation="include">
        </childnode>
        <childnode refid="18420" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18421" relation="include">
        </childnode>
        <childnode refid="18412" relation="include">
        </childnode>
      </node>
      <node id="18440">
        <label>cstdmf/bwversion.hpp</label>
      </node>
      <node id="18423">
        <label>cstdmf/debug_message_priority.hpp</label>
      </node>
      <node id="18406">
        <label>usermap.hpp</label>
        <link refid="usermap_8hpp_source"/>
        <childnode refid="18399" relation="include">
        </childnode>
      </node>
      <node id="18401">
        <label>cstdmf/time_queue.hpp</label>
      </node>
      <node id="18433">
        <label>ring_network_node.hpp</label>
        <link refid="ring__network__node_8hpp_source"/>
        <childnode refid="18417" relation="include">
        </childnode>
        <childnode refid="18393" relation="include">
        </childnode>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18434" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
      </node>
      <node id="18410">
        <label>cstdmf/bw_set.hpp</label>
      </node>
      <node id="18424">
        <label>cstdmf/debug_message_source.hpp</label>
      </node>
      <node id="18414">
        <label>sys/types.h</label>
      </node>
      <node id="18394">
        <label>connection_wrapper.hpp</label>
        <link refid="connection__wrapper_8hpp_source"/>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18396" relation="include">
        </childnode>
        <childnode refid="18397" relation="include">
        </childnode>
        <childnode refid="18398" relation="include">
        </childnode>
      </node>
      <node id="18422">
        <label>syslog_message_handler.hpp</label>
        <link refid="syslog__message__handler_8hpp_source"/>
        <childnode refid="18408" relation="include">
        </childnode>
        <childnode refid="18423" relation="include">
        </childnode>
        <childnode refid="18424" relation="include">
        </childnode>
        <childnode refid="18425" relation="include">
        </childnode>
        <childnode refid="18426" relation="include">
        </childnode>
        <childnode refid="18427" relation="include">
        </childnode>
      </node>
      <node id="18400">
        <label>cstdmf/bw_list.hpp</label>
      </node>
      <node id="18413">
        <label>network/portmap.hpp</label>
      </node>
      <node id="18435">
        <label>cstdmf/timestamp.hpp</label>
      </node>
      <node id="18438">
        <label>network/transport_wrapper.hpp</label>
      </node>
      <node id="18389">
        <label>pch.hpp</label>
        <link refid="tools_2bwmachined_2unit__test_2pch_8hpp_source"/>
        <childnode refid="18390" relation="include">
        </childnode>
        <childnode refid="18391" relation="include">
        </childnode>
      </node>
      <node id="18392">
        <label>../bwmachined.hpp</label>
        <link refid="bwmachined_8hpp_source"/>
        <childnode refid="18393" relation="include">
        </childnode>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18402" relation="include">
        </childnode>
        <childnode refid="18415" relation="include">
        </childnode>
        <childnode refid="18416" relation="include">
        </childnode>
        <childnode refid="18417" relation="include">
        </childnode>
        <childnode refid="18403" relation="include">
        </childnode>
        <childnode refid="18422" relation="include">
        </childnode>
        <childnode refid="18406" relation="include">
        </childnode>
        <childnode refid="18428" relation="include">
        </childnode>
        <childnode refid="18429" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18421" relation="include">
        </childnode>
        <childnode refid="18412" relation="include">
        </childnode>
        <childnode refid="18396" relation="include">
        </childnode>
        <childnode refid="18430" relation="include">
        </childnode>
        <childnode refid="18431" relation="include">
        </childnode>
      </node>
      <node id="18429">
        <label>server/server_info.hpp</label>
      </node>
      <node id="18415">
        <label>mgm_packet_handler.hpp</label>
        <link refid="mgm__packet__handler_8hpp_source"/>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18396" relation="include">
        </childnode>
      </node>
      <node id="18412">
        <label>network/interfaces.hpp</label>
      </node>
      <node id="18402">
        <label>listeners.hpp</label>
        <link refid="listeners_8hpp_source"/>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18403" relation="include">
        </childnode>
      </node>
      <node id="18408">
        <label>cstdmf/bw_namespace.hpp</label>
      </node>
      <node id="18388">
        <label>tools/bwmachined/unit_test/test_wrapped_message_handler.cpp</label>
        <link refid="test_wrapped_message_handler.cpp"/>
        <childnode refid="18389" relation="include">
        </childnode>
        <childnode refid="18392" relation="include">
        </childnode>
        <childnode refid="18428" relation="include">
        </childnode>
        <childnode refid="18393" relation="include">
        </childnode>
        <childnode refid="18432" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18436" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18437" relation="include">
        </childnode>
        <childnode refid="18438" relation="include">
        </childnode>
        <childnode refid="18439" relation="include">
        </childnode>
        <childnode refid="18397" relation="include">
        </childnode>
        <childnode refid="18440" relation="include">
        </childnode>
        <childnode refid="18401" relation="include">
        </childnode>
        <childnode refid="18431" relation="include">
        </childnode>
      </node>
      <node id="18416">
        <label>mock_handler.hpp</label>
        <link refid="mock__handler_8hpp_source"/>
        <childnode refid="18417" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
      </node>
      <node id="18404">
        <label>process_binary_version.hpp</label>
        <link refid="process__binary__version_8hpp_source"/>
        <childnode refid="18405" relation="include">
        </childnode>
      </node>
      <node id="18407">
        <label>message_with_destination.hpp</label>
        <link refid="message__with__destination_8hpp_source"/>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
      </node>
      <node id="18411">
        <label>cstdmf/bw_vector.hpp</label>
      </node>
      <node id="18403">
        <label>server_platform.hpp</label>
        <link refid="server__platform_8hpp_source"/>
        <childnode refid="18404" relation="include">
        </childnode>
        <childnode refid="18406" relation="include">
        </childnode>
        <childnode refid="18407" relation="include">
        </childnode>
        <childnode refid="18408" relation="include">
        </childnode>
        <childnode refid="18405" relation="include">
        </childnode>
        <childnode refid="18409" relation="include">
        </childnode>
        <childnode refid="18410" relation="include">
        </childnode>
        <childnode refid="18396" relation="include">
        </childnode>
        <childnode refid="18411" relation="include">
        </childnode>
        <childnode refid="18412" relation="include">
        </childnode>
        <childnode refid="18413" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18414" relation="include">
        </childnode>
      </node>
      <node id="18421">
        <label>network/event_dispatcher.hpp</label>
      </node>
      <node id="18393">
        <label>broadcast_manager.hpp</label>
        <link refid="broadcast__manager_8hpp_source"/>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18400" relation="include">
        </childnode>
        <childnode refid="18401" relation="include">
        </childnode>
      </node>
      <node id="18428">
        <label>wrapped_message_handler.hpp</label>
        <link refid="wrapped__message__handler_8hpp_source"/>
        <childnode refid="18393" relation="include">
        </childnode>
        <childnode refid="18394" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18401" relation="include">
        </childnode>
      </node>
      <node id="18431">
        <label>memory</label>
      </node>
      <node id="18434">
        <label>ring_cluster.hpp</label>
        <link refid="ring__cluster_8hpp_source"/>
        <childnode refid="18401" relation="include">
        </childnode>
        <childnode refid="18435" relation="include">
        </childnode>
        <childnode refid="18395" relation="include">
        </childnode>
        <childnode refid="18399" relation="include">
        </childnode>
        <childnode refid="18410" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1a9e0c1d9b3494a04da965e6b149f03008" prot="public" static="no" mutable="no">
        <type>BW_BEGIN_NAMESPACE const uint16</type>
        <definition>BW_BEGIN_NAMESPACE const uint16 COMMON_PORT</definition>
        <argsstring></argsstring>
        <name>COMMON_PORT</name>
        <initializer>= 12345</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="23" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1a2b82272d6f7148613aa3012ad512ba1b" prot="public" static="no" mutable="no">
        <type>const uint8</type>
        <definition>const uint8 TEST_PARAM</definition>
        <argsstring></argsstring>
        <name>TEST_PARAM</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="25" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1a0bb0b9311b0b7b09cff6ed70cc663f7c" prot="public" static="no" mutable="no">
        <type>const uint8</type>
        <definition>const uint8 TEST_CATEGORY</definition>
        <argsstring></argsstring>
        <name>TEST_CATEGORY</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="26" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1af8b935a632ed40d12d91e66035efad1a" prot="public" static="no" mutable="no">
        <type>const uint16</type>
        <definition>const uint16 TEST_PORT</definition>
        <argsstring></argsstring>
        <name>TEST_PORT</name>
        <initializer>= 1234</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="27" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1ac32fb1a8d53974a859068ca40cd558fb" prot="public" static="no" mutable="no">
        <type>const uint16</type>
        <definition>const uint16 TEST_ID</definition>
        <argsstring></argsstring>
        <name>TEST_ID</name>
        <initializer>= 5678</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="28" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1ab48e51fbe8f958bcef65b096def08e94" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* TEST_NAME</definition>
        <argsstring></argsstring>
        <name>TEST_NAME</name>
        <initializer>= &quot;Test content&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="29" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1a35f96d769864bde92d478eeef431502f" prot="public" static="no" mutable="no">
        <type>const uint16</type>
        <definition>const uint16 TEST_MAJOR</definition>
        <argsstring></argsstring>
        <name>TEST_MAJOR</name>
        <initializer>= BWVersion::majorNumber() + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="30" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1a03528741f0004bbf23274f9a8282e7d7" prot="public" static="no" mutable="no">
        <type>const uint16</type>
        <definition>const uint16 TEST_MINOR</definition>
        <argsstring></argsstring>
        <name>TEST_MINOR</name>
        <initializer>= BWVersion::minorNumber() + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="31" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1a57b0a80ce47e0f037c20ee2b87007991" prot="public" static="no" mutable="no">
        <type>const uint16</type>
        <definition>const uint16 TEST_PATCH</definition>
        <argsstring></argsstring>
        <name>TEST_PATCH</name>
        <initializer>= BWVersion::patchNumber() + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="32" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__wrapped__message__handler_8cpp_1a1786e5cbab3f9ab87cd83a7e11d41245" prot="public" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string emptyString</definition>
        <argsstring></argsstring>
        <name>emptyString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="33" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1aca65085ac81e73a7fe88a33497a16f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mercury::Address</type>
        <definition>Mercury::Address TEST_ADDRESS_1</definition>
        <argsstring>(0x01010101, 0x100)</argsstring>
        <name>TEST_ADDRESS_1</name>
        <param>
          <type>0x01010101</type>
        </param>
        <param>
          <type>0x100</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a5e974668bd5f27f07a6589b2abb20954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mercury::Address</type>
        <definition>Mercury::Address TEST_ADDRESS_2</definition>
        <argsstring>(0x02020202, 0x200)</argsstring>
        <name>TEST_ADDRESS_2</name>
        <param>
          <type>0x02020202</type>
        </param>
        <param>
          <type>0x200</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a89f0a0f1ae0410e0ec8c0c5701f279ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mercury::Address</type>
        <definition>Mercury::Address TEST_ADDRESS_3</definition>
        <argsstring>(0x03030303, 0x300)</argsstring>
        <name>TEST_ADDRESS_3</name>
        <param>
          <type>0x03030303</type>
        </param>
        <param>
          <type>0x300</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1add9897aac199422d2971335a8d62d6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16</type>
        <definition>uint16 getDiscoveryPort</definition>
        <argsstring>(uint16 actualPort)</argsstring>
        <name>getDiscoveryPort</name>
        <param>
          <type>uint16</type>
          <declname>actualPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="54" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1ac3ca27cf620a2c7af9576366634850a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int32_t</type>
        <definition>u_int32_t findBroadcastInterface</definition>
        <argsstring>(uint16 port=0)</argsstring>
        <name>findBroadcastInterface</name>
        <param>
          <type>uint16</type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="66" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="66" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a39ec1c586384600861d94e02fad278ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bindPort</definition>
        <argsstring>(Endpoint &amp;ep, u_int16_t port, bool broadcast)</argsstring>
        <name>bindPort</name>
        <param>
          <type>Endpoint &amp;</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>u_int16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="169" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="169" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a4f4d794ba355a7acca06a3cb82a713ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bindInboundBroadcastPort</definition>
        <argsstring>(Endpoint &amp;ep, u_int16_t port)</argsstring>
        <name>bindInboundBroadcastPort</name>
        <param>
          <type>Endpoint &amp;</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>u_int16_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="192" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="192" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a22a46ae3d36f5e4c97653294835324c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sleep</definition>
        <argsstring>(TimeQueue64::TimeStamp millis)</argsstring>
        <name>sleep</name>
        <param>
          <type>TimeQueue64::TimeStamp</type>
          <declname>millis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="218" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="218" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1af8e8aa19f54bb957ea38ff0aae80d80a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MGMPacket *</type>
        <definition>MGMPacket* readPacket</definition>
        <argsstring>(Endpoint &amp;epListen)</argsstring>
        <name>readPacket</name>
        <param>
          <type>Endpoint &amp;</type>
          <declname>epListen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="228" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="228" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1aab0a814b9c0df71aeb7fdfd5c79b67b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ProcessMessage</type>
        <definition>ProcessMessage getTestMessage</definition>
        <argsstring>()</argsstring>
        <name>getTestMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="286" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="286" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1af9262d49db18ee2e116916e19bf9031d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MGMPacket *</type>
        <definition>MGMPacket* getTestPacket</definition>
        <argsstring>(ProcessMessage *pMGM, int id)</argsstring>
        <name>getTestPacket</name>
        <param>
          <type>ProcessMessage *</type>
          <declname>pMGM</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="301" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="301" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a0e694d7ee61c8fec806b278fd84e334b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(WMH_CompleteBroadcast)</argsstring>
        <name>TEST</name>
        <param>
          <type>WMH_CompleteBroadcast</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="314" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="314" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a49c4fd79efb9bc45169551aed120af56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(WMH_IncompleteBroadcast)</argsstring>
        <name>TEST</name>
        <param>
          <type>WMH_IncompleteBroadcast</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="413" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="413" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a1a59e9e621a28a30b9d80f804a0027db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(WMH_EmptyBroadcast)</argsstring>
        <name>TEST</name>
        <param>
          <type>WMH_EmptyBroadcast</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="563" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="563" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a7eac8602a6d463a005dc63a37a646140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(WMH_BM_Basics)</argsstring>
        <name>TEST</name>
        <param>
          <type>WMH_BM_Basics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="613" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="613" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="test__wrapped__message__handler_8cpp_1a0c9ad6642a0e03175e8673557443b907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(WMH_BM_Timeout)</argsstring>
        <name>TEST</name>
        <param>
          <type>WMH_BM_Timeout</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" line="789" column="1" bodyfile="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp" bodystart="789" bodyend="896"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;pch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../bwmachined.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../wrapped_message_handler.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../broadcast_manager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../ring_broadcast_manager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;network/machine_guard.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;network/bwmachined_network.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;network/endpoint.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;network/network_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;network/transport_wrapper.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;network/udp_transport_wrapper.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cstdmf/memory_stream.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cstdmf/bwversion.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cstdmf/time_queue.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="namespace_b_w___b_e_g_i_n___n_a_m_e_s_p_a_c_e" kindref="compound">BW_BEGIN_NAMESPACE</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16<sp/>COMMON_PORT<sp/>=<sp/>12345;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8<sp/>TEST_PARAM<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8<sp/>TEST_CATEGORY<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16<sp/>TEST_PORT<sp/>=<sp/>1234;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16<sp/>TEST_ID<sp/>=<sp/>5678;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>TEST_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>content&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16<sp/>TEST_MAJOR<sp/>=<sp/>BWVersion::majorNumber()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16<sp/>TEST_MINOR<sp/>=<sp/>BWVersion::minorNumber()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16<sp/>TEST_PATCH<sp/>=<sp/>BWVersion::patchNumber()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">BW::string<sp/>emptyString;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">Mercury::Address<sp/>TEST_ADDRESS_1(<sp/>0x01010101,<sp/>0x100<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">Mercury::Address<sp/>TEST_ADDRESS_2(<sp/>0x02020202,<sp/>0x200<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">Mercury::Address<sp/>TEST_ADDRESS_3(<sp/>0x03030303,<sp/>0x300<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">//class<sp/>DummyMachined<sp/>:<sp/>public<sp/>BWMachined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>DummyMachined()<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>BWMachined(<sp/>1,<sp/>emptyString,<sp/>true<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>void<sp/>registerForWrite(<sp/>TransportWrapperPtr<sp/>pTransport<sp/>)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>helper<sp/>function<sp/>returns<sp/>the<sp/>broadcast<sp/>discovery<sp/>port<sp/>using<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>logic<sp/>as<sp/>implemented<sp/>in<sp/>BWMachineD.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">uint16<sp/>getDiscoveryPort(<sp/>uint16<sp/>actualPort<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualPort<sp/>==<sp/>PORT_MACHINED)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PORT_BROADCAST_DISCOVERY;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>actualPort<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copied<sp/>from<sp/>BWMachineD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>could<sp/>be<sp/>good<sp/>to<sp/>factor<sp/>out<sp/>into<sp/>common<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">u_int32_t<sp/>findBroadcastInterface(<sp/>uint16<sp/>port<sp/>=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>BW::map&lt;<sp/>u_int32_t,<sp/>BW::string<sp/>&gt;<sp/>interfaces;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>Endpoint<sp/>epListen;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>tv;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>fd_set<sp/>fds;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>streamBuf[<sp/>MGMPacket::MAX_SIZE<sp/>];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>endpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>epListen.socket(<sp/>SOCK_DGRAM<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!epListen.good()<sp/>||</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epListen.bind(</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htons(<sp/>getDiscoveryPort(<sp/>port<sp/>)<sp/>)<sp/>)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRITICAL_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>bind<sp/>broadcast<sp/>listener<sp/>socket<sp/>to<sp/>port<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getDiscoveryPort(<sp/>port<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>epListen.setbroadcast(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>a<sp/>discovery<sp/>of<sp/>all<sp/>network<sp/>interfaces<sp/>on<sp/>this<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!epListen.getInterfaces(<sp/>interfaces<sp/>))</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRITICAL_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>discover<sp/>network<sp/>interfaces\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryInterfaceMessage<sp/>qim;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>qim.sendto(<sp/>epListen,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htons(<sp/>getDiscoveryPort(<sp/>port<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BROADCAST,<sp/>MGMPacket::PACKET_STAGGER_REPLIES<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRITICAL_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>broadcast<sp/>discovery<sp/>message.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>tv.tv_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>tv.tv_usec<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Listen<sp/>for<sp/>the<sp/>message<sp/>we<sp/>just<sp/>sent<sp/>to<sp/>come<sp/>back<sp/>to<sp/>ourselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(<sp/>&amp;fds<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(<sp/>epListen.fileno(),<sp/>&amp;fds<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selgot<sp/>=<sp/>select(<sp/>(epListen.fileno())+1,<sp/>&amp;fds,<sp/>NULL,<sp/>NULL,<sp/>&amp;tv<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selgot<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRITICAL_MSG(</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Timed<sp/>out<sp/>before<sp/>receiving<sp/>any<sp/>broadcast<sp/>discovery<sp/>responses.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>that<sp/>firewall<sp/>rules<sp/>are<sp/>not<sp/>preventing<sp/>the<sp/>sending<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>receipt<sp/>of<sp/>UDP<sp/>broadcast<sp/>messages<sp/>on<sp/>port<sp/>%d.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getDiscoveryPort(<sp/>port<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selgot<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRITICAL_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Broadcast<sp/>discovery<sp/>select<sp/>error.<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errno<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sockaddr_in<sp/>sin;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>packet<sp/>into<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>epListen.recvfrom(<sp/>&amp;streamBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>streamBuf<sp/>),<sp/>sin<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Broadcast<sp/>discovery<sp/>recvfrom<sp/>error.<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errno<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INFO_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Broadcast<sp/>discovery<sp/>receipt<sp/>from<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntoa(<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr&amp;)sin.sin_addr.s_addr)<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>messages<sp/>received<sp/>against<sp/>the<sp/>list<sp/>of<sp/>our<sp/>interfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BW::map&lt;<sp/>u_int32_t,<sp/>BW::string<sp/>&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>interfaces.find(<sp/>(u_int32_t<sp/>&amp;)sin.sin_addr.s_addr<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>interfaces.end())</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INFO_MSG(</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Confirmed<sp/>%s<sp/>(%s)<sp/>as<sp/>default<sp/>broadcast<sp/>route<sp/>interface.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntoa(<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr&amp;)sin.sin_addr.s_addr<sp/>),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;second.c_str()<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sin.sin_addr.s_addr;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Broadcast<sp/>discovery<sp/>%s<sp/>not<sp/>a<sp/>valid<sp/>interface.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntoa(<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr&amp;)sin.sin_addr.s_addr)<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>epListen.close();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bindPort(<sp/>Endpoint<sp/>&amp;ep,<sp/>u_int16_t<sp/>port,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>broadcast<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>broadcastAddr<sp/>=<sp/>findBroadcastInterface(<sp/>port<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>broadcastAddr<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ep.socket(<sp/>SOCK_DGRAM<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ep.good()<sp/>||<sp/>ep.bind(<sp/>htons(<sp/>port<sp/>),<sp/>broadcastAddr<sp/>)<sp/>==<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>bind<sp/>socket<sp/>to<sp/>&apos;%s&apos;:<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntoa(<sp/>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr<sp/>&amp;<sp/>)<sp/>broadcastAddr<sp/>),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastNetworkError()<sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>broadcast<sp/>&amp;&amp;<sp/>ep.setbroadcast(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>socket<sp/>%s<sp/>to<sp/>broadcast:<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntoa(<sp/>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr<sp/>&amp;<sp/>)<sp/>broadcastAddr<sp/>),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastNetworkError()<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bindInboundBroadcastPort(<sp/>Endpoint<sp/>&amp;ep,<sp/>u_int16_t<sp/>port<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>ep.socket(<sp/>SOCK_DGRAM<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ep.setbroadcast(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>broadcast<sp/>on<sp/>socket:<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastNetworkError()<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>_WIN32<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>broadcast<sp/>messages<sp/>on<sp/>all<sp/>interfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bcAddr<sp/>=<sp/>ADDR_ANY;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>the<sp/>broadcast<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bcAddr<sp/>=<sp/>BROADCAST;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>defined(<sp/>_WIN32<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ep.good()<sp/>||<sp/>ep.bind(<sp/>htons(<sp/>port<sp/>),<sp/>bcAddr<sp/>)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sleep(<sp/>TimeQueue64::TimeStamp<sp/>millis<sp/>)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>_WIN32<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sleep(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<sp/>millis<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<sp/>millis<sp/>*<sp/>1000<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">MGMPacket<sp/>*<sp/>readPacket(<sp/>Endpoint<sp/>&amp;<sp/>epListen<sp/>)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>tv;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>fd_set<sp/>fds;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>streamBuf[<sp/>MGMPacket::MAX_SIZE<sp/>];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>tv.tv_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>tv.tv_usec<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Listen<sp/>for<sp/>the<sp/>message<sp/>we<sp/>just<sp/>sent<sp/>to<sp/>come<sp/>back<sp/>to<sp/>ourselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(<sp/>&amp;fds<sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(<sp/>epListen.fileno(),<sp/>&amp;fds<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selgot<sp/>=<sp/>select(<sp/>(epListen.fileno())+1,<sp/>&amp;fds,<sp/>NULL,<sp/>NULL,<sp/>&amp;tv<sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selgot<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Timed<sp/>out<sp/>before<sp/>receiving<sp/>any<sp/>broadcast<sp/>responses.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selgot<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Broadcast<sp/>discovery<sp/>select<sp/>error.<sp/>%s.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(errno)<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sockaddr_in<sp/>sin;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>packet<sp/>into<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>epListen.recvfrom(<sp/>&amp;streamBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>streamBuf<sp/>),<sp/>sin<sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARNING_MSG(<sp/></highlight><highlight class="stringliteral">&quot;recvfrom<sp/>got<sp/>an<sp/>error<sp/>from<sp/>[<sp/>%s:%u<sp/>]:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntoa(<sp/>sin.sin_addr<sp/>),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntohs(<sp/>sin.sin_port<sp/>),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastNetworkError()<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryIStream<sp/>is(<sp/>streamBuf,<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MGMPacket<sp/>*pPacket<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MGMPacket(<sp/>is<sp/>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is.error())</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(<sp/></highlight><highlight class="stringliteral">&quot;Dropping<sp/>packet<sp/>with<sp/>bogus<sp/>message\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pPacket<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pPacket;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">ProcessMessage<sp/>getTestMessage()</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.param_<sp/>=<sp/>TEST_PARAM;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.category_<sp/>=<sp/>TEST_CATEGORY;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.port_<sp/>=<sp/>TEST_PORT;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.id_<sp/>=<sp/>TEST_ID;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.name_<sp/>=<sp/>TEST_NAME;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.majorVersion_<sp/>=<sp/>TEST_MAJOR;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.minorVersion_<sp/>=<sp/>TEST_MINOR;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>pm.patchVersion_<sp/>=<sp/>TEST_PATCH;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">MGMPacket<sp/>*<sp/>getTestPacket(<sp/>ProcessMessage<sp/>*<sp/>pMGM,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pResponse<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MGMPacket();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>pResponse-&gt;flags_<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pMGM<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM-&gt;id_<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pResponse-&gt;append(<sp/>*pMGM<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pResponse;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">TEST(<sp/>WMH_CompleteBroadcast<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>broadcasts<sp/>and<sp/>replies<sp/>work<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>port<sp/>=<sp/>COMMON_PORT;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>Endpoint<sp/>ep,<sp/>epBroadcast;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pReceivedPacket;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pInnerPacket;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>MachineGuardMessage<sp/>*<sp/>pMGM;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>*<sp/>pPM;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ResponseWrapperMessage<sp/>*<sp/>pReceivedResponse;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>DummyMachined<sp/>dummy;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindPort(<sp/>ep,<sp/>port,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindInboundBroadcastPort(<sp/>epBroadcast,<sp/>port<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>Mercury::Address<sp/>localAddress<sp/>=<sp/>ep.getLocalAddress();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>buddy<sp/>to<sp/>ensure<sp/>that<sp/>outgoing<sp/>messages<sp/>have<sp/>a<sp/>non-broadcast<sp/>buddy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>originalBuddy<sp/>=<sp/>MGMPacket::s_buddy_;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>TEST_ADDRESS_3.ip<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_wrapped_message_handler" kindref="compound">WrappedMessageHandler</ref><sp/>wmh(<sp/>epBroadcast,<sp/>port<sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>a<sp/>wrapped<sp/>broadcast<sp/>message<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pPacket<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwm(<sp/>*pPacket<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>TransportWrapperPtr<sp/>transWrapper<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UDPTransportWrapper(<sp/>ep,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epBroadcast,<sp/>localAddress.ip,<sp/>localAddress.port<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.addBroadcastRequest(<sp/>bwm,<sp/>dummy,<sp/>transWrapper)<sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>an<sp/>actual<sp/>broadcast<sp/>message<sp/>goes<sp/>out<sp/>the<sp/>other<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::PROCESS_MESSAGE,<sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>one<sp/>we<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pPM-&gt;id_<sp/>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Respond<sp/>with<sp/>all<sp/>the<sp/>ring<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;id_<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedPacket-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_2.ip;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.interceptPacket(<sp/>*pReceivedPacket,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;id_<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedPacket-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_1.ip;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.interceptPacket(<sp/>*pReceivedPacket,<sp/>TEST_ADDRESS_2.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Additional<sp/>arrival<sp/>of<sp/>another<sp/>packet<sp/>with<sp/>the<sp/>same<sp/>sequence<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>now<sp/>be<sp/>ignored,<sp/>because<sp/>adding<sp/>the<sp/>final<sp/>response<sp/>cleared<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>and<sp/>therefore<sp/>no<sp/>handlers<sp/>exist<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>!wmh.interceptPacket(<sp/>*pReceivedPacket,<sp/>TEST_ADDRESS_2.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>final<sp/>message<sp/>has<sp/>the<sp/>right<sp/>wrapped<sp/>response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::RESPONSE_WRAPPER_MESSAGE,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedResponse<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ResponseWrapperMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedResponse-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>2u,<sp/>pReceivedResponse-&gt;responsePackets().size()<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResponseWrapperMessage::ResponsePackets::const_iterator<sp/>iter;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>pReceivedResponse-&gt;responsePackets().begin();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>!=<sp/>pReceivedResponse-&gt;responsePackets().end();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iter,<sp/>++i)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>i<sp/>==<sp/>0<sp/>?<sp/>TEST_ADDRESS_1.ip<sp/>:<sp/>TEST_ADDRESS_2.ip,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;first<sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pInnerPacket<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pInnerPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::PROCESS_MESSAGE,<sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>one<sp/>we<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>i<sp/>==<sp/>0<sp/>?<sp/>2<sp/>:<sp/>3,<sp/>pPM-&gt;id_<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>original/default<sp/>buddy<sp/>in<sp/>case<sp/>future<sp/>tests<sp/>require<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>originalBuddy<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">TEST(<sp/>WMH_IncompleteBroadcast<sp/>)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>timeout<sp/>and<sp/>rebroadcasts<sp/>work<sp/>correctly,<sp/>and<sp/>ultimately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deliver<sp/>an<sp/>incomplete<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>port<sp/>=<sp/>COMMON_PORT;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>Endpoint<sp/>ep,<sp/>epBroadcast;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pReceivedPacket;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pExtraPacket1;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pExtraPacket2;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pInnerPacket;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>MachineGuardMessage<sp/>*<sp/>pMGM;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>*<sp/>pPM;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>ResponseWrapperMessage<sp/>*<sp/>pReceivedResponse;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>DummyMachined<sp/>dummy;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindPort(<sp/>ep,<sp/>COMMON_PORT,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindInboundBroadcastPort(<sp/>epBroadcast,<sp/>COMMON_PORT<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>Mercury::Address<sp/>localAddress<sp/>=<sp/>ep.getLocalAddress();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>buddy<sp/>to<sp/>ensure<sp/>that<sp/>outgoing<sp/>messages<sp/>have<sp/>a<sp/>non-broadcast<sp/>buddy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>originalBuddy<sp/>=<sp/>MGMPacket::s_buddy_;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>TEST_ADDRESS_3.ip<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_wrapped_message_handler" kindref="compound">WrappedMessageHandler</ref><sp/>wmh(<sp/>epBroadcast,<sp/>port,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*timeout<sp/>ms*/</highlight><highlight class="normal"><sp/>200,<sp/></highlight><highlight class="comment">/*attempts*/</highlight><highlight class="normal"><sp/>2<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>a<sp/>wrapped<sp/>broadcast<sp/>message<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pPacket<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwm(<sp/>*pPacket<sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>TransportWrapperPtr<sp/>transWrapper<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UDPTransportWrapper(<sp/>ep,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epBroadcast,<sp/>localAddress.ip,<sp/>localAddress.port<sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.addBroadcastRequest(<sp/>bwm,<sp/>dummy,<sp/>transWrapper)<sp/>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>original<sp/>packet<sp/>will<sp/>have<sp/>different<sp/>sequence<sp/>numbers<sp/>to<sp/>the<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>was<sp/>broadcast,<sp/>so<sp/>it<sp/>won&apos;t<sp/>be<sp/>intercepted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!wmh.interceptPacket(<sp/>*pPacket,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>an<sp/>actual<sp/>broadcast<sp/>message<sp/>goes<sp/>out<sp/>the<sp/>other<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::PROCESS_MESSAGE,<sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>one<sp/>we<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pPM-&gt;id_<sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Respond<sp/>with<sp/>SOME<sp/>of<sp/>the<sp/>ring<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;id_<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedPacket-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_2.ip;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.interceptPacket(<sp/>*pReceivedPacket,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(<sp/>300<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>two<sp/>additional<sp/>broadcasts,<sp/>that<sp/>will<sp/>get<sp/>completed<sp/>soon<sp/>after,<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>internal<sp/>list<sp/>rearranging<sp/>works<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BroadcastWrapperMessage<sp/>bwm(<sp/>packet<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwmExtra1(<sp/>*pPacket<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.addBroadcastRequest(<sp/>bwmExtra1,<sp/>dummy,<sp/>transWrapper)<sp/>);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>pExtraPacket1<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pExtraPacket1<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwmExtra2(<sp/>*pPacket<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.addBroadcastRequest(<sp/>bwmExtra2,<sp/>dummy,<sp/>transWrapper)<sp/>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>pExtraPacket2<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pExtraPacket2<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Has<sp/>exceeded<sp/>the<sp/>timeout<sp/>for<sp/>the<sp/>first<sp/>broadcast,<sp/>and<sp/>will<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trigger<sp/>a<sp/>rebroadcast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>wmh.process();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>no<sp/>response<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Respond<sp/>with<sp/>a<sp/>single<sp/>host,<sp/>and<sp/>on<sp/>the<sp/>next<sp/>timeout<sp/>it<sp/>should<sp/>send<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;id_<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM-&gt;outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedPacket-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_1.ip;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.interceptPacket(<sp/>*pReceivedPacket,<sp/>TEST_ADDRESS_2.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pExtraPacket1<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>pExtraPacket2<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Complete<sp/>the<sp/>two<sp/>extra<sp/>broadcasts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pExtraPacket1-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_1.ip;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pExtraPacket1-&gt;messages_[0]-&gt;outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.interceptPacket(<sp/>*pExtraPacket1,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pExtraPacket2-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_2.ip;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pExtraPacket2-&gt;messages_[0]-&gt;outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>wmh.interceptPacket(<sp/>*pExtraPacket2,<sp/>TEST_ADDRESS_2.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pExtraPacket1<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pExtraPacket2<sp/>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>they<sp/>will<sp/>still<sp/>remain<sp/>in<sp/>the<sp/>internal<sp/>queue<sp/>and<sp/>get<sp/>cleaned<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alongside<sp/>the<sp/>rebroadcast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(<sp/>300<sp/>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>exceed<sp/>the<sp/>timeout<sp/>and<sp/>trigger<sp/>a<sp/>response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>wmh.process();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>final<sp/>message<sp/>has<sp/>the<sp/>partial<sp/>wrapped<sp/>response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::RESPONSE_WRAPPER_MESSAGE,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedResponse<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ResponseWrapperMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>!pReceivedResponse-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16<sp/>count<sp/>=<sp/>pReceivedResponse-&gt;responsePackets().size();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>count<sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResponseWrapperMessage::ResponsePackets::const_iterator<sp/>iter<sp/>=</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedResponse-&gt;responsePackets().begin();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>TEST_ADDRESS_2.ip,<sp/>iter-&gt;first<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pInnerPacket<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pInnerPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::PROCESS_MESSAGE,<sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>one<sp/>we<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>3,<sp/>pPM-&gt;id_<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>original/default<sp/>buddy<sp/>in<sp/>case<sp/>future<sp/>tests<sp/>require<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>originalBuddy<sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">TEST(<sp/>WMH_EmptyBroadcast<sp/>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>a<sp/>wrapped<sp/>broadcast<sp/>message<sp/>on<sp/>to<sp/>the<sp/>inbound<sp/>interface<sp/>that<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>contain<sp/>any<sp/>packets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>port<sp/>=<sp/>COMMON_PORT;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>Endpoint<sp/>ep,<sp/>epBroadcast;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pReceivedPacket;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>MachineGuardMessage<sp/>*<sp/>pMGM;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>ResponseWrapperMessage<sp/>*<sp/>pReceivedResponse;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>DummyMachined<sp/>dummy;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindPort(<sp/>ep,<sp/>COMMON_PORT,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindInboundBroadcastPort(<sp/>epBroadcast,<sp/>COMMON_PORT<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>Mercury::Address<sp/>localAddress<sp/>=<sp/>ep.getLocalAddress();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>buddy<sp/>to<sp/>ensure<sp/>that<sp/>outgoing<sp/>messages<sp/>have<sp/>a<sp/>non-broadcast<sp/>buddy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>originalBuddy<sp/>=<sp/>MGMPacket::s_buddy_;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>TEST_ADDRESS_3.ip<sp/>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_wrapped_message_handler" kindref="compound">WrappedMessageHandler</ref><sp/>wmh(<sp/>epBroadcast,<sp/>port<sp/>);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>an<sp/>empty<sp/>wrapped<sp/>broadcast<sp/>message<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwm;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>TransportWrapperPtr<sp/>transWrapper<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UDPTransportWrapper(<sp/>ep,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epBroadcast,<sp/>localAddress.ip,<sp/>localAddress.port<sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>wmh.addBroadcastRequest(<sp/>bwm,<sp/>dummy,<sp/>transWrapper);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>NO<sp/>broadcast<sp/>message<sp/>was<sp/>sent,<sp/>but<sp/>that<sp/>there<sp/>was<sp/>an<sp/>immediate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::RESPONSE_WRAPPER_MESSAGE,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedResponse<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ResponseWrapperMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>!pReceivedResponse-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>0u,<sp/>pReceivedResponse-&gt;responsePackets().size()<sp/>);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>original/default<sp/>buddy<sp/>in<sp/>case<sp/>future<sp/>tests<sp/>require<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>originalBuddy<sp/>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">TEST(<sp/>WMH_BM_Basics<sp/>)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>basics<sp/>of<sp/>the<sp/>BroadcastManager<sp/>-<sp/>that<sp/>it<sp/>sends<sp/>broadcasts<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>responses<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>port<sp/>=<sp/>COMMON_PORT;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>Endpoint<sp/>ep,<sp/>epBroadcast;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>BroadcastManager<sp/>&gt;<sp/>manager;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pReceivedPacket;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pInnerPacket;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>MachineGuardMessage<sp/>*<sp/>pMGM;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>*<sp/>pPM;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>ResponseWrapperMessage<sp/>*<sp/>pReceivedResponse;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>DummyMachined<sp/>dummy;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindPort(<sp/>ep,<sp/>COMMON_PORT,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindInboundBroadcastPort(<sp/>epBroadcast,<sp/>COMMON_PORT<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>buddy<sp/>to<sp/>ensure<sp/>that<sp/>outgoing<sp/>messages<sp/>have<sp/>a<sp/>non-broadcast<sp/>buddy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>originalBuddy<sp/>=<sp/>MGMPacket::s_buddy_;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>TEST_ADDRESS_3.ip<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm1<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pBCPacket1<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm1,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm2<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pBCPacket2<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm2,<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm3<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>pm3.outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pRespPacket1<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm3,<sp/>3<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket1-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_2.ip;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm4<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>pm4.outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pRespPacket2<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm4,<sp/>4<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket2-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_1.ip;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>manager,<sp/>confirm<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>send<sp/>anything<sp/>initially.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>ManagerLookup<sp/>managerMap;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwm1(<sp/>*pBCPacket1<sp/>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>Mercury::Address<sp/>localAddress<sp/>=<sp/>ep.getLocalAddress();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>TransportWrapperPtr<sp/>transWrapper<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UDPTransportWrapper(<sp/>ep,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epBroadcast,<sp/>localAddress.ip,<sp/>localAddress.port<sp/>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>manager.reset(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_ring_broadcast_manager" kindref="compound">RingBroadcastManager</ref>(<sp/>bwm1,<sp/>port,<sp/>dummy,<sp/>transWrapper,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>managerMap<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>0u,<sp/>manager-&gt;sendAttempts()<sp/>);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>0u,<sp/>manager-&gt;broadcastTime()<sp/>);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;hasTimedOut(<sp/>100<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Broadcast<sp/>the<sp/>message,<sp/>check<sp/>that<sp/>it<sp/>goes<sp/>out<sp/>as<sp/>the<sp/>right<sp/>type<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>right<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;sendBroadcast(<sp/>epBroadcast<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::PROCESS_MESSAGE,<sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>one<sp/>we<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pPM-&gt;id_<sp/>);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>these<sp/>messages<sp/>are<sp/>true<sp/>replies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRespPacket1-&gt;messages_[0]-&gt;copySeq(<sp/>*pPM<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRespPacket2-&gt;messages_[0]-&gt;copySeq(<sp/>*pPM<sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>response<sp/>that<sp/>is<sp/>not<sp/>for<sp/>the<sp/>correct<sp/>sequence<sp/>number<sp/>=<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>SequenceNumber<sp/>originalSeq<sp/>=<sp/>pRespPacket1-&gt;messages_[0]-&gt;seq();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket1-&gt;messages_[0]-&gt;setSeq(<sp/>originalSeq<sp/>*<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;addResponse(<sp/>*pRespPacket1,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket1-&gt;messages_[0]-&gt;setSeq(<sp/>originalSeq<sp/>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>response,<sp/>should<sp/>be<sp/>no<sp/>initial<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;addResponse(<sp/>*pRespPacket1,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>the<sp/>send<sp/>and<sp/>it<sp/>should<sp/>be<sp/>received<sp/>as<sp/>incomplete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;sendResponse()<sp/>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::RESPONSE_WRAPPER_MESSAGE,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedResponse<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ResponseWrapperMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>!pReceivedResponse-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedResponse-&gt;responsePackets().size()<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>TEST_ADDRESS_1.ip,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedResponse-&gt;responsePackets().begin()-&gt;first<sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pInnerPacket<sp/>=<sp/>pReceivedResponse-&gt;responsePackets().begin()-&gt;second;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pInnerPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::PROCESS_MESSAGE,<sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>one<sp/>we<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>pm3.id_,<sp/>pPM-&gt;id_<sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Forcing<sp/>the<sp/>response<sp/>invalidates<sp/>the<sp/>manager,<sp/>so<sp/>need<sp/>a<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwm2(<sp/>*pBCPacket2<sp/>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>manager.reset(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_ring_broadcast_manager" kindref="compound">RingBroadcastManager</ref>(<sp/>bwm2,<sp/>port,<sp/>dummy,<sp/>transWrapper,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>managerMap<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;sendBroadcast(<sp/>epBroadcast<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>manager-&gt;sendAttempts()<sp/>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>care<sp/>about<sp/>the<sp/>broadcast<sp/>message,<sp/>just<sp/>consume<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>these<sp/>messages<sp/>are<sp/>true<sp/>replies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket1-&gt;messages_[0]-&gt;copySeq(<sp/>*pReceivedPacket-&gt;messages_[0]<sp/>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket2-&gt;messages_[0]-&gt;copySeq(<sp/>*pReceivedPacket-&gt;messages_[0]<sp/>);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>adding<sp/>both<sp/>responses,<sp/>the<sp/>ring<sp/>is<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;addResponse(<sp/>*pRespPacket1,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>this<sp/>generates<sp/>the<sp/>final<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;addResponse(<sp/>*pRespPacket2,<sp/>TEST_ADDRESS_2.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;hasTimedOut(<sp/>1000<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pReceivedPacket<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>pReceivedPacket-&gt;messages_.size()<sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pReceivedPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::RESPONSE_WRAPPER_MESSAGE,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pReceivedResponse<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ResponseWrapperMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedResponse-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>2u,<sp/>pReceivedResponse-&gt;responsePackets().size()<sp/>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResponseWrapperMessage::ResponsePackets::const_iterator<sp/>iter;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>pReceivedResponse-&gt;responsePackets().begin();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>!=<sp/>pReceivedResponse-&gt;responsePackets().end();</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iter,<sp/>++i)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>i<sp/>==<sp/>0<sp/>?<sp/>TEST_ADDRESS_1.ip<sp/>:<sp/>TEST_ADDRESS_2.ip,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;first<sp/>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pInnerPacket<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMGM<sp/>=<sp/>pInnerPacket-&gt;messages_[0];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>MachineGuardMessage::PROCESS_MESSAGE,<sp/>pMGM-&gt;message_<sp/>);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>one<sp/>we<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPM<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>ProcessMessage<sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pMGM<sp/>);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>i<sp/>==<sp/>0<sp/>?<sp/>pm3.id_<sp/>:<sp/>pm4.id_,<sp/>pPM-&gt;id_<sp/>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>original/default<sp/>buddy<sp/>in<sp/>case<sp/>future<sp/>tests<sp/>require<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>originalBuddy<sp/>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal">TEST(<sp/>WMH_BM_Timeout<sp/>)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>BroadcastManager<sp/>timeout<sp/>and<sp/>attempt<sp/>counters<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>port<sp/>=<sp/>COMMON_PORT;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>Endpoint<sp/>ep,<sp/>epBroadcast;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>DummyMachined<sp/>dummy;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindPort(<sp/>ep,<sp/>COMMON_PORT,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>bindInboundBroadcastPort(<sp/>epBroadcast,<sp/>COMMON_PORT<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>buddy<sp/>to<sp/>ensure<sp/>that<sp/>outgoing<sp/>messages<sp/>have<sp/>a<sp/>non-broadcast<sp/>buddy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>originalBuddy<sp/>=<sp/>MGMPacket::s_buddy_;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>TEST_ADDRESS_3.ip<sp/>);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket<sp/>*<sp/>pReceivedPacket;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm1<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pBCPacket1<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm1,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm3<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>pm3.outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pRespPacket1<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm3,<sp/>3<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket1-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_2.ip;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessMessage<sp/>pm4<sp/>=<sp/>getTestMessage();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>pm4.outgoing(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;<sp/>pRespPacket2<sp/>=<sp/>std::auto_ptr&lt;<sp/>MGMPacket<sp/>&gt;(</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTestPacket(<sp/>&amp;pm4,<sp/>4<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket2-&gt;buddy_<sp/>=<sp/>TEST_ADDRESS_1.ip;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>ManagerLookup<sp/>managerMap;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>BroadcastWrapperMessage<sp/>bwm(<sp/>*pBCPacket1<sp/>);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;<sp/>BroadcastManager<sp/>&gt;<sp/>manager;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>Mercury::Address<sp/>localAddress<sp/>=<sp/>ep.getLocalAddress();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>TransportWrapperPtr<sp/>transWrapper<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UDPTransportWrapper(<sp/>ep,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epBroadcast,<sp/>localAddress.ip,<sp/>localAddress.port<sp/>);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>manager.reset(</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_ring_broadcast_manager" kindref="compound">RingBroadcastManager</ref>(<sp/>bwm,<sp/>port,<sp/>dummy,<sp/>transWrapper,<sp/>managerMap<sp/>)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;hasTimedOut(<sp/>500<sp/>)<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Didn&apos;t<sp/>send<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeQueue64::TimeStamp<sp/>broadcastTime<sp/>=<sp/>manager-&gt;broadcastTime();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>0u,<sp/>managerMap.size()<sp/>);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>0u,<sp/>broadcastTime<sp/>);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;sendBroadcast(<sp/>epBroadcast<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>manager-&gt;sendAttempts()<sp/>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>managerMap.size()<sp/>);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>broadcastTime<sp/>=<sp/>manager-&gt;broadcastTime();</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>broadcastTime<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;hasTimedOut(<sp/>500<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(<sp/>400<sp/>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;hasTimedOut(<sp/>500<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(<sp/>200<sp/>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;hasTimedOut(<sp/>500<sp/>)<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HAS<sp/>timed<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>managerMap.size()<sp/>);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>again,<sp/>get<sp/>one<sp/>response<sp/>this<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;sendBroadcast(<sp/>epBroadcast<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket1-&gt;messages_[0]-&gt;copySeq(<sp/>*pReceivedPacket-&gt;messages_[0]<sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>broadcastTime<sp/>!=<sp/>manager-&gt;broadcastTime()<sp/>);<sp/></highlight><highlight class="comment">//<sp/>New<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>broadcastTime<sp/>=<sp/>manager-&gt;broadcastTime();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>managerMap.size()<sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>2u,<sp/>manager-&gt;sendAttempts()<sp/>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;addResponse(<sp/>*pRespPacket1,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>again,<sp/>get<sp/>both<sp/>responses<sp/>this<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(<sp/>100<sp/>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;sendBroadcast(<sp/>epBroadcast<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>epBroadcast<sp/>);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket1-&gt;messages_[0]-&gt;copySeq(<sp/>*pReceivedPacket-&gt;messages_[0]<sp/>);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>pRespPacket2-&gt;messages_[0]-&gt;copySeq(<sp/>*pReceivedPacket-&gt;messages_[0]<sp/>);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>broadcastTime<sp/>!=<sp/>manager-&gt;broadcastTime()<sp/>);<sp/></highlight><highlight class="comment">//<sp/>New<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>broadcastTime<sp/>=<sp/>manager-&gt;broadcastTime();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>1u,<sp/>managerMap.size()<sp/>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQUAL(<sp/>3u,<sp/>manager-&gt;sendAttempts()<sp/>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>previous<sp/>abandoned<sp/>response<sp/>isn&apos;t<sp/>hanging<sp/>round,<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>adding<sp/>the<sp/>other<sp/>message<sp/>completes<sp/>the<sp/>broadcast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;addResponse(<sp/>*pRespPacket2,<sp/>TEST_ADDRESS_2.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOW<sp/>finally<sp/>complete<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;addResponse(<sp/>*pRespPacket1,<sp/>TEST_ADDRESS_1.ip<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>manager-&gt;isComplete()<sp/>);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>!manager-&gt;hasTimedOut(<sp/>100<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>pReceivedPacket<sp/>=<sp/>readPacket(<sp/>ep<sp/>);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>pReceivedPacket<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_safe_delete(<sp/>pReceivedPacket<sp/>);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>original/default<sp/>buddy<sp/>in<sp/>case<sp/>future<sp/>tests<sp/>require<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>MGMPacket::setBuddy(<sp/>originalBuddy<sp/>);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">BW_END_NAMESPACE</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test_wrapped_message_handler.cpp</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tools/bwmachined/unit_test/test_wrapped_message_handler.cpp"/>
  </compounddef>
</doxygen>
