<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_physical_chunk_space" kind="class" language="C++" prot="public">
    <compoundname>PhysicalChunkSpace</compoundname>
    <basecompoundref refid="class_i_physical_space" prot="public" virt="non-virtual">IPhysicalSpace</basecompoundref>
    <innerclass refid="class_physical_chunk_space_1_1_load_resource_callback" prot="private">PhysicalChunkSpace::LoadResourceCallback</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_physical_chunk_space_1aa59f141e428c6a39b25ab6f9fbaf2dad" prot="private" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">ChunkSpacePtr</ref></type>
        <definition>ChunkSpacePtr PhysicalChunkSpace::pChunkSpace_</definition>
        <argsstring></argsstring>
        <name>pChunkSpace_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="133" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_physical_chunk_space_1ab2def19f247deac65e9feba9d386f045" prot="private" static="no" mutable="no">
        <type>EdgeGeometryMappings</type>
        <definition>EdgeGeometryMappings PhysicalChunkSpace::geometryMappings_</definition>
        <argsstring></argsstring>
        <name>geometryMappings_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="134" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_physical_chunk_space_1a638de6fe88c5f9d687909096176b9cc8" prot="private" static="no" mutable="no">
        <type>Scene</type>
        <definition>Scene PhysicalChunkSpace::scene_</definition>
        <argsstring></argsstring>
        <name>scene_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="135" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_physical_chunk_space_1ad5774ff3ec2a5993504cde5f434d1a34" prot="private" static="no" mutable="no">
        <type>ChunkSpaceCollisionProvider</type>
        <definition>ChunkSpaceCollisionProvider PhysicalChunkSpace::collisionProvider_</definition>
        <argsstring></argsstring>
        <name>collisionProvider_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="136" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_physical_chunk_space_1ad3a7f601aa38e7a77f8c98435fd2fbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PhysicalChunkSpace::PhysicalChunkSpace</definition>
        <argsstring>(SpaceID id, GeometryMapper &amp;mapper, const IContext &amp;context)</argsstring>
        <name>PhysicalChunkSpace</name>
        <param>
          <type>SpaceID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>GeometryMapper &amp;</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const IContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="25" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="69" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1ab5cf3045931565850b11c5fe8c0343c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>PhysicalChunkSpace::~PhysicalChunkSpace</definition>
        <argsstring>()</argsstring>
        <name>~PhysicalChunkSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="27" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1ab6cee4fa3f92b46bf9770824b78c2464" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PhysicalChunkSpace::loadResource</definition>
        <argsstring>(const SpaceEntryID &amp;mappingID, const BW::string &amp;path, const Matrix &amp;matrix=Matrix::identity)</argsstring>
        <name>loadResource</name>
        <reimplements refid="class_i_physical_space_1ad4bf6afa9821ec80944e29f0307f4f7d">loadResource</reimplements>
        <param>
          <type>const SpaceEntryID &amp;</type>
          <declname>mappingID</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const Matrix &amp;</type>
          <declname>matrix</declname>
          <defval>Matrix::identity</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method requests to load the specified resource, possibly using a translation matrix, and assigns it the given SpaceEntryID. (The loading itself may be performed asynchronously.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="35" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="98" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a66b682896a3327315dad9849afd98cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PhysicalChunkSpace::unloadResource</definition>
        <argsstring>(const SpaceEntryID &amp;mappingID)</argsstring>
        <name>unloadResource</name>
        <reimplements refid="class_i_physical_space_1a66f5f1353ca3f5d31662ed24b4384092">unloadResource</reimplements>
        <param>
          <type>const SpaceEntryID &amp;</type>
          <declname>mappingID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method requests to unload the resource specified by the given SpaceEntryID. (The unloading itself may be performed asynchronously.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="44" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a0f97fc938db187478a844dc1b36fc35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PhysicalChunkSpace::update</definition>
        <argsstring>(const BW::Rect &amp;rect, bool unloadOnly)</argsstring>
        <name>update</name>
        <reimplements refid="class_i_physical_space_1a84cc7d0187bd020f8455cf8d1b08b32e">update</reimplements>
        <param>
          <type>const BW::Rect &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unloadOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method loads and/or unloads resources, to cover the axis-aligned rectangle (the updated area that we serve). Return value: whether any new resources have been loaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="52" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a76618846400cea35352da49cb41b8ef5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PhysicalChunkSpace::getLoadedRect</definition>
        <argsstring>(BW::Rect &amp;rect) const </argsstring>
        <name>getLoadedRect</name>
        <reimplements refid="class_i_physical_space_1a664f84b7d38ac0c87a1bb55570ff9043">getLoadedRect</reimplements>
        <param>
          <type>BW::Rect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method does the best it can to determine an axis-aligned rectangle that has been loaded. If there is no loaded resource, then a very big rectangle is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="59" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a3e20fe2d0058d128f26e6675e80bbcf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PhysicalChunkSpace::getLoadableRects</definition>
        <argsstring>(IPhysicalSpace::BoundsList &amp;rects) const </argsstring>
        <name>getLoadableRects</name>
        <reimplements refid="class_i_physical_space_1a04668c9891fc677334611554fd3d9c84">getLoadableRects</reimplements>
        <param>
          <type>IPhysicalSpace::BoundsList &amp;</type>
          <declname>rects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method fills the list of Rects with loadable bounds of all mappings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rects</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to list of Rects to be filled with loadable bounds of all mappings. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if a full answer cannot be provided immediately, perhaps because resources are still being loaded, true otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="61" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a5d3dbf6832ad5dc9137a7f95ac17d496" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>BoundingBox</type>
        <definition>BoundingBox PhysicalChunkSpace::bounds</definition>
        <argsstring>() const </argsstring>
        <name>bounds</name>
        <reimplements refid="class_i_physical_space_1a90222f03c3b303e65df7b30eae94628b">bounds</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns the minimal axis-aligned bounding box that contains all physical objects (including the terrain) in the space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="64" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1aab4617e3f5050802a187a9147390142e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>BoundingBox</type>
        <definition>BoundingBox PhysicalChunkSpace::subBounds</definition>
        <argsstring>() const </argsstring>
        <name>subBounds</name>
        <reimplements refid="class_i_physical_space_1a2b1485999fb6b6922a961c01c9e19595">subBounds</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns the minimal loaded axis-aligned bounding box that contains all physical objects (including the terrain) in the space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="67" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1adbd90cc324bd6999efbdb11efcbcd5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PhysicalChunkSpace::cancelCurrentlyLoading</definition>
        <argsstring>()</argsstring>
        <name>cancelCurrentlyLoading</name>
        <reimplements refid="class_i_physical_space_1a32893c92809c430fbe935414def2a73b">cancelCurrentlyLoading</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function goes through any resources that have been requested to be loaded, and cancels their loading process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="73" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a5f3b8588943e27538a296dfe26a74aa8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PhysicalChunkSpace::isFullyUnloaded</definition>
        <argsstring>() const </argsstring>
        <name>isFullyUnloaded</name>
        <reimplements refid="class_i_physical_space_1a0b8c4865b1f1413425f436997e3c2b86">isFullyUnloaded</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether or not the space is fully unloaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="78" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a17ab5f55a118e76b8272d68ea53842d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PhysicalChunkSpace::isFullyLoaded</definition>
        <argsstring>() const </argsstring>
        <name>isFullyLoaded</name>
        <reimplements refid="class_i_physical_space_1a8ea6099ea1ff3fda89d18bf7747d32b8">isFullyLoaded</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether or not the space is fully loaded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="83" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a5ecd562d88ba531bafa038336c68d2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PhysicalChunkSpace::reuse</definition>
        <argsstring>()</argsstring>
        <name>reuse</name>
        <reimplements refid="class_i_physical_space_1a979d4591e8ea39046b91536f4d34a414">reuse</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method prepares the space to be reused. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="88" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a69a8088bbe7d3d27fc978d789947f162" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PhysicalChunkSpace::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <reimplements refid="class_i_physical_space_1aa2d11e478be0f5e6e4f9d65aec640908">clear</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method unloads all resources and clears all state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="93" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a08def531de4cc6b9d4036caaec261671" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PhysicalChunkSpace::getMatrixForGeometry</definition>
        <argsstring>(const StringRef geometryPath, const MatrixProviderPtr &amp;pMapper, Matrix &amp;matrix)</argsstring>
        <name>getMatrixForGeometry</name>
        <reimplements refid="class_i_physical_space_1a43f9319863c466901cf09c2237cd328a">getMatrixForGeometry</reimplements>
        <param>
          <type>const StringRef</type>
          <declname>geometryPath</declname>
          <defname>path</defname>
        </param>
        <param>
          <type>const MatrixProviderPtr &amp;</type>
          <declname>pMapper</declname>
        </param>
        <param>
          <type>Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method extracts a Matrix suitable for loadResource from the MatrixProvider.</para><para>This method get matrix by MatrixProvider. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="98" column="1" bodyfile="cellapp/physical_chunk_space.cpp" bodystart="222" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1aafd9b302bdfaa50da3ce19d2a646c8ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_smart_pointer" kindref="compound">ChunkSpacePtr</ref></type>
        <definition>ChunkSpacePtr PhysicalChunkSpace::pChunkSpace</definition>
        <argsstring>() const </argsstring>
        <name>pChunkSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Chunk <ref refid="class_space" kindref="compound">Space</ref> getter for cases that really require the underlying Chunk <ref refid="class_space" kindref="compound">Space</ref>. This </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="105" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a9df720e261f033fbe432cfd6f08df44c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const Scene &amp;</type>
        <definition>const Scene&amp; PhysicalChunkSpace::scene</definition>
        <argsstring>() const </argsstring>
        <name>scene</name>
        <reimplements refid="class_i_physical_space_1ad02a52007c19413098e63d65a5a53ec6">scene</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These methods return Scene interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="110" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_physical_chunk_space_1a523dad80b9f04d72071091093ab2b457" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Scene &amp;</type>
        <definition>Scene&amp; PhysicalChunkSpace::scene</definition>
        <argsstring>()</argsstring>
        <name>scene</name>
        <reimplements refid="class_i_physical_space_1ae87c93ad5f4a58c6715ebbabe046fd82">scene</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cellapp/physical_chunk_space.hpp" line="111" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2104">
        <label>PhysicalChunkSpace</label>
        <link refid="class_physical_chunk_space"/>
        <childnode refid="2105" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2106">
        <label>ReferenceCount</label>
      </node>
      <node id="2105">
        <label>IPhysicalSpace</label>
        <link refid="class_i_physical_space"/>
        <childnode refid="2106" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2107">
        <label>PhysicalChunkSpace</label>
        <link refid="class_physical_chunk_space"/>
        <childnode refid="2108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2109">
        <label>ReferenceCount</label>
      </node>
      <node id="2108">
        <label>IPhysicalSpace</label>
        <link refid="class_i_physical_space"/>
        <childnode refid="2109" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="cellapp/physical_chunk_space.hpp" line="22" column="1" bodyfile="cellapp/physical_chunk_space.hpp" bodystart="21" bodyend="137"/>
    <listofallmembers>
      <member refid="class_physical_chunk_space_1a5d3dbf6832ad5dc9137a7f95ac17d496" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>bounds</name></member>
      <member refid="class_i_physical_space_1a4f9b844ef47b8e9fa49a5ba4be6c4878" prot="public" virt="non-virtual"><scope>PhysicalChunkSpace</scope><name>BoundsList</name></member>
      <member refid="class_physical_chunk_space_1adbd90cc324bd6999efbdb11efcbcd5a3" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>cancelCurrentlyLoading</name></member>
      <member refid="class_physical_chunk_space_1a69a8088bbe7d3d27fc978d789947f162" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>clear</name></member>
      <member refid="class_physical_chunk_space_1ad5774ff3ec2a5993504cde5f434d1a34" prot="private" virt="non-virtual"><scope>PhysicalChunkSpace</scope><name>collisionProvider_</name></member>
      <member refid="class_physical_chunk_space_1ab2def19f247deac65e9feba9d386f045" prot="private" virt="non-virtual"><scope>PhysicalChunkSpace</scope><name>geometryMappings_</name></member>
      <member refid="class_physical_chunk_space_1a3e20fe2d0058d128f26e6675e80bbcf8" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>getLoadableRects</name></member>
      <member refid="class_physical_chunk_space_1a76618846400cea35352da49cb41b8ef5" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>getLoadedRect</name></member>
      <member refid="class_physical_chunk_space_1a08def531de4cc6b9d4036caaec261671" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>getMatrixForGeometry</name></member>
      <member refid="class_physical_chunk_space_1a17ab5f55a118e76b8272d68ea53842d6" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>isFullyLoaded</name></member>
      <member refid="class_physical_chunk_space_1a5f3b8588943e27538a296dfe26a74aa8" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>isFullyUnloaded</name></member>
      <member refid="class_physical_chunk_space_1ab6cee4fa3f92b46bf9770824b78c2464" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>loadResource</name></member>
      <member refid="class_physical_chunk_space_1aafd9b302bdfaa50da3ce19d2a646c8ff" prot="public" virt="non-virtual"><scope>PhysicalChunkSpace</scope><name>pChunkSpace</name></member>
      <member refid="class_physical_chunk_space_1aa59f141e428c6a39b25ab6f9fbaf2dad" prot="private" virt="non-virtual"><scope>PhysicalChunkSpace</scope><name>pChunkSpace_</name></member>
      <member refid="class_physical_chunk_space_1ad3a7f601aa38e7a77f8c98435fd2fbcf" prot="public" virt="non-virtual"><scope>PhysicalChunkSpace</scope><name>PhysicalChunkSpace</name></member>
      <member refid="class_physical_chunk_space_1a5ecd562d88ba531bafa038336c68d2af" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>reuse</name></member>
      <member refid="class_physical_chunk_space_1a9df720e261f033fbe432cfd6f08df44c" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>scene</name></member>
      <member refid="class_physical_chunk_space_1a523dad80b9f04d72071091093ab2b457" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>scene</name></member>
      <member refid="class_physical_chunk_space_1a638de6fe88c5f9d687909096176b9cc8" prot="private" virt="non-virtual"><scope>PhysicalChunkSpace</scope><name>scene_</name></member>
      <member refid="class_physical_chunk_space_1aab4617e3f5050802a187a9147390142e" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>subBounds</name></member>
      <member refid="class_physical_chunk_space_1a66b682896a3327315dad9849afd98cdd" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>unloadResource</name></member>
      <member refid="class_physical_chunk_space_1a0f97fc938db187478a844dc1b36fc35e" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>update</name></member>
      <member refid="class_i_physical_space_1a6e8afeaa3ba55fcadbd15573288d5efa" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>~IPhysicalSpace</name></member>
      <member refid="class_physical_chunk_space_1ab5cf3045931565850b11c5fe8c0343c7" prot="public" virt="virtual"><scope>PhysicalChunkSpace</scope><name>~PhysicalChunkSpace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
