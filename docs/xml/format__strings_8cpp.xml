<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="format__strings_8cpp" kind="file" language="C++">
    <compoundname>format_strings.cpp</compoundname>
    <includes refid="format__strings_8hpp" local="yes">format_strings.hpp</includes>
    <incdepgraph>
      <node id="19348">
        <label>tools/message_logger/format_strings.cpp</label>
        <link refid="format_strings.cpp"/>
        <childnode refid="19349" relation="include">
        </childnode>
      </node>
      <node id="19361">
        <label>network/bsd_snprintf.h</label>
      </node>
      <node id="19354">
        <label>cstdmf/stdmf.hpp</label>
      </node>
      <node id="19366">
        <label>log_time.hpp</label>
        <link refid="log__time_8hpp_source"/>
        <childnode refid="19367" relation="include">
        </childnode>
        <childnode refid="19354" relation="include">
        </childnode>
        <childnode refid="19356" relation="include">
        </childnode>
        <childnode refid="19368" relation="include">
        </childnode>
      </node>
      <node id="19357">
        <label>format_data.hpp</label>
        <link refid="format__data_8hpp_source"/>
        <childnode refid="19354" relation="include">
        </childnode>
        <childnode refid="19356" relation="include">
        </childnode>
      </node>
      <node id="19356">
        <label>cstdmf/binary_stream.hpp</label>
      </node>
      <node id="19360">
        <label>cstdmf/bw_string.hpp</label>
      </node>
      <node id="19363">
        <label>network/format_string_handler.hpp</label>
      </node>
      <node id="19350">
        <label>cstdmf/bw_map.hpp</label>
      </node>
      <node id="19369">
        <label>cstdmf/debug_message_source.hpp</label>
      </node>
      <node id="19365">
        <label>log_entry.hpp</label>
        <link refid="log__entry_8hpp_source"/>
        <childnode refid="19366" relation="include">
        </childnode>
        <childnode refid="19358" relation="include">
        </childnode>
        <childnode refid="19354" relation="include">
        </childnode>
        <childnode refid="19369" relation="include">
        </childnode>
        <childnode refid="19356" relation="include">
        </childnode>
      </node>
      <node id="19351">
        <label>log_string_interpolator.hpp</label>
        <link refid="log__string__interpolator_8hpp_source"/>
        <childnode refid="19352" relation="include">
        </childnode>
        <childnode refid="19357" relation="include">
        </childnode>
        <childnode refid="19358" relation="include">
        </childnode>
        <childnode refid="19361" relation="include">
        </childnode>
        <childnode refid="19362" relation="include">
        </childnode>
        <childnode refid="19363" relation="include">
        </childnode>
        <childnode refid="19364" relation="include">
        </childnode>
        <childnode refid="19360" relation="include">
        </childnode>
        <childnode refid="19355" relation="include">
        </childnode>
      </node>
      <node id="19367">
        <label>constants.hpp</label>
        <link refid="constants_8hpp_source"/>
        <childnode refid="19364" relation="include">
        </childnode>
        <childnode refid="19353" relation="include">
        </childnode>
        <childnode refid="19358" relation="include">
        </childnode>
      </node>
      <node id="19368">
        <label>time.h</label>
      </node>
      <node id="19359">
        <label>network/basictypes.hpp</label>
      </node>
      <node id="19358">
        <label>types.hpp</label>
        <link refid="tools_2message__logger_2types_8hpp_source"/>
        <childnode refid="19359" relation="include">
        </childnode>
        <childnode refid="19360" relation="include">
        </childnode>
        <childnode refid="19355" relation="include">
        </childnode>
        <childnode refid="19354" relation="include">
        </childnode>
      </node>
      <node id="19364">
        <label>network/logger_message_forwarder.hpp</label>
      </node>
      <node id="19353">
        <label>cstdmf/bw_namespace.hpp</label>
      </node>
      <node id="19349">
        <label>format_strings.hpp</label>
        <link refid="format__strings_8hpp_source"/>
        <childnode refid="19350" relation="include">
        </childnode>
        <childnode refid="19351" relation="include">
        </childnode>
        <childnode refid="19365" relation="include">
        </childnode>
      </node>
      <node id="19352">
        <label>string_offset.hpp</label>
        <link refid="string__offset_8hpp_source"/>
        <childnode refid="19353" relation="include">
        </childnode>
        <childnode refid="19354" relation="include">
        </childnode>
        <childnode refid="19355" relation="include">
        </childnode>
        <childnode refid="19356" relation="include">
        </childnode>
      </node>
      <node id="19355">
        <label>cstdmf/bw_vector.hpp</label>
      </node>
      <node id="19362">
        <label>network/file_stream.hpp</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;format_strings.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="namespace_b_w___b_e_g_i_n___n_a_m_e_s_p_a_c_e" kindref="compound">BW_BEGIN_NAMESPACE</ref></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="class_format_strings_1ab33e145ffff994a46a94dd17de70605b" kindref="member">FormatStrings::~FormatStrings</ref>()</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>FormatMap::iterator<sp/>it<sp/>=<sp/>formatMap_.begin();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formatMap_.end())</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_format_strings_1af20060e6b46b3115d1bf75941bfeb78e" kindref="member">FormatStrings::clear</ref>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>FormatMap::iterator<sp/>it<sp/>=<sp/>formatMap_.begin();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formatMap_.end())</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>formatMap_.clear();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref>*<sp/><ref refid="class_format_strings_1afd22a14b8a09eadcbe10f112a69be9cf" kindref="member">FormatStrings::resolve</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BW::string<sp/>&amp;fmt<sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>FormatMap::iterator<sp/>it<sp/>=<sp/>formatMap_.find(<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formatMap_.end())</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;canAppendToDB())</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref><sp/>*pHandler<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref>(<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pHandler-&gt;isOk())</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR_MSG(<sp/></highlight><highlight class="stringliteral">&quot;FormatStrings::resolve:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>LogStringInterpolator<sp/>for:<sp/>%s.<sp/>This<sp/>might<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;because<sp/>the<sp/>format<sp/>string<sp/>is<sp/>invalid.\n&quot;</highlight><highlight class="normal">,<sp/>fmt.c_str()<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pHandler;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>should<sp/>potentially<sp/>consider<sp/>failing<sp/>here<sp/>if<sp/>we<sp/>were<sp/>unable<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>write<sp/>to<sp/>db.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;writeFormatStringToDB(<sp/>pHandler<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_format_strings_1ad054866a3a76994cf480aec71555bebf" kindref="member">addFormatStringToMap</ref>(<sp/>fmt,<sp/>pHandler<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pHandler;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">FormatStringList<sp/><ref refid="class_format_strings_1a272117842c12a2aaaafbff27a1fb58c0" kindref="member">FormatStrings::getFormatStrings</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="82"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>FormatStringList<sp/>stringsList;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>FormatMap::const_iterator<sp/>it<sp/>=<sp/>formatMap_.begin();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formatMap_.end())</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringsList.push_back(<sp/>it-&gt;first<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringsList;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_format_strings_1ad054866a3a76994cf480aec71555bebf" kindref="member">FormatStrings::addFormatStringToMap</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BW::string<sp/>&amp;<sp/>fmt,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref><sp/>*pHandler<sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>formatMap_[<sp/>fmt<sp/>]<sp/>=<sp/>pHandler;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">BW_END_NAMESPACE</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>format_strings.cpp</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tools/message_logger/format_strings.cpp"/>
  </compounddef>
</doxygen>
