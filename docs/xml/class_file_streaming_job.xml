<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_file_streaming_job" kind="class" language="C++" prot="public">
    <compoundname>FileStreamingJob</compoundname>
    <basecompoundref refid="class_worker_job" prot="public" virt="non-virtual">WorkerJob</basecompoundref>
    <includes refid="loading__thread_8hpp" local="no">loading_thread.hpp</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_file_streaming_job_1aecb88250fd56a0fc342d06f3de69da8a" prot="protected" static="no">
        <type>std::deque&lt; BW::string * &gt;</type>
        <definition>typedef std::deque&lt; BW::string* &gt; FileStreamingJob::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="64" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_file_streaming_job_1a408a09f53becc65c159327527519e576" prot="protected" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string FileStreamingJob::path_</definition>
        <argsstring></argsstring>
        <name>path_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="58" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1ac80b26e34e25869a813d2619b6b5d41a" prot="protected" static="no" mutable="no">
        <type>FILE *</type>
        <definition>FILE* FileStreamingJob::file_</definition>
        <argsstring></argsstring>
        <name>file_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="59" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1ab9a763eae7d520c3f3c95dd6c8c86114" prot="protected" static="no" mutable="no">
        <type>char *</type>
        <definition>char* FileStreamingJob::buf_</definition>
        <argsstring></argsstring>
        <name>buf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="60" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1a4a4a6dba46da7451855b8780c28863b5" prot="protected" static="no" mutable="no">
        <type>Data</type>
        <definition>Data FileStreamingJob::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="65" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1ad8e59f65b69db0ea189f60ba4c4c23a2" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int FileStreamingJob::offset_</definition>
        <argsstring></argsstring>
        <name>offset_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="68" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1a39553bbd0069da54b1f44d9f7641f3d4" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int FileStreamingJob::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="71" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1a31c47ea4ec3d6dfddbea17751176ba61" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int FileStreamingJob::maxsize_</definition>
        <argsstring></argsstring>
        <name>maxsize_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="74" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1a3d1ae796f85dc30f4204fbc871187156" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool FileStreamingJob::doneReading_</definition>
        <argsstring></argsstring>
        <name>doneReading_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="77" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1ae947be404115a3f21404fd6325c8e7eb" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool FileStreamingJob::error_</definition>
        <argsstring></argsstring>
        <name>error_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="80" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_file_streaming_job_1af080e460d1edc1bceb1921543a98cc39" prot="protected" static="no" mutable="no">
        <type>SimpleMutex</type>
        <definition>SimpleMutex FileStreamingJob::lock_</definition>
        <argsstring></argsstring>
        <name>lock_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="82" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_file_streaming_job_1a27daf46e6a570356d1dcf9424661dd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FileStreamingJob::FileStreamingJob</definition>
        <argsstring>(const BW::string &amp;path, int bufsize=65536)</argsstring>
        <name>FileStreamingJob</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
          <defval>65536</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="class_file_streaming_job" kindref="compound">FileStreamingJob</ref> for the resource at the specified location, with the specified buffer size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="43" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="691" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="class_file_streaming_job_1ab87a43200d1ea24f3c0734029ed7294c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int FileStreamingJob::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of bytes of data currently buffered in memory. This should be called by the reader to decide whether a <ref refid="class_file_streaming_job_1a78cecf5afd283ee996ecf80521dd770f" kindref="member">read()</ref> is a good idea. As long as only one thread is trying to read, this doesn&apos;t need to be synchronised with the mutex as the return value will at worst underestimate the true amount of buffered data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="45" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="738" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="class_file_streaming_job_1a167e063fcebeff08b071d4f79d06febb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int FileStreamingJob::freeSpace</definition>
        <argsstring>()</argsstring>
        <name>freeSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of bytes of free space available in the buffer at the moment. This should be called by the writer before reading data from disk to append to the buffer. This doesn&apos;t need to be synchronised for the same reason as <ref refid="class_file_streaming_job_1ab87a43200d1ea24f3c0734029ed7294c" kindref="member">size()</ref> above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="46" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="750" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="class_file_streaming_job_1ace38b491078583f0214096d9761a94bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool FileStreamingJob::done</definition>
        <argsstring>()</argsstring>
        <name>done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this job has completed successfully and can be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="47" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="759" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="class_file_streaming_job_1a89cfba7ad0e4ac735a800a91b2a0057b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool FileStreamingJob::good</definition>
        <argsstring>()</argsstring>
        <name>good</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns false if an I/O error of some kind occured (e.g. file not found). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="48" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="769" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="class_file_streaming_job_1a78cecf5afd283ee996ecf80521dd770f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FileStreamingJob::read</definition>
        <argsstring>(BinaryOStream &amp;os, int nBytes)</argsstring>
        <name>read</name>
        <param>
          <type>BinaryOStream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write at most the specified number of bytes out of the buffer into the provided stream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="49" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="779" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="class_file_streaming_job_1abdba2245f59d1a49296dcb8689dab72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FileStreamingJob::write</definition>
        <argsstring>(const char *src, int nBytes)</argsstring>
        <name>write</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read some data into the buffer. You should call <ref refid="class_file_streaming_job_1a167e063fcebeff08b071d4f79d06febb" kindref="member">freeSpace()</ref> to find out how much data is actually wanted before doing this to make sure you&apos;re not overbuffering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="50" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="813" bodyend="821"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_file_streaming_job_1a3a201144953a3b4468020cf88e804555" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>float</type>
        <definition>float FileStreamingJob::operator()</definition>
        <argsstring>()</argsstring>
        <name>operator()</name>
        <reimplements refid="class_worker_job_1afd3c79ced2bbc23cd3cf9dacc49ea09c">operator()</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from the loading thread. Does the actual reading of stuff off disk into the buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="53" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="828" bodyend="892"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_file_streaming_job_1a9508766a26e2b091fa741afa645046da" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FileStreamingJob::~FileStreamingJob</definition>
        <argsstring>()</argsstring>
        <name>~FileStreamingJob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/loading_thread.hpp" line="56" column="1" bodyfile="baseapp/loading_thread.cpp" bodystart="705" bodyend="728"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class used for gradually reading a file from disk into a fixed-sized memory buffer. This is used to implement BigWorld.addProxyFileData(). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1283">
        <label>WorkerJob</label>
        <link refid="class_worker_job"/>
      </node>
      <node id="1282">
        <label>FileStreamingJob</label>
        <link refid="class_file_streaming_job"/>
        <childnode refid="1283" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1285">
        <label>WorkerJob</label>
        <link refid="class_worker_job"/>
      </node>
      <node id="1284">
        <label>FileStreamingJob</label>
        <link refid="class_file_streaming_job"/>
        <childnode refid="1285" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="baseapp/loading_thread.hpp" line="41" column="1" bodyfile="baseapp/loading_thread.hpp" bodystart="40" bodyend="83"/>
    <listofallmembers>
      <member refid="class_file_streaming_job_1ab9a763eae7d520c3f3c95dd6c8c86114" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>buf_</name></member>
      <member refid="class_file_streaming_job_1aecb88250fd56a0fc342d06f3de69da8a" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>Data</name></member>
      <member refid="class_file_streaming_job_1a4a4a6dba46da7451855b8780c28863b5" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>data_</name></member>
      <member refid="class_worker_job_1ab85f534e0406cbe24acd9997a9f2ab20" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>deleteSelf</name></member>
      <member refid="class_file_streaming_job_1ace38b491078583f0214096d9761a94bd" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>done</name></member>
      <member refid="class_file_streaming_job_1a3d1ae796f85dc30f4204fbc871187156" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>doneReading_</name></member>
      <member refid="class_worker_job_1a45c6bd51df30d9effe7665b1b0370344" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>DONT_RESCHEDULE</name></member>
      <member refid="class_worker_job_1a54aa01ef176dc2241b56c438ac02213b" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>DONT_RESCHEDULE_AND_DESTROY</name></member>
      <member refid="class_file_streaming_job_1ae947be404115a3f21404fd6325c8e7eb" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>error_</name></member>
      <member refid="class_file_streaming_job_1ac80b26e34e25869a813d2619b6b5d41a" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>file_</name></member>
      <member refid="class_file_streaming_job_1a27daf46e6a570356d1dcf9424661dd11" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>FileStreamingJob</name></member>
      <member refid="class_file_streaming_job_1a167e063fcebeff08b071d4f79d06febb" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>freeSpace</name></member>
      <member refid="class_file_streaming_job_1a89cfba7ad0e4ac735a800a91b2a0057b" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>good</name></member>
      <member refid="class_worker_job_1a915d4203d1b0dbf592a89f4ecc3dd78d" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>isDisowned</name></member>
      <member refid="class_file_streaming_job_1af080e460d1edc1bceb1921543a98cc39" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>lock_</name></member>
      <member refid="class_file_streaming_job_1a31c47ea4ec3d6dfddbea17751176ba61" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>maxsize_</name></member>
      <member refid="class_file_streaming_job_1ad8e59f65b69db0ea189f60ba4c4c23a2" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>offset_</name></member>
      <member refid="class_file_streaming_job_1a3a201144953a3b4468020cf88e804555" prot="private" virt="virtual"><scope>FileStreamingJob</scope><name>operator()</name></member>
      <member refid="class_file_streaming_job_1a408a09f53becc65c159327527519e576" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>path_</name></member>
      <member refid="class_file_streaming_job_1a78cecf5afd283ee996ecf80521dd770f" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>read</name></member>
      <member refid="class_file_streaming_job_1ab87a43200d1ea24f3c0734029ed7294c" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>size</name></member>
      <member refid="class_file_streaming_job_1a39553bbd0069da54b1f44d9f7641f3d4" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>size_</name></member>
      <member refid="class_worker_job_1a803b6fc05912dc5b6b9e2afbaa4fcf3a" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>submit</name></member>
      <member refid="class_worker_job_1a69d5df98ea6d0ee989610be780a18555" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>withdraw</name></member>
      <member refid="class_worker_job_1a99e3d7e946b7302500c2b71ec6b5e92a" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>WorkerJob</name></member>
      <member refid="class_file_streaming_job_1abdba2245f59d1a49296dcb8689dab72f" prot="public" virt="non-virtual"><scope>FileStreamingJob</scope><name>write</name></member>
      <member refid="class_file_streaming_job_1a9508766a26e2b091fa741afa645046da" prot="protected" virt="non-virtual"><scope>FileStreamingJob</scope><name>~FileStreamingJob</name></member>
      <member refid="class_worker_job_1a2021f357efe65197ce3cbff302e34df1" prot="protected" virt="virtual"><scope>FileStreamingJob</scope><name>~WorkerJob</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
