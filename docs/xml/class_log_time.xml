<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_log_time" kind="class" language="C++" prot="public">
    <compoundname>LogTime</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_log_time_1aee567c45af53d7a6e781762a528a40b9" prot="public" static="no">
        <type>int64</type>
        <definition>typedef int64 LogTime::Seconds</definition>
        <argsstring></argsstring>
        <name>Seconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="18" column="1" bodyfile="tools/message_logger/log_time.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_log_time_1ab94cca0cf7fb0e2f6249112f251642f4" prot="public" static="no">
        <type>uint16</type>
        <definition>typedef uint16 LogTime::Milliseconds</definition>
        <argsstring></argsstring>
        <name>Milliseconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="19" column="1" bodyfile="tools/message_logger/log_time.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_log_time_1afa1dfa897545000ef7dfc09df0e591ca" prot="public" static="no" mutable="no">
        <type>Seconds</type>
        <definition>Seconds LogTime::secs_</definition>
        <argsstring></argsstring>
        <name>secs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="32" column="1" bodyfile="tools/message_logger/log_time.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_time_1abb24ddf57bd13cb4a1b1da6becb34474" prot="public" static="no" mutable="no">
        <type>Milliseconds</type>
        <definition>Milliseconds LogTime::msecs_</definition>
        <argsstring></argsstring>
        <name>msecs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="33" column="1" bodyfile="tools/message_logger/log_time.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_log_time_1ac04906072b0eb983df579468a30d320f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BW_BEGIN_NAMESPACE LogTime::LogTime</definition>
        <argsstring>()</argsstring>
        <name>LogTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default Constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="21" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="13" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="class_log_time_1a19b386f73a9a0d95b76e8f421440ed87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogTime::LogTime</definition>
        <argsstring>(double ftime)</argsstring>
        <name>LogTime</name>
        <param>
          <type>double</type>
          <declname>ftime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para>Pass LOG_END here to generate the positive infinity time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="22" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="22" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_log_time_1aa8493fe01fb838d4603cf9df728c61a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogTime::operator&gt;</definition>
        <argsstring>(const LogTime &amp;other) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_log_time" kindref="compound">LogTime</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="24" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_log_time_1af7123f6429e63251f95eec30d982e429" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogTime::operator&gt;=</definition>
        <argsstring>(const LogTime &amp;other) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_log_time" kindref="compound">LogTime</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="25" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_log_time_1a658d51723069158c0bb092b87df7b755" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogTime::operator&lt;</definition>
        <argsstring>(const LogTime &amp;other) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_log_time" kindref="compound">LogTime</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="26" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_log_time_1a23a6f4b64f6117e78c30c7561e99068d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogTime::operator&lt;=</definition>
        <argsstring>(const LogTime &amp;other) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_log_time" kindref="compound">LogTime</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="27" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_log_time_1aa9df41ca3746e1bfa9f43e64799d6b3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogTime::operator==</definition>
        <argsstring>(const LogTime &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_log_time" kindref="compound">LogTime</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="28" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_log_time_1a46c48bde1886da01e3078c7ecbaee781" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LogTime::asDouble</definition>
        <argsstring>() const </argsstring>
        <name>asDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="30" column="1" bodyfile="tools/message_logger/log_time.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_log_time_1aa349287bd94314d87e743a1d23737527" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend BinaryOStream &amp;</type>
        <definition>BinaryOStream&amp; operator&lt;&lt;</definition>
        <argsstring>(BinaryOStream &amp;os, const LogTime &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>BinaryOStream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_log_time" kindref="compound">LogTime</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="35" column="1" bodyfile="tools/message_logger/log_time.hpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="friend" id="class_log_time_1a099a676d6f35f1f2220c716c83539125" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend BinaryIStream &amp;</type>
        <definition>BinaryIStream&amp; operator&gt;&gt;</definition>
        <argsstring>(BinaryIStream &amp;is, LogTime &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>BinaryIStream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_log_time" kindref="compound">LogTime</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/log_time.hpp" line="41" column="1" bodyfile="tools/message_logger/log_time.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="tools/message_logger/log_time.hpp" line="16" column="1" bodyfile="tools/message_logger/log_time.hpp" bodystart="15" bodyend="45"/>
    <listofallmembers>
      <member refid="class_log_time_1a46c48bde1886da01e3078c7ecbaee781" prot="public" virt="non-virtual"><scope>LogTime</scope><name>asDouble</name></member>
      <member refid="class_log_time_1ac04906072b0eb983df579468a30d320f" prot="public" virt="non-virtual"><scope>LogTime</scope><name>LogTime</name></member>
      <member refid="class_log_time_1a19b386f73a9a0d95b76e8f421440ed87" prot="public" virt="non-virtual"><scope>LogTime</scope><name>LogTime</name></member>
      <member refid="class_log_time_1ab94cca0cf7fb0e2f6249112f251642f4" prot="public" virt="non-virtual"><scope>LogTime</scope><name>Milliseconds</name></member>
      <member refid="class_log_time_1abb24ddf57bd13cb4a1b1da6becb34474" prot="public" virt="non-virtual"><scope>LogTime</scope><name>msecs_</name></member>
      <member refid="class_log_time_1a658d51723069158c0bb092b87df7b755" prot="public" virt="non-virtual"><scope>LogTime</scope><name>operator&lt;</name></member>
      <member refid="class_log_time_1aa349287bd94314d87e743a1d23737527" prot="private" virt="non-virtual"><scope>LogTime</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_log_time_1a23a6f4b64f6117e78c30c7561e99068d" prot="public" virt="non-virtual"><scope>LogTime</scope><name>operator&lt;=</name></member>
      <member refid="class_log_time_1aa9df41ca3746e1bfa9f43e64799d6b3f" prot="public" virt="non-virtual"><scope>LogTime</scope><name>operator==</name></member>
      <member refid="class_log_time_1aa8493fe01fb838d4603cf9df728c61a6" prot="public" virt="non-virtual"><scope>LogTime</scope><name>operator&gt;</name></member>
      <member refid="class_log_time_1af7123f6429e63251f95eec30d982e429" prot="public" virt="non-virtual"><scope>LogTime</scope><name>operator&gt;=</name></member>
      <member refid="class_log_time_1a099a676d6f35f1f2220c716c83539125" prot="private" virt="non-virtual"><scope>LogTime</scope><name>operator&gt;&gt;</name></member>
      <member refid="class_log_time_1aee567c45af53d7a6e781762a528a40b9" prot="public" virt="non-virtual"><scope>LogTime</scope><name>Seconds</name></member>
      <member refid="class_log_time_1afa1dfa897545000ef7dfc09df0e591ca" prot="public" virt="non-virtual"><scope>LogTime</scope><name>secs_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
