<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="query__params_8cpp" kind="file" language="C++">
    <compoundname>query_params.cpp</compoundname>
    <includes local="yes">script/first_include.hpp</includes>
    <includes refid="query__params_8hpp" local="yes">query_params.hpp</includes>
    <includes refid="constants_8hpp" local="yes">constants.hpp</includes>
    <includes refid="user__log__reader_8hpp" local="yes">user_log_reader.hpp</includes>
    <includes refid="log__entry_8hpp" local="yes">log_entry.hpp</includes>
    <includes refid="tools_2message__logger_2types_8hpp" local="yes">types.hpp</includes>
    <includes refid="log__reader_8hpp" local="yes">mldb/log_reader.hpp</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">regex.h</includes>
    <incdepgraph>
      <node id="22104">
        <label>query_range_iterator.hpp</label>
        <link refid="query__range__iterator_8hpp_source"/>
        <childnode refid="22073" relation="include">
        </childnode>
        <childnode refid="22084" relation="include">
        </childnode>
      </node>
      <node id="22102">
        <label>unary_integer_file.hpp</label>
        <link refid="unary__integer__file_8hpp_source"/>
        <childnode refid="22095" relation="include">
        </childnode>
        <childnode refid="22096" relation="include">
        </childnode>
      </node>
      <node id="22117">
        <label>network/bsd_snprintf.h</label>
      </node>
      <node id="22069">
        <label>query_params.hpp</label>
        <link refid="query__params_8hpp_source"/>
        <childnode refid="22070" relation="include">
        </childnode>
        <childnode refid="22071" relation="include">
        </childnode>
        <childnode refid="22072" relation="include">
        </childnode>
        <childnode refid="22083" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22085" relation="include">
        </childnode>
        <childnode refid="22108" relation="include">
        </childnode>
        <childnode refid="22121" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22106" relation="include">
        </childnode>
        <childnode refid="22122" relation="include">
        </childnode>
      </node>
      <node id="22085">
        <label>user_log_reader.hpp</label>
        <link refid="user__log__reader_8hpp_source"/>
        <childnode refid="22070" relation="include">
        </childnode>
        <childnode refid="22086" relation="include">
        </childnode>
        <childnode refid="22087" relation="include">
        </childnode>
        <childnode refid="22103" relation="include">
        </childnode>
        <childnode refid="22107" relation="include">
        </childnode>
        <childnode refid="22079" relation="include">
        </childnode>
      </node>
      <node id="22080">
        <label>cstdmf/stdmf.hpp</label>
      </node>
      <node id="22068">
        <label>script/first_include.hpp</label>
      </node>
      <node id="22096">
        <label>stdlib.h</label>
      </node>
      <node id="22072">
        <label>log_time.hpp</label>
        <link refid="log__time_8hpp_source"/>
        <childnode refid="22073" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22081" relation="include">
        </childnode>
        <childnode refid="22082" relation="include">
        </childnode>
      </node>
      <node id="22083">
        <label>log_entry_address_reader.hpp</label>
        <link refid="log__entry__address__reader_8hpp_source"/>
        <childnode refid="22084" relation="include">
        </childnode>
        <childnode refid="22071" relation="include">
        </childnode>
      </node>
      <node id="22100">
        <label>user_segment_usage.hpp</label>
        <link refid="user__segment__usage_8hpp_source"/>
        <childnode refid="22101" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
      </node>
      <node id="22116">
        <label>format_data.hpp</label>
        <link refid="format__data_8hpp_source"/>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22081" relation="include">
        </childnode>
      </node>
      <node id="22081">
        <label>cstdmf/binary_stream.hpp</label>
      </node>
      <node id="22093">
        <label>mldb/log_component_names.hpp</label>
        <link refid="mldb_2log__component__names_8hpp_source"/>
        <childnode refid="22094" relation="include">
        </childnode>
        <childnode refid="22095" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
      </node>
      <node id="22070">
        <label>cstdmf/smartpointer.hpp</label>
      </node>
      <node id="22067">
        <label>tools/message_logger/query_params.cpp</label>
        <link refid="query_params.cpp"/>
        <childnode refid="22068" relation="include">
        </childnode>
        <childnode refid="22069" relation="include">
        </childnode>
        <childnode refid="22073" relation="include">
        </childnode>
        <childnode refid="22085" relation="include">
        </childnode>
        <childnode refid="22105" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22108" relation="include">
        </childnode>
        <childnode refid="22123" relation="include">
        </childnode>
        <childnode refid="22122" relation="include">
        </childnode>
      </node>
      <node id="22078">
        <label>cstdmf/bw_string.hpp</label>
      </node>
      <node id="22120">
        <label>../hostnames.hpp</label>
        <link refid="hostnames_8hpp_source"/>
        <childnode refid="22086" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
      </node>
      <node id="22118">
        <label>network/format_string_handler.hpp</label>
      </node>
      <node id="22086">
        <label>cstdmf/bw_map.hpp</label>
      </node>
      <node id="22121">
        <label>cstdmf/bw_set.hpp</label>
      </node>
      <node id="22103">
        <label>query_range.hpp</label>
        <link refid="query__range_8hpp_source"/>
        <childnode refid="22070" relation="include">
        </childnode>
        <childnode refid="22083" relation="include">
        </childnode>
        <childnode refid="22072" relation="include">
        </childnode>
        <childnode refid="22069" relation="include">
        </childnode>
        <childnode refid="22104" relation="include">
        </childnode>
        <childnode refid="22085" relation="include">
        </childnode>
        <childnode refid="22105" relation="include">
        </childnode>
      </node>
      <node id="22106">
        <label>cstdmf/debug_message_source.hpp</label>
      </node>
      <node id="22123">
        <label>sys/types.h</label>
      </node>
      <node id="22112">
        <label>format_strings.hpp</label>
        <link refid="mldb_2format__strings_8hpp_source"/>
        <childnode refid="22090" relation="include">
        </childnode>
        <childnode refid="22113" relation="include">
        </childnode>
        <childnode refid="22114" relation="include">
        </childnode>
        <childnode refid="22105" relation="include">
        </childnode>
        <childnode refid="22086" relation="include">
        </childnode>
      </node>
      <node id="22110">
        <label>categories.hpp</label>
        <link refid="mldb_2categories_8hpp_source"/>
        <childnode refid="22090" relation="include">
        </childnode>
        <childnode refid="22111" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22086" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
      </node>
      <node id="22105">
        <label>log_entry.hpp</label>
        <link refid="log__entry_8hpp_source"/>
        <childnode refid="22072" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22106" relation="include">
        </childnode>
        <childnode refid="22081" relation="include">
        </childnode>
      </node>
      <node id="22071">
        <label>Python.h</label>
      </node>
      <node id="22101">
        <label>cstdmf/bw_list.hpp</label>
      </node>
      <node id="22114">
        <label>log_string_interpolator.hpp</label>
        <link refid="log__string__interpolator_8hpp_source"/>
        <childnode refid="22115" relation="include">
        </childnode>
        <childnode refid="22116" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22117" relation="include">
        </childnode>
        <childnode refid="22092" relation="include">
        </childnode>
        <childnode refid="22118" relation="include">
        </childnode>
        <childnode refid="22074" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
        <childnode refid="22079" relation="include">
        </childnode>
      </node>
      <node id="22095">
        <label>../text_file_handler.hpp</label>
        <link refid="text__file__handler_8hpp_source"/>
        <childnode refid="22091" relation="include">
        </childnode>
        <childnode refid="22096" relation="include">
        </childnode>
      </node>
      <node id="22097">
        <label>user_segment.hpp</label>
        <link refid="user__segment_8hpp_source"/>
        <childnode refid="22075" relation="include">
        </childnode>
        <childnode refid="22079" relation="include">
        </childnode>
        <childnode refid="22087" relation="include">
        </childnode>
        <childnode refid="22072" relation="include">
        </childnode>
        <childnode refid="22098" relation="include">
        </childnode>
        <childnode refid="22092" relation="include">
        </childnode>
        <childnode refid="22096" relation="include">
        </childnode>
        <childnode refid="22099" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
      </node>
      <node id="22090">
        <label>binary_file_handler.hpp</label>
        <link refid="binary__file__handler_8hpp_source"/>
        <childnode refid="22091" relation="include">
        </childnode>
        <childnode refid="22092" relation="include">
        </childnode>
      </node>
      <node id="22073">
        <label>constants.hpp</label>
        <link refid="constants_8hpp_source"/>
        <childnode refid="22074" relation="include">
        </childnode>
        <childnode refid="22075" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
      </node>
      <node id="22082">
        <label>time.h</label>
      </node>
      <node id="22077">
        <label>network/basictypes.hpp</label>
      </node>
      <node id="22094">
        <label>../log_component_names.hpp</label>
        <link refid="log__component__names_8hpp_source"/>
        <childnode refid="22076" relation="include">
        </childnode>
      </node>
      <node id="22111">
        <label>../categories.hpp</label>
        <link refid="categories_8hpp_source"/>
        <childnode refid="22086" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
      </node>
      <node id="22076">
        <label>types.hpp</label>
        <link refid="tools_2message__logger_2types_8hpp_source"/>
        <childnode refid="22077" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
        <childnode refid="22079" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
      </node>
      <node id="22087">
        <label>user_log.hpp</label>
        <link refid="user__log_8hpp_source"/>
        <childnode refid="22088" relation="include">
        </childnode>
        <childnode refid="22089" relation="include">
        </childnode>
        <childnode refid="22097" relation="include">
        </childnode>
        <childnode refid="22100" relation="include">
        </childnode>
        <childnode refid="22102" relation="include">
        </childnode>
        <childnode refid="22099" relation="include">
        </childnode>
      </node>
      <node id="22119">
        <label>hostnames.hpp</label>
        <link refid="mldb_2hostnames_8hpp_source"/>
        <childnode refid="22120" relation="include">
        </childnode>
        <childnode refid="22095" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22086" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
      </node>
      <node id="22075">
        <label>cstdmf/bw_namespace.hpp</label>
      </node>
      <node id="22074">
        <label>network/logger_message_forwarder.hpp</label>
      </node>
      <node id="22113">
        <label>../format_strings.hpp</label>
        <link refid="format__strings_8hpp_source"/>
        <childnode refid="22086" relation="include">
        </childnode>
        <childnode refid="22114" relation="include">
        </childnode>
        <childnode refid="22105" relation="include">
        </childnode>
      </node>
      <node id="22115">
        <label>string_offset.hpp</label>
        <link refid="string__offset_8hpp_source"/>
        <childnode refid="22075" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22079" relation="include">
        </childnode>
        <childnode refid="22081" relation="include">
        </childnode>
      </node>
      <node id="22091">
        <label>file_handler.hpp</label>
        <link refid="file__handler_8hpp_source"/>
        <childnode refid="22075" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
      </node>
      <node id="22108">
        <label>mldb/log_reader.hpp</label>
        <link refid="log__reader_8hpp_source"/>
        <childnode refid="22109" relation="include">
        </childnode>
        <childnode refid="22120" relation="include">
        </childnode>
        <childnode refid="22085" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22086" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
      </node>
      <node id="22088">
        <label>logging_component.hpp</label>
        <link refid="logging__component_8hpp_source"/>
        <childnode refid="22089" relation="include">
        </childnode>
        <childnode refid="22084" relation="include">
        </childnode>
        <childnode refid="22074" relation="include">
        </childnode>
      </node>
      <node id="22107">
        <label>user_segment_reader.hpp</label>
        <link refid="user__segment__reader_8hpp_source"/>
        <childnode refid="22097" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
        <childnode refid="22079" relation="include">
        </childnode>
      </node>
      <node id="22109">
        <label>log_common.hpp</label>
        <link refid="log__common_8hpp_source"/>
        <childnode refid="22110" relation="include">
        </childnode>
        <childnode refid="22112" relation="include">
        </childnode>
        <childnode refid="22119" relation="include">
        </childnode>
        <childnode refid="22093" relation="include">
        </childnode>
        <childnode refid="22102" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
      </node>
      <node id="22098">
        <label>mldb/metadata.hpp</label>
        <link refid="mldb_2metadata_8hpp_source"/>
        <childnode refid="22090" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22080" relation="include">
        </childnode>
      </node>
      <node id="22079">
        <label>cstdmf/bw_vector.hpp</label>
      </node>
      <node id="22122">
        <label>regex.h</label>
      </node>
      <node id="22092">
        <label>network/file_stream.hpp</label>
      </node>
      <node id="22089">
        <label>user_components.hpp</label>
        <link refid="user__components_8hpp_source"/>
        <childnode refid="22090" relation="include">
        </childnode>
        <childnode refid="22076" relation="include">
        </childnode>
        <childnode refid="22093" relation="include">
        </childnode>
        <childnode refid="22077" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
        <childnode refid="22086" relation="include">
        </childnode>
      </node>
      <node id="22084">
        <label>log_entry_address.hpp</label>
        <link refid="log__entry__address_8hpp_source"/>
        <childnode refid="22080" relation="include">
        </childnode>
        <childnode refid="22078" relation="include">
        </childnode>
      </node>
      <node id="22099">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="query__params_8cpp_1ae3959b8e91e27b2666be9f9784d3d3c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BW_BEGIN_NAMESPACE regex_t *</type>
        <definition>static BW_BEGIN_NAMESPACE regex_t* reCompile</definition>
        <argsstring>(const char *pattern, bool casesens)</argsstring>
        <name>reCompile</name>
        <param>
          <type>const char *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>casesens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/query_params.cpp" line="17" column="1" bodyfile="tools/message_logger/query_params.cpp" bodystart="17" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;script/first_include.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;query_params.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;constants.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;user_log_reader.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;log_entry.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;types.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mldb/log_reader.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="namespace_b_w___b_e_g_i_n___n_a_m_e_s_p_a_c_e" kindref="compound">BW_BEGIN_NAMESPACE</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>compiling<sp/>regexs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>regex_t<sp/>*reCompile(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pattern,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>casesens<sp/>)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*re<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>regex_t();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reFlags<sp/>=<sp/>REG_NEWLINE<sp/>|<sp/>REG_EXTENDED<sp/>|<sp/>REG_NOSUB<sp/>|<sp/>(casesens<sp/>?<sp/>0<sp/>:<sp/>REG_ICASE);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reError<sp/>=<sp/>regcomp(<sp/>re,<sp/>pattern,<sp/>reFlags<sp/>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reError<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>reErrorBuf[<sp/>256<sp/>];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(<sp/>reError,<sp/>re,<sp/>reErrorBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>reErrorBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_SyntaxError,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>compile<sp/>regex<sp/>&apos;%s&apos;:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern,<sp/>reErrorBuf<sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>re;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="class_query_params_1ada7fa30d27cd26219c2f1ba4b1588175" kindref="member">QueryParams::QueryParams</ref>()<sp/>:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uid_(<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>start_(<sp/>LOG_BEGIN<sp/>),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>end_(<sp/>LOG_END<sp/>),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>ipAddress_(<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>pid_(<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>appid_(<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>procs_(<sp/>-1<sp/>),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>severities_(<sp/>-1<sp/>),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>logSourceTypeFlags_(<sp/>(1<sp/>&lt;&lt;<sp/>NUM_MESSAGE_SOURCE)<sp/>-<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>pInclude_(<sp/>NULL<sp/>),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>pExclude_(<sp/>NULL<sp/>),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>interpolate_(<sp/>PRE_INTERPOLATE<sp/>),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>casesens_(<sp/>true<sp/>),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>direction_(<sp/>QUERY_FORWARDS<sp/>),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>numLinesOfContext_(<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>negateHost_(<sp/>false<sp/>),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>negatePID_(<sp/>false<sp/>),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>negateAppID_(<sp/>false<sp/>),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>isGood_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::initHost(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_log_reader_m_l_d_b" kindref="compound">LogReaderMLDB</ref><sp/>*pLogReader<sp/>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*host)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ipAddress_<sp/>=<sp/>pLogReader-&gt;<ref refid="class_log_reader_m_l_d_b_1a5856bbc80b368f76d72437600c1f2dc7" kindref="member">getAddressFromHost</ref>(<sp/>host<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ipAddress_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*host<sp/>&amp;&amp;<sp/>(ipAddress_<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_LookupError,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Queried<sp/>host<sp/>&apos;%s&apos;<sp/>was<sp/>not<sp/>known<sp/>in<sp/>the<sp/>logs&quot;</highlight><highlight class="normal">,<sp/>host<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::initRegex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*include,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*exclude<sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyErr<sp/>messages<sp/>are<sp/>set<sp/>in<sp/>reCompile<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Regex<sp/>compilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*include)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pInclude_<sp/>=<sp/>reCompile(<sp/>include,<sp/>casesens_<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pInclude_<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*exclude)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pExclude_<sp/>=<sp/>reCompile(<sp/>exclude,<sp/>casesens_<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pExclude_<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::initCategories(<sp/>PyObject<sp/>*<sp/>pCategories,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_log_reader_m_l_d_b" kindref="compound">LogReaderMLDB</ref><sp/>*<sp/>pLogReader<sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pCategories<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PySequence_Check(<sp/>pCategories<sp/>))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>We<sp/>can&apos;t<sp/>use<sp/>the<sp/>correct<sp/>Py_ssize_t<sp/>return<sp/>type<sp/>here<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CentOS<sp/>5<sp/>is<sp/>still<sp/>Python<sp/>2.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tupleSize<sp/>=<sp/>PySequence_Size(<sp/>pCategories<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tupleSize;<sp/>++i)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*<sp/>pCategoryString<sp/>=<sp/>PySequence_GetItem(<sp/>pCategories,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyString_Check(<sp/>pCategoryString<sp/>))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_LookupError,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Category<sp/>at<sp/>element<sp/>%d<sp/>was<sp/>not<sp/>a<sp/>string.\n&quot;</highlight><highlight class="normal">,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(<sp/>pCategoryString<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BW::string<sp/>categoryName<sp/>=<sp/>PyString_AsString(<sp/>pCategoryString<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(<sp/>pCategoryString<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MessageLogger::CategoryID<sp/>categoryID;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCategoryID<sp/>=<sp/>pLogReader-&gt;<ref refid="class_log_reader_m_l_d_b_1a282b88152c307b9f6bfb2917bad196f3" kindref="member">getCategoryIDByName</ref>(<sp/>categoryName,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>categoryID<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasCategoryID)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>categories_.insert(<sp/>categoryID<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::initStartPeriod(<sp/>PyObject<sp/>*startAddr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>startTime,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_smart_pointer" kindref="compound">UserLogReaderPtr</ref><sp/>pUserLog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BW::string<sp/>&amp;period<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>address<sp/>take<sp/>precedences<sp/>over<sp/>start<sp/>time<sp/>if<sp/>both<sp/>are<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startAddr<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!startAddress_.fromPyTuple(<sp/>startAddr<sp/>))</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtain<sp/>the<sp/>start<sp/>time<sp/>here<sp/>to<sp/>ensure<sp/>that<sp/>inference<sp/>of<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>start<sp/>and<sp/>end<sp/>time<sp/>is<sp/>always<sp/>correct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_log_entry" kindref="compound">LogEntry</ref><sp/>entry;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pUserLog-&gt;getEntry(<sp/>startAddress_,<sp/>entry<sp/>))</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_RuntimeError,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>time<sp/>for<sp/>%s&apos;s<sp/>entry<sp/>address<sp/>%s:%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pUserLog-&gt;getUsername().c_str(),</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startAddress_.getSuffix(),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startAddress_.getIndex()<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_<sp/>=<sp/>entry.time();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>path<sp/>should<sp/>be<sp/>used<sp/>only<sp/>if<sp/>searching<sp/>relative<sp/>to<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>period,<sp/>such<sp/>as<sp/>from<sp/>beginning<sp/>of<sp/>log<sp/>forward<sp/>3<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>support<sp/>searching<sp/>backwards<sp/>from<sp/>the<sp/>end<sp/>of<sp/>log,<sp/>so<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>explicitly<sp/>caught<sp/>and<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_<sp/>=<sp/>startTime;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>start<sp/>time<sp/>was<sp/>given<sp/>as<sp/>either<sp/>extremity<sp/>and<sp/>we&apos;re<sp/>using<sp/>a<sp/>fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>period<sp/>(i.e.<sp/>period<sp/>isn&apos;t<sp/>to<sp/>beginning<sp/>or<sp/>present),<sp/>we<sp/>need<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>time<sp/>for<sp/>the<sp/>same<sp/>reason<sp/>as<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>hard<sp/>coded<sp/>&quot;to<sp/>beginning&quot;<sp/>..<sp/>etc<sp/>should<sp/>be<sp/>changed<sp/>to<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(period.size()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>beginning&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>present&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isEqual(<sp/>startTime,<sp/>LOG_BEGIN<sp/>)<sp/>||<sp/>isEqual(<sp/>startTime,<sp/>LOG_END<sp/>)))</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_log_entry" kindref="compound">LogEntry</ref><sp/>entry;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEqual(<sp/>startTime,<sp/>LOG_BEGIN<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!pUserLog-&gt;getFirstLogEntryFromStartOfLogs(<sp/>entry<sp/>))</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_RuntimeError,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>first<sp/>log<sp/>entry<sp/>for<sp/>user<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pUserLog-&gt;getUsername().c_str()<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>only<sp/>used<sp/>by<sp/>LiveOutput<sp/>mode<sp/>in<sp/>LogViewer<sp/>or<sp/>&apos;mlcat<sp/>-f&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEqual(<sp/>startTime,<sp/>LOG_END<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!pUserLog-&gt;getLastLogEntryFromEndOfLogs(<sp/>entry<sp/>))</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_RuntimeError,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>last<sp/>log<sp/>entry<sp/>for<sp/>user<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pUserLog-&gt;getUsername().c_str()<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_<sp/>=<sp/>entry.time();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::initEndPeriod(<sp/>PyObject<sp/>*endAddr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>endTime,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_smart_pointer" kindref="compound">UserLogReaderPtr</ref><sp/>pUserLog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BW::string<sp/>&amp;period<sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>endAddr<sp/>takes<sp/>the<sp/>highest<sp/>priority<sp/>for<sp/>figuring<sp/>out<sp/>the<sp/>endpoint,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>followed<sp/>by<sp/>period,<sp/>and<sp/>then<sp/>by<sp/>end<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endAddr<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!endAddress_.fromPyTuple(<sp/>endAddr<sp/>))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtain<sp/>the<sp/>end<sp/>time<sp/>here<sp/>to<sp/>ensure<sp/>that<sp/>inference<sp/>of<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>start<sp/>and<sp/>end<sp/>time<sp/>is<sp/>always<sp/>correct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_log_entry" kindref="compound">LogEntry</ref><sp/>entry;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pUserLog-&gt;getEntry(<sp/>endAddress_,<sp/>entry<sp/>))</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_RuntimeError,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>determine<sp/>time<sp/>for<sp/>%s&apos;s<sp/>entry<sp/>address<sp/>%s:%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pUserLog-&gt;getUsername().c_str(),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endAddress_.getSuffix(),</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endAddress_.getIndex()<sp/>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_<sp/>=<sp/>entry.time();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(period.size())</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(period<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>beginning&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(period<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>present&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_<sp/>=<sp/>start_.asDouble()<sp/>+<sp/>atof(<sp/>period.c_str()<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((period[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(period[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_<sp/>=<sp/>start_.asDouble()<sp/>-<sp/>atof(<sp/>period.c_str()<sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_<sp/>=<sp/>endTime;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_query_params_1a77be4907ffac3fa1da12fb06023ff0b4" kindref="member">QueryParams::init</ref>(<sp/>PyObject<sp/>*<sp/>args,<sp/>PyObject<sp/>*<sp/>kwargs,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_log_reader_m_l_d_b" kindref="compound">LogReaderMLDB</ref><sp/>*<sp/>pLogReader<sp/>)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kwlist[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;uid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;startaddr&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endaddr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;period&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;host&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;appid&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;procs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;severities&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;exclude&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;interpolate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;casesens&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;direction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;context&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;categories&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;negate_host&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;negate_pid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;negate_appid&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction<sp/>=<sp/>QUERY_FORWARDS;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>LOG_BEGIN;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>LOG_END;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>host<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>include<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>exclude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cperiod<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<sp/>startAddr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<sp/>endAddr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*<sp/>pCategories<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>negateHost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>negatePID<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>negateAppID<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTupleAndKeywords(<sp/>args,<sp/>kwargs,<sp/></highlight><highlight class="stringliteral">&quot;H|ddO!O!ssHHiissibiiiOiii&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;char<sp/>**&gt;(<sp/>kwlist<sp/>),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;uid_,<sp/>&amp;start,<sp/>&amp;end,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;PyTuple_Type,<sp/>&amp;startAddr,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;PyTuple_Type,<sp/>&amp;endAddr,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;cperiod,<sp/>&amp;host,<sp/>&amp;pid_,<sp/>&amp;appid_,<sp/>&amp;procs_,<sp/>&amp;severities_,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;include,<sp/>&amp;exclude,<sp/>&amp;interpolate_,<sp/>&amp;casesens_,<sp/>&amp;direction,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;numLinesOfContext_,<sp/>&amp;logSourceTypeFlags_,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pCategories,<sp/>&amp;negateHost,<sp/>&amp;negatePID,<sp/>&amp;negateAppID<sp/>))</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>set<sp/>PyErr<sp/>here,<sp/>taken<sp/>care<sp/>of<sp/>by<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>negateHost_<sp/><sp/>=<sp/>(negateHost<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>negatePID_<sp/><sp/><sp/>=<sp/>(negatePID<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>negateAppID_<sp/>=<sp/>(negateAppID<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((direction<sp/>!=<sp/>QUERY_FORWARDS)<sp/>&amp;&amp;<sp/>(direction<sp/>!=<sp/>QUERY_BACKWARDS))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_ValueError,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>direction<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>direction<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>direction_<sp/>=<sp/>(SearchDirection)direction;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initHost(<sp/>host,<sp/>pLogReader<sp/>))</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyErr<sp/>is<sp/>set<sp/>in<sp/>initHost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initRegex(<sp/>include,<sp/>exclude<sp/>))</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyErr<sp/>messages<sp/>are<sp/>set<sp/>in<sp/>reCompile<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initCategories(<sp/>pCategories,<sp/>pLogReader<sp/>))</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_smart_pointer" kindref="compound">UserLogReaderPtr</ref><sp/>pUserLog<sp/>=</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="class_log_reader_m_l_d_b" kindref="compound">LogReaderMLDB</ref><sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pLogReader<sp/>)-&gt;<ref refid="class_py_user_log_1aec2c5194765c5cb4882617dde80b4ba9" kindref="member">getUserLog</ref>(<sp/>uid_<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pUserLog<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_LookupError,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;UID<sp/>%d<sp/>doesn&apos;t<sp/>have<sp/>any<sp/>entries<sp/>in<sp/>this<sp/>log&quot;</highlight><highlight class="normal">,<sp/>uid_<sp/>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>user&apos;s<sp/>log<sp/>has<sp/>no<sp/>segments<sp/>(i.e.<sp/>they<sp/>have<sp/>been<sp/>rolled<sp/>away)<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bail<sp/>out<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pUserLog-&gt;hasActiveSegments())</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARNING_MSG(<sp/></highlight><highlight class="stringliteral">&quot;QueryParams::init:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&apos;s<sp/>log<sp/>has<sp/>no<sp/>segments,<sp/>they<sp/>may<sp/>have<sp/>been<sp/>rolled\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pUserLog-&gt;getUsername().c_str()<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGood_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isGood_;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>BW::string<sp/>period<sp/>=<sp/>cperiod;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initStartPeriod(<sp/>startAddr,<sp/>start,<sp/>pUserLog,<sp/>period<sp/>))</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyErr<sp/>set<sp/>in<sp/>initStartPeriod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initEndPeriod(<sp/>endAddr,<sp/>end,<sp/>pUserLog,<sp/>period<sp/>))</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PyErr<sp/>set<sp/>in<sp/>initEndPeriod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-order<sp/>times<sp/>if<sp/>passed<sp/>in<sp/>reverse<sp/>order.<sp/><sp/>TODO:<sp/>Actually<sp/>verify<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>segment<sp/>numbers<sp/>are<sp/>in<sp/>order<sp/>instead<sp/>of<sp/>using<sp/>lex<sp/>cmp<sp/>on<sp/>suffixes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasValidTimes<sp/>=<sp/>(end_<sp/>&lt;<sp/>start_);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasValidAddresses<sp/>=<sp/>startAddress_.isValid()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endAddress_.isValid()<sp/>&amp;&amp;<sp/>endAddress_<sp/>&lt;<sp/>startAddress_;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasValidTimes<sp/>||<sp/>hasValidAddresses)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_log_time" kindref="compound">LogTime</ref><sp/>lt<sp/>=<sp/>end_;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_<sp/>=<sp/>start_;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_<sp/>=<sp/>lt;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_log_entry_address_reader" kindref="compound">LogEntryAddressReader</ref><sp/>ea<sp/>=<sp/>endAddress_;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endAddress_<sp/>=<sp/>startAddress_;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startAddress_<sp/>=<sp/>ea;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reverse<sp/>the<sp/>direction<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//direction_<sp/>*=<sp/>-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction_<sp/>=<sp/>(direction_<sp/>==<sp/>QUERY_FORWARDS)<sp/>?</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QUERY_BACKWARDS<sp/>:<sp/>QUERY_FORWARDS;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_<sp/>&gt;<sp/>end_)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(<sp/>PyExc_RuntimeError,<sp/></highlight><highlight class="stringliteral">&quot;QueryParams::init:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>time<sp/>(%ld.%d)<sp/>is<sp/>greater<sp/>than<sp/>end<sp/>time<sp/>(%ld.%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LogTime::Seconds)start_.secs_,<sp/>start_.msecs_,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LogTime::Seconds)end_.secs_,<sp/>end_.msecs_<sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isGood_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isGood_;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">QueryParams::~QueryParams()</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pInclude_<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regfree(<sp/>pInclude_<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pInclude_;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pExclude_<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regfree(<sp/>pExclude_<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pExclude_;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">uint16<sp/>QueryParams::getUID()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="488"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uid_;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>QueryParams::setUID(<sp/>uint16<sp/>uid<sp/>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>uid_<sp/>=<sp/>uid;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><ref refid="class_log_time" kindref="compound">LogTime</ref><sp/>QueryParams::getStartTime()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="500"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start_;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="class_log_time" kindref="compound">LogTime</ref><sp/>QueryParams::getEndTime()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="506"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end_;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><ref refid="class_log_entry_address_reader" kindref="compound">LogEntryAddressReader</ref><sp/>QueryParams::getStartAddress()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="512"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startAddress_;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><ref refid="class_log_entry_address_reader" kindref="compound">LogEntryAddressReader</ref><sp/>QueryParams::getEndAddress()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="518"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>endAddress_;</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">SearchDirection<sp/>QueryParams::getDirection()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="524"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>direction_;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QueryParams::getNumLinesOfContext()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="530"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numLinesOfContext_;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::isPreInterpolate()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="536"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(interpolate_<sp/>==<sp/>PRE_INTERPOLATE);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::isPostInterpolate()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="542"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(interpolate_<sp/>==<sp/>POST_INTERPOLATE);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_query_params_1a1e1a562c171b7c88294ea7d3f24b91d5" kindref="member">QueryParams::validateAddress</ref>(<sp/>MessageLogger::IPAddress<sp/>ipAddress<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="554"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>address<sp/>has<sp/>been<sp/>specific<sp/>then<sp/>we<sp/>can<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ipAddress_)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>negateHost_<sp/>?<sp/>(ipAddress_<sp/>!=<sp/>ipAddress)<sp/>:<sp/>(ipAddress_<sp/>==<sp/>ipAddress);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validatePID(<sp/>uint16<sp/>pid<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="566"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pid_)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>negatePID_<sp/>?<sp/>(pid_<sp/>!=<sp/>pid)<sp/>:<sp/>(pid_<sp/>==<sp/>pid);</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validateAppID(<sp/>MessageLogger::AppInstanceID<sp/>appid<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="577"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!appid_)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>negateAppID_<sp/>?<sp/>(appid_<sp/>!=<sp/>appid)<sp/>:<sp/>(appid_<sp/>==<sp/>appid);</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validateProcessType(</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageLogger::AppTypeID<sp/>appTypeID<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="589"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(procs_<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(procs_<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>appTypeID));</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validateMessagePriority(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="600"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(severities_<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(severities_<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>priority));</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validateIncludeRegex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*searchStr<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="611"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pInclude_<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(regexec(<sp/>pInclude_,<sp/>searchStr,<sp/>0,<sp/>NULL,<sp/>0<sp/>)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validateExcludeRegex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*searchStr<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="622"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pExclude_<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(regexec(<sp/>pExclude_,<sp/>searchStr,<sp/>0,<sp/>NULL,<sp/>0<sp/>)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validateLogMessageType(</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugMessageSource<sp/>messageSource<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="634"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(logSourceTypeFlags_<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>messageSource));</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryParams::validateCategory(<sp/>MessageLogger::CategoryID<sp/>categoryID<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="640"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(categories_.empty())</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(categories_.find(<sp/>categoryID<sp/>)<sp/>!=<sp/>categories_.end());</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal">BW_END_NAMESPACE</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>query_params.cpp</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tools/message_logger/query_params.cpp"/>
  </compounddef>
</doxygen>
