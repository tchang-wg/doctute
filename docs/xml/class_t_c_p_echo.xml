<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_t_c_p_echo" kind="class" language="C++" prot="public">
    <compoundname>TCPEcho</compoundname>
    <basecompoundref prot="public" virt="non-virtual">InputNotificationHandler</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_t_c_p_echo_1ae64b08033108da5f598bfd88b66ad460" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TCPEcho::readyToWrite_</definition>
        <argsstring></argsstring>
        <name>readyToWrite_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="174" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_c_p_echo_1a8c949cbb1f885a59427a975b0b9eb166" prot="private" static="no" mutable="no">
        <type>Endpoint</type>
        <definition>Endpoint TCPEcho::endpoint_</definition>
        <argsstring></argsstring>
        <name>endpoint_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="175" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_c_p_echo_1a30a067a17c53950d4fbb529672aa5d65" prot="private" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string TCPEcho::msg_</definition>
        <argsstring></argsstring>
        <name>msg_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="176" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_c_p_echo_1aec1736e7acad0d013cb1881dddd270ae" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* TCPEcho::pRecieveBuf_</definition>
        <argsstring></argsstring>
        <name>pRecieveBuf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="177" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_c_p_echo_1a558e4e16fadfd7ed11248e94e02c5e87" prot="private" static="no" mutable="no">
        <type>uint</type>
        <definition>uint TCPEcho::numReceived_</definition>
        <argsstring></argsstring>
        <name>numReceived_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="178" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_c_p_echo_1a9b4d39b730edce2cbc62a034d491d007" prot="private" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">PyObjectPtr</ref></type>
        <definition>PyObjectPtr TCPEcho::pCallback_</definition>
        <argsstring></argsstring>
        <name>pCallback_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="179" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_t_c_p_echo_1a788533b84c80fb9af611d69640d7d2d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TCPEcho::TCPEcho</definition>
        <argsstring>()</argsstring>
        <name>TCPEcho</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="52" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_t_c_p_echo_1a2636a58123c987b4a0eba765655239b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual TCPEcho::~TCPEcho</definition>
        <argsstring>()</argsstring>
        <name>~TCPEcho</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="58" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_t_c_p_echo_1acc11494228de07a29d811114c23c6398" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void TCPEcho::init</definition>
        <argsstring>(const BW::string &amp;ip, uint16 port, const BW::string &amp;msg, PyObjectPtr pCallback)</argsstring>
        <name>init</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>uint16</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="class_smart_pointer" kindref="compound">PyObjectPtr</ref></type>
          <declname>pCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="63" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="63" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_t_c_p_echo_1a43fe7007e0eb293e4f6f3baf149d9cee" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int TCPEcho::handleInputNotification</definition>
        <argsstring>(int fd)</argsstring>
        <name>handleInputNotification</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="88" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="88" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_t_c_p_echo_1aa54f837e6c177554948bdd7011327a6c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void TCPEcho::doCallback</definition>
        <argsstring>(bool isError, const BW::string &amp;msg)</argsstring>
        <name>doCallback</name>
        <param>
          <type>bool</type>
          <declname>isError</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/eg_tcpecho.cpp" line="153" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="153" bodyend="171"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This file contains an example of how to do non-blocking socket I/O using Mercury. To see this example in action:<orderedlist>
<listitem><para>Add this file into baseapp&apos;s Makefile and rebuild baseapp.</para></listitem><listitem><para>Start the server.</para></listitem><listitem><para>Start the eg_tcpechoserver.py TCP server.</para></listitem><listitem><para>Telnet to baseapp&apos;s Python console and run &quot;BigWorld.tcpEcho( &amp;lt;ip_addr&amp;gt;, &amp;lt;port&amp;gt;, &amp;lt;message&amp;gt;[, &lt;callback&gt;] )&quot;, where the &lt;ip_addr&gt; and &lt;port&gt; is the IP address and port of the TCP server and &lt;message&gt; is a message you want to send to the server. e.g. BigWorld.tcpEcho( &quot;10.40.3.37&quot;, 9999, &quot;Hello World!&quot; ) You can also optionally specify a callback to be called when we receive the response from the server. The callback should take two parameters: isError, message. When isError is true, then the message is an error message. When isError is false, then the message is the response from the server. The code in this example will open a connection to the TCP server. Wait for the connection to establish. Send the message to the TCP server. Wait for the response and print out the response. This example shows how it is possible to wait without blocking.</para></listitem></orderedlist>
</para><para>Although this code is currently specific to baseapp, it can be easily adapted to work in other server components. The dependency on baseapp is mainly because of the need to access the global Mercury::NetworkInterface The way to access this global is similar but not identical on all server components. This class is a simple example of how to use registerFileDescriptor and registerWriteFileDescriptor. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2898">
        <label>TCPEcho</label>
        <link refid="class_t_c_p_echo"/>
        <childnode refid="2899" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2899">
        <label>InputNotificationHandler</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2900">
        <label>TCPEcho</label>
        <link refid="class_t_c_p_echo"/>
        <childnode refid="2901" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2901">
        <label>InputNotificationHandler</label>
      </node>
    </collaborationgraph>
    <location file="baseapp/eg_tcpecho.cpp" line="50" column="1" bodyfile="baseapp/eg_tcpecho.cpp" bodystart="49" bodyend="180"/>
    <listofallmembers>
      <member refid="class_t_c_p_echo_1aa54f837e6c177554948bdd7011327a6c" prot="protected" virt="non-virtual"><scope>TCPEcho</scope><name>doCallback</name></member>
      <member refid="class_t_c_p_echo_1a8c949cbb1f885a59427a975b0b9eb166" prot="private" virt="non-virtual"><scope>TCPEcho</scope><name>endpoint_</name></member>
      <member refid="class_t_c_p_echo_1a43fe7007e0eb293e4f6f3baf149d9cee" prot="protected" virt="virtual"><scope>TCPEcho</scope><name>handleInputNotification</name></member>
      <member refid="class_t_c_p_echo_1acc11494228de07a29d811114c23c6398" prot="public" virt="non-virtual"><scope>TCPEcho</scope><name>init</name></member>
      <member refid="class_t_c_p_echo_1a30a067a17c53950d4fbb529672aa5d65" prot="private" virt="non-virtual"><scope>TCPEcho</scope><name>msg_</name></member>
      <member refid="class_t_c_p_echo_1a558e4e16fadfd7ed11248e94e02c5e87" prot="private" virt="non-virtual"><scope>TCPEcho</scope><name>numReceived_</name></member>
      <member refid="class_t_c_p_echo_1a9b4d39b730edce2cbc62a034d491d007" prot="private" virt="non-virtual"><scope>TCPEcho</scope><name>pCallback_</name></member>
      <member refid="class_t_c_p_echo_1aec1736e7acad0d013cb1881dddd270ae" prot="private" virt="non-virtual"><scope>TCPEcho</scope><name>pRecieveBuf_</name></member>
      <member refid="class_t_c_p_echo_1ae64b08033108da5f598bfd88b66ad460" prot="private" virt="non-virtual"><scope>TCPEcho</scope><name>readyToWrite_</name></member>
      <member refid="class_t_c_p_echo_1a788533b84c80fb9af611d69640d7d2d8" prot="public" virt="non-virtual"><scope>TCPEcho</scope><name>TCPEcho</name></member>
      <member refid="class_t_c_p_echo_1a2636a58123c987b4a0eba765655239b1" prot="public" virt="virtual"><scope>TCPEcho</scope><name>~TCPEcho</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
