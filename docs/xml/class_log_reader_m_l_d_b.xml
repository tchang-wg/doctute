<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_log_reader_m_l_d_b" kind="class" language="C++" prot="public">
    <compoundname>LogReaderMLDB</compoundname>
    <basecompoundref refid="class_log_common_m_l_d_b" prot="public" virt="non-virtual">LogCommonMLDB</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_log_reader_m_l_d_b_1aa1582c0a8870f41be0b525edb61e142f" prot="private" static="no" mutable="no">
        <type>UsernamesMap</type>
        <definition>UsernamesMap LogReaderMLDB::usernames_</definition>
        <argsstring></argsstring>
        <name>usernames_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="46" column="1" bodyfile="tools/message_logger/mldb/log_reader.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_log_reader_m_l_d_b_1a3057fb530b0f0eaed482645822992261" prot="private" static="no" mutable="no">
        <type>UserLogs</type>
        <definition>UserLogs LogReaderMLDB::userLogs_</definition>
        <argsstring></argsstring>
        <name>userLogs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="51" column="1" bodyfile="tools/message_logger/mldb/log_reader.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a09118c2f33c8b1ff5c6febd6750b0054" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>LogReaderMLDB::~LogReaderMLDB</definition>
        <argsstring>()</argsstring>
        <name>~LogReaderMLDB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="21" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a0e581f6faa46cc365227b1337dc699d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogReaderMLDB::init</definition>
        <argsstring>(const char *root)</argsstring>
        <name>init</name>
        <param>
          <type>const char *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialises the <ref refid="class_log_reader_m_l_d_b" kindref="compound">LogReaderMLDB</ref> instance for use.</para><para><simplesect kind="return"><para>true on successful initialisation, false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="23" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="69" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a001cad7a3d3886e7707e2791bbd6abb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool LogReaderMLDB::onUserLogInit</definition>
        <argsstring>(uint16 uid, const BW::string &amp;username)</argsstring>
        <name>onUserLogInit</name>
        <reimplements refid="class_log_common_m_l_d_b_1a2b283a9686b43f57bf51e8a89633a2b4">onUserLogInit</reimplements>
        <param>
          <type>uint16</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>username</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback method invoked from <ref refid="class_log_common_m_l_d_b" kindref="compound">LogCommonMLDB</ref> during <ref refid="class_log_common_m_l_d_b_1a6f27811a0eec932201f4ecf330ed9690" kindref="member">initUserLogs()</ref>.</para><para>This method updates the map of UID -&gt; username with the current entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="24" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a6f02b5df17322147f68bdf2e2c460fe2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * LogReaderMLDB::getLogDirectory</definition>
        <argsstring>() const </argsstring>
        <name>getLogDirectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the full path to the logs being reference by this <ref refid="class_log_reader_m_l_d_b" kindref="compound">LogReaderMLDB</ref>.</para><para><simplesect kind="return"><para>Absolute path of the log directory being used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="27" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a0c5ea19b1db3ff5ffa7caf58afc8c3de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogReaderMLDB::getCategoryNames</definition>
        <argsstring>(CategoriesVisitor &amp;visitor) const </argsstring>
        <name>getCategoryNames</name>
        <param>
          <type><ref refid="class_categories_visitor" kindref="compound">CategoriesVisitor</ref> &amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the category names of all registered categories calling visitor for each category.</para><para><simplesect kind="return"><para>true on success, false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="28" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a81c85773b9c46a7cc5ba5bd94f09b8dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogReaderMLDB::getComponentNames</definition>
        <argsstring>(LogComponentsVisitor &amp;visitor) const </argsstring>
        <name>getComponentNames</name>
        <param>
          <type><ref refid="class_log_components_visitor" kindref="compound">LogComponentsVisitor</ref> &amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the component names of all logging components calling visitor for each component.</para><para><simplesect kind="return"><para>true on success, false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="29" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1ab23eda186af3ca86aa81a80995ecf512" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogReaderMLDB::getHostnames</definition>
        <argsstring>(HostnameVisitor &amp;visitor) const </argsstring>
        <name>getHostnames</name>
        <param>
          <type><ref refid="class_hostname_visitor" kindref="compound">HostnameVisitor</ref> &amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the network address and hostname of each known machine in the logs, calling visitor for each known host.</para><para><simplesect kind="return"><para>true on success, false on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="30" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a9791675fefcb70b1414e5b18ec59c07e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FormatStringList</type>
        <definition>FormatStringList LogReaderMLDB::getFormatStrings</definition>
        <argsstring>() const </argsstring>
        <name>getFormatStrings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all known format strings in the log directory.</para><para><simplesect kind="return"><para>An BW::vector of BW::strings. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="31" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1abc739b4e3717d2537357db9f15cab090" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const UsernamesMap &amp;</type>
        <definition>const UsernamesMap &amp; LogReaderMLDB::getUsernames</definition>
        <argsstring>() const </argsstring>
        <name>getUsernames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a dictionary of usernames and UIDs of all users seen in the logs.</para><para><simplesect kind="return"><para>BW::map of unix UID as uint16 and unix username as an BW::string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="32" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1ac7d5bd6fb14c2a0c394537717d3d247c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_smart_pointer" kindref="compound">UserLogReaderPtr</ref></type>
        <definition>UserLogReaderPtr LogReaderMLDB::getUserLog</definition>
        <argsstring>(uint16 uid)</argsstring>
        <name>getUserLog</name>
        <param>
          <type>uint16</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a <ref refid="class_user_log" kindref="compound">UserLog</ref> for the specified unix UID.</para><para>If a <ref refid="class_user_log" kindref="compound">UserLog</ref> already exists for this user it is returned, otherwise it will be created and loaded.</para><para><simplesect kind="return"><para>A <ref refid="class_smart_pointer" kindref="compound">SmartPointer</ref> to a <ref refid="class_user_log_reader" kindref="compound">UserLogReader</ref> on success, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="34" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="196" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a282b88152c307b9f6bfb2917bad196f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogReaderMLDB::getCategoryIDByName</definition>
        <argsstring>(const BW::string &amp;categoryName, MessageLogger::CategoryID &amp;categoryID) const </argsstring>
        <name>getCategoryIDByName</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>categoryName</declname>
        </param>
        <param>
          <type>MessageLogger::CategoryID &amp;</type>
          <declname>categoryID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method obtains the ID associated with a categoryName (if one exists).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>categoryName</parametername>
</parameternamelist>
<parameterdescription>
<para>The category name to find an ID mapping for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>categoryID</parametername>
</parameternamelist>
<parameterdescription>
<para>The category ID that maps to the provided name. Only modified if this method returns true.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a category name to ID mapping exists, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="36" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a5856bbc80b368f76d72437600c1f2dc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 LogReaderMLDB::getAddressFromHost</definition>
        <argsstring>(const char *hostname) const </argsstring>
        <name>getAddressFromHost</name>
        <param>
          <type>const char *</type>
          <declname>hostname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains the IP address associated with the provided hostname.</para><para><simplesect kind="return"><para>The IP address of the requested host on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="39" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1a263e495c08bba247e9990ddc0edb95eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
        <definition>const LogStringInterpolator * LogReaderMLDB::getHandlerForLogEntry</definition>
        <argsstring>(const LogEntry &amp;entry)</argsstring>
        <name>getHandlerForLogEntry</name>
        <param>
          <type>const <ref refid="class_log_entry" kindref="compound">LogEntry</ref> &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a handler for the requested log entry, to allow presentation.</para><para><simplesect kind="return"><para>A pointer to a log handler on success, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="41" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="254" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_log_reader_m_l_d_b_1afdcd42eaea60b656db7c9ab661e3eeb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogReaderMLDB::refreshFileMaps</definition>
        <argsstring>()</argsstring>
        <name>refreshFileMaps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refreshes the main log files if they are being written to and have been modified since we last looked at them.</para><para><simplesect kind="return"><para>true on success, false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/mldb/log_reader.hpp" line="43" column="1" bodyfile="tools/message_logger/mldb/log_reader.cpp" bodystart="267" bodyend="308"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1766">
        <label>LogReaderMLDB</label>
        <link refid="class_log_reader_m_l_d_b"/>
        <childnode refid="1767" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1767">
        <label>LogCommonMLDB</label>
        <link refid="class_log_common_m_l_d_b"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1774">
        <label>BinaryFileHandler</label>
        <link refid="class_binary_file_handler"/>
        <childnode refid="1772" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1768">
        <label>LogReaderMLDB</label>
        <link refid="class_log_reader_m_l_d_b"/>
        <childnode refid="1769" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1772">
        <label>FileHandler</label>
        <link refid="class_file_handler"/>
      </node>
      <node id="1778">
        <label>LogComponentNamesMLDB</label>
        <link refid="class_log_component_names_m_l_d_b"/>
        <childnode refid="1771" relation="public-inheritance">
        </childnode>
        <childnode refid="1779" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1775">
        <label>Categories</label>
        <link refid="class_categories"/>
      </node>
      <node id="1780">
        <label>HostnamesMLDB</label>
        <link refid="class_hostnames_m_l_d_b"/>
        <childnode refid="1771" relation="public-inheritance">
        </childnode>
        <childnode refid="1781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1773">
        <label>CategoriesMLDB</label>
        <link refid="class_categories_m_l_d_b"/>
        <childnode refid="1774" relation="public-inheritance">
        </childnode>
        <childnode refid="1775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1781">
        <label>Hostnames</label>
        <link refid="class_hostnames"/>
      </node>
      <node id="1779">
        <label>LogComponentNames</label>
        <link refid="class_log_component_names"/>
      </node>
      <node id="1776">
        <label>FormatStringsMLDB</label>
        <link refid="class_format_strings_m_l_d_b"/>
        <childnode refid="1774" relation="public-inheritance">
        </childnode>
        <childnode refid="1777" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1771">
        <label>TextFileHandler</label>
        <link refid="class_text_file_handler"/>
        <childnode refid="1772" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1770">
        <label>UnaryIntegerFile</label>
        <link refid="class_unary_integer_file"/>
        <childnode refid="1771" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1777">
        <label>FormatStrings</label>
        <link refid="class_format_strings"/>
      </node>
      <node id="1769">
        <label>LogCommonMLDB</label>
        <link refid="class_log_common_m_l_d_b"/>
        <childnode refid="1770" relation="usage">
          <edgelabel>version_</edgelabel>
        </childnode>
        <childnode refid="1773" relation="usage">
          <edgelabel>categories_</edgelabel>
        </childnode>
        <childnode refid="1776" relation="usage">
          <edgelabel>formatStrings_</edgelabel>
        </childnode>
        <childnode refid="1778" relation="usage">
          <edgelabel>componentNames_</edgelabel>
        </childnode>
        <childnode refid="1780" relation="usage">
          <edgelabel>hostnames_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="tools/message_logger/mldb/log_reader.hpp" line="18" column="1" bodyfile="tools/message_logger/mldb/log_reader.hpp" bodystart="17" bodyend="52"/>
    <listofallmembers>
      <member refid="class_log_common_m_l_d_b_1a3101fe06a39282df32d2a5dbf400999c" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>categories_</name></member>
      <member refid="class_log_common_m_l_d_b_1a909c6d9b45e6ab3782b92b5dc05e4324" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>componentNames_</name></member>
      <member refid="class_log_common_m_l_d_b_1af34b8d5422491268aa1b7d16647d52da" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>formatStrings_</name></member>
      <member refid="class_log_reader_m_l_d_b_1a5856bbc80b368f76d72437600c1f2dc7" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getAddressFromHost</name></member>
      <member refid="class_log_reader_m_l_d_b_1a282b88152c307b9f6bfb2917bad196f3" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getCategoryIDByName</name></member>
      <member refid="class_log_common_m_l_d_b_1a6d1995294bcc7a2f3608e50662df8cc8" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getCategoryNameByID</name></member>
      <member refid="class_log_reader_m_l_d_b_1a0c5ea19b1db3ff5ffa7caf58afc8c3de" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getCategoryNames</name></member>
      <member refid="class_log_common_m_l_d_b_1a8702d9d9cd80a17610d824d67cb476ca" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getComponentNameByAppTypeID</name></member>
      <member refid="class_log_reader_m_l_d_b_1a81c85773b9c46a7cc5ba5bd94f09b8dc" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getComponentNames</name></member>
      <member refid="class_log_reader_m_l_d_b_1a9791675fefcb70b1414e5b18ec59c07e" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getFormatStrings</name></member>
      <member refid="class_log_reader_m_l_d_b_1a263e495c08bba247e9990ddc0edb95eb" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getHandlerForLogEntry</name></member>
      <member refid="class_log_common_m_l_d_b_1a11206fae2bcf2ceba6c4732fa1c15b9c" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getHostByAddr</name></member>
      <member refid="class_log_reader_m_l_d_b_1ab23eda186af3ca86aa81a80995ecf512" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getHostnames</name></member>
      <member refid="class_log_reader_m_l_d_b_1a6f02b5df17322147f68bdf2e2c460fe2" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getLogDirectory</name></member>
      <member refid="class_log_reader_m_l_d_b_1ac7d5bd6fb14c2a0c394537717d3d247c" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getUserLog</name></member>
      <member refid="class_log_reader_m_l_d_b_1abc739b4e3717d2537357db9f15cab090" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>getUsernames</name></member>
      <member refid="class_log_common_m_l_d_b_1a9958da2ca28ec0286dbaee93e3b86e40" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>hostnames_</name></member>
      <member refid="class_log_reader_m_l_d_b_1a0e581f6faa46cc365227b1337dc699d1" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>init</name></member>
      <member refid="class_log_common_m_l_d_b_1a3d36734cc0960dcf92a86225e3e398f6" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>initCommonFiles</name></member>
      <member refid="class_log_common_m_l_d_b_1a4eac8e2af77ce51e732b424df5b825aa" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>initRootLogPath</name></member>
      <member refid="class_log_common_m_l_d_b_1a6f27811a0eec932201f4ecf330ed9690" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>initUserLogs</name></member>
      <member refid="class_log_reader_m_l_d_b_1a001cad7a3d3886e7707e2791bbd6abb9" prot="public" virt="virtual"><scope>LogReaderMLDB</scope><name>onUserLogInit</name></member>
      <member refid="class_log_reader_m_l_d_b_1afdcd42eaea60b656db7c9ab661e3eeb9" prot="public" virt="non-virtual"><scope>LogReaderMLDB</scope><name>refreshFileMaps</name></member>
      <member refid="class_log_common_m_l_d_b_1a38e69d0bf927a795a4b0e0b7f802818a" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>rootLogPath_</name></member>
      <member refid="class_log_reader_m_l_d_b_1a3057fb530b0f0eaed482645822992261" prot="private" virt="non-virtual"><scope>LogReaderMLDB</scope><name>userLogs_</name></member>
      <member refid="class_log_reader_m_l_d_b_1aa1582c0a8870f41be0b525edb61e142f" prot="private" virt="non-virtual"><scope>LogReaderMLDB</scope><name>usernames_</name></member>
      <member refid="class_log_common_m_l_d_b_1a25692c20371e4b4d216c1f64baf496dd" prot="protected" virt="non-virtual"><scope>LogReaderMLDB</scope><name>version_</name></member>
      <member refid="class_log_common_m_l_d_b_1a5223cb78e65be90365767917e850c00e" prot="public" virt="virtual"><scope>LogReaderMLDB</scope><name>~LogCommonMLDB</name></member>
      <member refid="class_log_reader_m_l_d_b_1a09118c2f33c8b1ff5c6febd6750b0054" prot="public" virt="virtual"><scope>LogReaderMLDB</scope><name>~LogReaderMLDB</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
