<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_mock_file_provider" kind="class" language="C++" prot="public">
    <compoundname>MockFileProvider</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IFileProvider</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_mock_file_provider_1af3c6b599e38bf41dc0bc5faadc4d15b3" prot="private" static="no" mutable="no">
        <type>MemoryOStream</type>
        <definition>MemoryOStream MockFileProvider::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1522" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mock_file_provider_1ae2e9448919271b4b9e1cf7e855eb313d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MockFileProvider::isOpen_</definition>
        <argsstring></argsstring>
        <name>isOpen_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1524" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mock_file_provider_1a38eaff830b661e4662c6e17b9ffa5123" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MockFileProvider::didLeakFileHandle_</definition>
        <argsstring></argsstring>
        <name>didLeakFileHandle_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1525" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1525" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_mock_file_provider_1a2050db00ceec309f5a060b6ab4a9aa83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MockFileProvider::MockFileProvider</definition>
        <argsstring>(BinaryIStream &amp;data)</argsstring>
        <name>MockFileProvider</name>
        <param>
          <type>BinaryIStream &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to use as the mock file data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1448" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1448" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1a41025ececdcba0ee2f0e1289cb875ad9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual MockFileProvider::~MockFileProvider</definition>
        <argsstring>()</argsstring>
        <name>~MockFileProvider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1456" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1456" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1ad2967bbf3baea82f426191d1b14068d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MockFileProvider::isOpen</definition>
        <argsstring>() const </argsstring>
        <name>isOpen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1459" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1459" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1ac3678eb8401812d7c2d3c7ac93f265e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MockFileProvider::didLeakFileHandle</definition>
        <argsstring>() const </argsstring>
        <name>didLeakFileHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1460" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1460" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1acfb4b4ac561094bfa46ac29550e7418d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool MockFileProvider::FOpen</definition>
        <argsstring>(const char *path, const char *mode)</argsstring>
        <name>FOpen</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1463" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1463" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1ab5559a2fd28fbff400fe7aa5c7255d0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void MockFileProvider::FClose</definition>
        <argsstring>()</argsstring>
        <name>FClose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1478" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1478" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1a258e2303d35f49f6daa3551fcf7b30e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t MockFileProvider::FRead</definition>
        <argsstring>(char *buffer, size_t memberSize, size_t numMembers)</argsstring>
        <name>FRead</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memberSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numMembers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1485" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1485" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1a6ddb825d9311085b6b594c5ccd3b5e50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int MockFileProvider::FError</definition>
        <argsstring>()</argsstring>
        <name>FError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1501" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1501" bodyend="1505"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1a14604e9d10d5143e95710ca1c37b7a2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int MockFileProvider::FEOF</definition>
        <argsstring>()</argsstring>
        <name>FEOF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1509" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1509" bodyend="1512"/>
      </memberdef>
      <memberdef kind="function" id="class_mock_file_provider_1a0701977593ce8cda7aa2bb5202280a6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void MockFileProvider::ClearErr</definition>
        <argsstring>()</argsstring>
        <name>ClearErr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="baseapp/unit_test/test_recording.cpp" line="1516" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1516" bodyend="1519"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class mocks a file provider to provide file API to an in-memory buffer. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1931">
        <label>MockFileProvider</label>
        <link refid="class_mock_file_provider"/>
        <childnode refid="1932" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1932">
        <label>IFileProvider</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1933">
        <label>MockFileProvider</label>
        <link refid="class_mock_file_provider"/>
        <childnode refid="1934" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1934">
        <label>IFileProvider</label>
      </node>
    </collaborationgraph>
    <location file="baseapp/unit_test/test_recording.cpp" line="1441" column="1" bodyfile="baseapp/unit_test/test_recording.cpp" bodystart="1440" bodyend="1526"/>
    <listofallmembers>
      <member refid="class_mock_file_provider_1a0701977593ce8cda7aa2bb5202280a6a" prot="public" virt="virtual"><scope>MockFileProvider</scope><name>ClearErr</name></member>
      <member refid="class_mock_file_provider_1af3c6b599e38bf41dc0bc5faadc4d15b3" prot="private" virt="non-virtual"><scope>MockFileProvider</scope><name>data_</name></member>
      <member refid="class_mock_file_provider_1ac3678eb8401812d7c2d3c7ac93f265e5" prot="public" virt="non-virtual"><scope>MockFileProvider</scope><name>didLeakFileHandle</name></member>
      <member refid="class_mock_file_provider_1a38eaff830b661e4662c6e17b9ffa5123" prot="private" virt="non-virtual"><scope>MockFileProvider</scope><name>didLeakFileHandle_</name></member>
      <member refid="class_mock_file_provider_1ab5559a2fd28fbff400fe7aa5c7255d0f" prot="public" virt="virtual"><scope>MockFileProvider</scope><name>FClose</name></member>
      <member refid="class_mock_file_provider_1a14604e9d10d5143e95710ca1c37b7a2d" prot="public" virt="virtual"><scope>MockFileProvider</scope><name>FEOF</name></member>
      <member refid="class_mock_file_provider_1a6ddb825d9311085b6b594c5ccd3b5e50" prot="public" virt="virtual"><scope>MockFileProvider</scope><name>FError</name></member>
      <member refid="class_mock_file_provider_1acfb4b4ac561094bfa46ac29550e7418d" prot="public" virt="virtual"><scope>MockFileProvider</scope><name>FOpen</name></member>
      <member refid="class_mock_file_provider_1a258e2303d35f49f6daa3551fcf7b30e2" prot="public" virt="virtual"><scope>MockFileProvider</scope><name>FRead</name></member>
      <member refid="class_mock_file_provider_1ad2967bbf3baea82f426191d1b14068d2" prot="public" virt="non-virtual"><scope>MockFileProvider</scope><name>isOpen</name></member>
      <member refid="class_mock_file_provider_1ae2e9448919271b4b9e1cf7e855eb313d" prot="private" virt="non-virtual"><scope>MockFileProvider</scope><name>isOpen_</name></member>
      <member refid="class_mock_file_provider_1a2050db00ceec309f5a060b6ab4a9aa83" prot="public" virt="non-virtual"><scope>MockFileProvider</scope><name>MockFileProvider</name></member>
      <member refid="class_mock_file_provider_1a41025ececdcba0ee2f0e1289cb875ad9" prot="public" virt="virtual"><scope>MockFileProvider</scope><name>~MockFileProvider</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
