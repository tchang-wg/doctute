<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_http_request" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>HttpRequest</compoundname>
    <derivedcompoundref refid="class_spa_request" prot="public" virt="non-virtual">SpaRequest</derivedcompoundref>
    <includes refid="http__request_8hpp" local="no">http_request.hpp</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="enum" id="class_http_request_1a816b8df1a1e7e638992c582ffe781473" prot="protected" static="no">
        <name>HttpVerb</name>
        <enumvalue id="class_http_request_1a816b8df1a1e7e638992c582ffe781473a99e44f5e93ff98c3a774cd47599fa175" prot="protected">
          <name>GET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_http_request_1a816b8df1a1e7e638992c582ffe781473aaa3e5faf15649b28b1e774c3decde5b7" prot="protected">
          <name>POST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HTTP verb:</para><para>GET requests pass query parameters in request string, which gets logged by some servers (certainly not good for sensitive data), and can easily break the limit URI length (which is 4K octets on most servers). Nice for debug.</para><para>POST requests pass query parameters in request body. GET no more take place. Nice choice for production queries. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="85" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="84" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_http_request_1a3880d8f2f310d73d00cf029b5a8871d2" prot="public" static="no">
        <type>BW::multimap&lt; BW::string, BW::string &gt;</type>
        <definition>typedef BW::multimap&lt; BW::string, BW::string &gt; HttpRequest::NameValueStore</definition>
        <argsstring></argsstring>
        <name>NameValueStore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="28" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_http_request_1a65210f7b7eee058633183eb4537c6c6d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HttpPipeline</definition>
        <argsstring></argsstring>
        <name>HttpPipeline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="24" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_http_request_1a11bada1f8ab4fa4a289269ea651aa3e1" prot="protected" static="no" mutable="no">
        <type>enum <ref refid="class_http_request_1a816b8df1a1e7e638992c582ffe781473" kindref="member">HttpRequest::HttpVerb</ref></type>
        <definition>enum HttpRequest::HttpVerb  HttpRequest::verb_</definition>
        <argsstring></argsstring>
        <name>verb_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="class_http_request_1a3adf8828c7b520f151fe0091fac9e34e" prot="protected" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string HttpRequest::url_</definition>
        <argsstring></argsstring>
        <name>url_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="96" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_http_request_1af9bff71cebf4375c68371fe86b8a2ca4" prot="protected" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string HttpRequest::hostname_</definition>
        <argsstring></argsstring>
        <name>hostname_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="104" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_http_request_1adc1b6ecae5fb665176966048c7504468" prot="private" static="no" mutable="no">
        <type>NameValueStore</type>
        <definition>NameValueStore HttpRequest::headers_</definition>
        <argsstring></argsstring>
        <name>headers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="108" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_http_request_1a375220309e3ad85bc9f26689847f3f5a" prot="private" static="no" mutable="no">
        <type>NameValueStore</type>
        <definition>NameValueStore HttpRequest::params_</definition>
        <argsstring></argsstring>
        <name>params_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="110" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_http_request_1a6fd2879b4ff20e71d3fbbc5167e23d41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>INLINE bool HttpRequest::isGetRequest</definition>
        <argsstring>() const </argsstring>
        <name>isGetRequest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether the request is a GET request. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="30" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.ipp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1ac891acd1e4ff93926ddadbe024908e13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>INLINE const char * HttpRequest::verbAsString</definition>
        <argsstring>() const </argsstring>
        <name>verbAsString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="32" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.ipp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1a9db8ef5dbcbfaec4f96008f518126395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const BW::string &amp;</type>
        <definition>INLINE const BW::string &amp; HttpRequest::url</definition>
        <argsstring>() const </argsstring>
        <name>url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="34" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.ipp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1afefc178bb0b32e4fe7ff74610f10f709" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const BW::string &amp;</type>
        <definition>INLINE const BW::string &amp; HttpRequest::hostname</definition>
        <argsstring>() const </argsstring>
        <name>hostname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="35" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.ipp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1a574894baf4365302e456c2bfb2083ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>INLINE void HttpRequest::hostname</definition>
        <argsstring>(const BW::string &amp;hostname)</argsstring>
        <name>hostname</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>hostname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="36" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.ipp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1a7ae5f27da1539c21ec8d54f403e5defd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BW_BEGIN_NAMESPACE HttpRequest::HttpRequest</definition>
        <argsstring>()</argsstring>
        <name>HttpRequest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="38" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.cpp" bodystart="14" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1adfc7ae561e6ba03d21890ee1855df72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>HttpRequest::~HttpRequest</definition>
        <argsstring>()</argsstring>
        <name>~HttpRequest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="39" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1a5e2d99f52ec57c3e63c858517c60f862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HttpRequest::addParam</definition>
        <argsstring>(const BW::string &amp;name, const BW::string &amp;value, bool shouldReplace=true)</argsstring>
        <name>addParam</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shouldReplace</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method adds a query parameter to the request. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="41" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.cpp" bodystart="33" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1ac7a026a9639ee9bd342da1fc25aedf2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HttpRequest::addHeader</definition>
        <argsstring>(const BW::string &amp;name, const BW::string &amp;value, bool shouldReplace=true)</argsstring>
        <name>addHeader</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shouldReplace</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method adds an HTTP header to the request. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="43" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.cpp" bodystart="48" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1afdd397a69cc240fe1e1b3d532405af8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void HttpRequest::onResponseReceived</definition>
        <argsstring>(int responseCode, NameValueStore &amp;responseHeaders, BW::string responseBody)=0</argsstring>
        <name>onResponseReceived</name>
        <reimplementedby refid="class_spa_login_request_1a32f6f0d3a8dbaf4558e75abb8f0203d8">onResponseReceived</reimplementedby>
        <param>
          <type>int</type>
          <declname>responseCode</declname>
        </param>
        <param>
          <type>NameValueStore &amp;</type>
          <declname>responseHeaders</declname>
        </param>
        <param>
          <type>BW::string</type>
          <declname>responseBody</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This abstract method callback is invoked upon successful processing of a request by a remote HTTP/1.1 server.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>responseCode</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP response code (e.g., 200 or 404). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responseHeaders</parametername>
</parameternamelist>
<parameterdescription>
<para>A BW::map with HTTP headers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responseBody</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP request payload (empty string if not present). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1a53a243965e9eed4266e5d6953fabe391" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void HttpRequest::onConnectionFailure</definition>
        <argsstring>()=0</argsstring>
        <name>onConnectionFailure</name>
        <reimplementedby refid="class_spa_login_request_1a51c68cb27a0ae9cf53fc4d661e8d859e">onConnectionFailure</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This abstract method callback is invoked upon request processing failure.</para><para>This failure callback is to distinguish from &quot;high-level&quot; failures like 404 or 500 error, which are reported via &quot;onResponseReceived&quot; callback.</para><para>Legitimate uses for this method include network outage, response parsing errors, severe timeouts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_http_request_1ad0a2139b5045605563f5e3154078b58e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>INLINE bool HttpRequest::shouldRetry</definition>
        <argsstring>()</argsstring>
        <name>shouldRetry</name>
        <reimplementedby refid="class_spa_login_request_1aa7916b93660fa2e7a81f3eaf8322c048">shouldRetry</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether the request should be requeued for a retry on a failure condition.</para><para><simplesect kind="return"><para>This method always returns false by default. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="70" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.ipp" bodystart="14" bodyend="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class represents a single HTTP 1.1 request (GET or POST).</para><para>Completely passive by itself, all its abstract callbacks are invoked via external processing entities (<ref refid="class_http_pipeline" kindref="compound">HttpPipeline</ref> and derivatives).</para><para>Consult RFC 2616 for details. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1481">
        <label>HttpRequest</label>
        <link refid="class_http_request"/>
      </node>
      <node id="1482">
        <label>SpaRequest</label>
        <link refid="class_spa_request"/>
        <childnode refid="1481" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1483">
        <label>SpaLoginRequest</label>
        <link refid="class_spa_login_request"/>
        <childnode refid="1482" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="dbapp_extensions/wgbilling_spa/http_request.hpp" line="23" column="1" bodyfile="dbapp_extensions/wgbilling_spa/http_request.hpp" bodystart="22" bodyend="111"/>
    <listofallmembers>
      <member refid="class_http_request_1ac7a026a9639ee9bd342da1fc25aedf2e" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>addHeader</name></member>
      <member refid="class_http_request_1a5e2d99f52ec57c3e63c858517c60f862" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>addParam</name></member>
      <member refid="class_http_request_1a816b8df1a1e7e638992c582ffe781473a99e44f5e93ff98c3a774cd47599fa175" prot="protected" virt="non-virtual"><scope>HttpRequest</scope><name>GET</name></member>
      <member refid="class_http_request_1adc1b6ecae5fb665176966048c7504468" prot="private" virt="non-virtual"><scope>HttpRequest</scope><name>headers_</name></member>
      <member refid="class_http_request_1afefc178bb0b32e4fe7ff74610f10f709" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>hostname</name></member>
      <member refid="class_http_request_1a574894baf4365302e456c2bfb2083ef5" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>hostname</name></member>
      <member refid="class_http_request_1af9bff71cebf4375c68371fe86b8a2ca4" prot="protected" virt="non-virtual"><scope>HttpRequest</scope><name>hostname_</name></member>
      <member refid="class_http_request_1a65210f7b7eee058633183eb4537c6c6d" prot="private" virt="non-virtual"><scope>HttpRequest</scope><name>HttpPipeline</name></member>
      <member refid="class_http_request_1a7ae5f27da1539c21ec8d54f403e5defd" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>HttpRequest</name></member>
      <member refid="class_http_request_1a816b8df1a1e7e638992c582ffe781473" prot="protected" virt="non-virtual"><scope>HttpRequest</scope><name>HttpVerb</name></member>
      <member refid="class_http_request_1a6fd2879b4ff20e71d3fbbc5167e23d41" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>isGetRequest</name></member>
      <member refid="class_http_request_1a3880d8f2f310d73d00cf029b5a8871d2" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>NameValueStore</name></member>
      <member refid="class_http_request_1a53a243965e9eed4266e5d6953fabe391" prot="public" virt="pure-virtual"><scope>HttpRequest</scope><name>onConnectionFailure</name></member>
      <member refid="class_http_request_1afdd397a69cc240fe1e1b3d532405af8b" prot="public" virt="pure-virtual"><scope>HttpRequest</scope><name>onResponseReceived</name></member>
      <member refid="class_http_request_1a375220309e3ad85bc9f26689847f3f5a" prot="private" virt="non-virtual"><scope>HttpRequest</scope><name>params_</name></member>
      <member refid="class_http_request_1a816b8df1a1e7e638992c582ffe781473aaa3e5faf15649b28b1e774c3decde5b7" prot="protected" virt="non-virtual"><scope>HttpRequest</scope><name>POST</name></member>
      <member refid="class_http_request_1ad0a2139b5045605563f5e3154078b58e" prot="public" virt="virtual"><scope>HttpRequest</scope><name>shouldRetry</name></member>
      <member refid="class_http_request_1a9db8ef5dbcbfaec4f96008f518126395" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>url</name></member>
      <member refid="class_http_request_1a3adf8828c7b520f151fe0091fac9e34e" prot="protected" virt="non-virtual"><scope>HttpRequest</scope><name>url_</name></member>
      <member refid="class_http_request_1a11bada1f8ab4fa4a289269ea651aa3e1" prot="protected" virt="non-virtual"><scope>HttpRequest</scope><name>verb_</name></member>
      <member refid="class_http_request_1ac891acd1e4ff93926ddadbe024908e13" prot="public" virt="non-virtual"><scope>HttpRequest</scope><name>verbAsString</name></member>
      <member refid="class_http_request_1adfc7ae561e6ba03d21890ee1855df72b" prot="public" virt="virtual"><scope>HttpRequest</scope><name>~HttpRequest</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
