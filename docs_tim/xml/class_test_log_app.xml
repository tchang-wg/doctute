<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_test_log_app" kind="class" language="C++" prot="public">
    <compoundname>TestLogApp</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ServerApp</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_test_log_app_1af68d4b2f6db4ab96bdddce28c0516e51" prot="public" static="no">
        <type><ref refid="class_test_log_app_config" kindref="compound">TestLogAppConfig</ref></type>
        <definition>typedef TestLogAppConfig TestLogApp::Config</definition>
        <argsstring></argsstring>
        <name>Config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="35" column="1" bodyfile="tools/test_log_app/test_log_app.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_test_log_app_1a013acfbb6d705ee7a8f5248a5438dbc5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TestLogApp::isRunFromMachined_</definition>
        <argsstring></argsstring>
        <name>isRunFromMachined_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="47" column="1" bodyfile="tools/test_log_app/test_log_app.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_test_log_app_1ab1b8e756d5418365c9ef8709f7f0285d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* TestLogApp::appName</definition>
        <argsstring>()</argsstring>
        <name>appName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="25" column="1" bodyfile="tools/test_log_app/test_log_app.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_test_log_app_1a23286854141cedd9c19cbe5c5adaf47a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* TestLogApp::configPath</definition>
        <argsstring>()</argsstring>
        <name>configPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="26" column="1" bodyfile="tools/test_log_app/test_log_app.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_test_log_app_1abbd21852b72c0b38e1cf1f9d985401c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* TestLogApp::getConfigPath</definition>
        <argsstring>() const </argsstring>
        <name>getConfigPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="27" column="1" bodyfile="tools/test_log_app/test_log_app.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_test_log_app_1a0f2321b002785656fb02f3de4b456495" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* TestLogApp::getAppName</definition>
        <argsstring>() const </argsstring>
        <name>getAppName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="28" column="1" bodyfile="tools/test_log_app/test_log_app.hpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_test_log_app_1a5b5a53d6781e67bc8aa8df9325a37b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TestLogApp::TestLogApp</definition>
        <argsstring>(Mercury::EventDispatcher &amp;mainDispatcher, Mercury::NetworkInterface &amp;networkInterface)</argsstring>
        <name>TestLogApp</name>
        <param>
          <type>Mercury::EventDispatcher &amp;</type>
          <declname>mainDispatcher</declname>
        </param>
        <param>
          <type>Mercury::NetworkInterface &amp;</type>
          <declname>networkInterface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="30" column="1" bodyfile="tools/test_log_app/test_log_app.cpp" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_test_log_app_1a6bc38a43a634e0982513973c006d6813" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool TestLogApp::init</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialisation function.</para><para>This must be called from subclasses&apos;s <ref refid="class_test_log_app_1a6bc38a43a634e0982513973c006d6813" kindref="member">init()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="33" column="1" bodyfile="tools/test_log_app/test_log_app.cpp" bodystart="89" bodyend="107"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_test_log_app_1af765248c5ad7b29e4699e0e9141fe71b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestLogApp::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method overrides ServerApp::run and is the main entry point for a server app to begin processing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="38" column="1" bodyfile="tools/test_log_app/test_log_app.cpp" bodystart="472" bodyend="493"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_test_log_app_1a06fe985f30c81aef06c8a9a461acaeb7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestLogApp::parseCommandLine</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>parseCommandLine</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method parses the command line for options used for log generation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="41" column="1" bodyfile="tools/test_log_app/test_log_app.cpp" bodystart="113" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_test_log_app_1a21edc25f096c97cfc8faf82d657c49a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestLogApp::getIntArg</definition>
        <argsstring>(int argc, char *argv[], int optIndex, TestLogAppIntOption &amp;configOption)</argsstring>
        <name>getIntArg</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>optIndex</declname>
        </param>
        <param>
          <type>TestLogAppIntOption &amp;</type>
          <declname>configOption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper method to get an integer option from argv and store it in a config option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="42" column="1" bodyfile="tools/test_log_app/test_log_app.cpp" bodystart="428" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="class_test_log_app_1a55463bae516907d9f1668d86c5f300d1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestLogApp::hasMoreArgs</definition>
        <argsstring>(int argc, char *argv[], int optIndex)</argsstring>
        <name>hasMoreArgs</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>optIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method checks the passed in option index contains an expected matching value arg. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="44" column="1" bodyfile="tools/test_log_app/test_log_app.cpp" bodystart="455" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="class_test_log_app_1a03df71e33f8235682ff00010ab5ddba3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestLogApp::generateLogs</definition>
        <argsstring>()</argsstring>
        <name>generateLogs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method generates logs based on the specified config or command line options.</para><para>Logs are generated repeatedly in group iterations based on the priority count options, until the specified maximum count option is reached.</para><para>The config options will then determine whether each iteration has categories and what its source will be. They also determine message formats, how many categories are generated and how often metadata is added to a message.</para><para>See the constants at the top of this file, and <ref refid="class_test_log_app_config" kindref="compound">TestLogAppConfig</ref> class for more detailed information on these options. TODO: BWT-29385 - Add a usage message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/test_log_app/test_log_app.hpp" line="45" column="1" bodyfile="tools/test_log_app/test_log_app.cpp" bodystart="512" bodyend="798"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2912">
        <label>TestLogApp</label>
        <link refid="class_test_log_app"/>
        <childnode refid="2913" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2913">
        <label>ServerApp</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2914">
        <label>TestLogApp</label>
        <link refid="class_test_log_app"/>
        <childnode refid="2915" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2915">
        <label>ServerApp</label>
      </node>
    </collaborationgraph>
    <location file="tools/test_log_app/test_log_app.hpp" line="18" column="1" bodyfile="tools/test_log_app/test_log_app.hpp" bodystart="17" bodyend="48"/>
    <listofallmembers>
      <member refid="class_test_log_app_1ab1b8e756d5418365c9ef8709f7f0285d" prot="public" virt="non-virtual"><scope>TestLogApp</scope><name>appName</name></member>
      <member refid="class_test_log_app_1af68d4b2f6db4ab96bdddce28c0516e51" prot="public" virt="non-virtual"><scope>TestLogApp</scope><name>Config</name></member>
      <member refid="class_test_log_app_1a23286854141cedd9c19cbe5c5adaf47a" prot="public" virt="non-virtual"><scope>TestLogApp</scope><name>configPath</name></member>
      <member refid="class_test_log_app_1a03df71e33f8235682ff00010ab5ddba3" prot="private" virt="non-virtual"><scope>TestLogApp</scope><name>generateLogs</name></member>
      <member refid="class_test_log_app_1a0f2321b002785656fb02f3de4b456495" prot="public" virt="virtual"><scope>TestLogApp</scope><name>getAppName</name></member>
      <member refid="class_test_log_app_1abbd21852b72c0b38e1cf1f9d985401c1" prot="public" virt="virtual"><scope>TestLogApp</scope><name>getConfigPath</name></member>
      <member refid="class_test_log_app_1a21edc25f096c97cfc8faf82d657c49a7" prot="private" virt="non-virtual"><scope>TestLogApp</scope><name>getIntArg</name></member>
      <member refid="class_test_log_app_1a55463bae516907d9f1668d86c5f300d1" prot="private" virt="non-virtual"><scope>TestLogApp</scope><name>hasMoreArgs</name></member>
      <member refid="class_test_log_app_1a6bc38a43a634e0982513973c006d6813" prot="public" virt="virtual"><scope>TestLogApp</scope><name>init</name></member>
      <member refid="class_test_log_app_1a013acfbb6d705ee7a8f5248a5438dbc5" prot="private" virt="non-virtual"><scope>TestLogApp</scope><name>isRunFromMachined_</name></member>
      <member refid="class_test_log_app_1a06fe985f30c81aef06c8a9a461acaeb7" prot="private" virt="non-virtual"><scope>TestLogApp</scope><name>parseCommandLine</name></member>
      <member refid="class_test_log_app_1af765248c5ad7b29e4699e0e9141fe71b" prot="protected" virt="non-virtual"><scope>TestLogApp</scope><name>run</name></member>
      <member refid="class_test_log_app_1a5b5a53d6781e67bc8aa8df9325a37b6f" prot="public" virt="non-virtual"><scope>TestLogApp</scope><name>TestLogApp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
