<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_server_platform" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ServerPlatform</compoundname>
    <derivedcompoundref refid="class_server_platform_linux" prot="public" virt="non-virtual">ServerPlatformLinux</derivedcompoundref>
    <derivedcompoundref refid="class_server_platform_windows" prot="public" virt="non-virtual">ServerPlatformWindows</derivedcompoundref>
    <includes refid="server__platform_8hpp" local="no">server_platform.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_server_platform_1a1f79307e0b01c385913fb76d64b029bb" prot="public" static="no">
        <type>BW::set&lt; BW::string &gt;</type>
        <definition>typedef BW::set&lt; BW::string &gt; ServerPlatform::ProcessSet</definition>
        <argsstring></argsstring>
        <name>ProcessSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="228" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_server_platform_1a533223e9780ead3266c5a8a0dc54afc3" prot="protected" static="no">
        <type>BW::map&lt; <ref refid="class_process_binary_version" kindref="compound">ProcessBinaryVersion</ref>, ProcessSet &gt;</type>
        <definition>typedef BW::map&lt; ProcessBinaryVersion, ProcessSet &gt; ServerPlatform::VersionsProcesses</definition>
        <argsstring></argsstring>
        <name>VersionsProcesses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The versions&apos; processes. That is, the set of processes for each named version. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="422" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_server_platform_1a5ea03261fef71821068ef416580b4034" prot="protected" static="no">
        <type>BW::vector&lt; BW::string &gt;</type>
        <definition>typedef BW::vector&lt; BW::string &gt; ServerPlatform::StringList</definition>
        <argsstring></argsstring>
        <name>StringList</name>
        <briefdescription>
<para>Configure the directories for the platform in question. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="426" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="426" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_server_platform_1aadcd5c4f9233446221b6bbaaa8f22ed9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ServerPlatform::isInitialised_</definition>
        <argsstring></argsstring>
        <name>isInitialised_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="417" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a42581ff1103889ffdfd73093fbbb9c49" prot="protected" static="no" mutable="no">
        <type><ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> &amp;</type>
        <definition>BWMachined&amp; ServerPlatform::machined_</definition>
        <argsstring></argsstring>
        <name>machined_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="418" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a6a7870c02d151ca927559f8f26dec3cf" prot="protected" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a533223e9780ead3266c5a8a0dc54afc3" kindref="member">VersionsProcesses</ref></type>
        <definition>VersionsProcesses ServerPlatform::versionsProcesses_</definition>
        <argsstring></argsstring>
        <name>versionsProcesses_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="423" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a7ebb47a3f912b9302f405afff08e8eb8" prot="protected" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatform::preparedHybridSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedHybridSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="437" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1aefce2a6855f99ff6ba9e8052abc86ee3" prot="protected" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatform::preparedDebugSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedDebugSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="438" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a9df0299504f9e82661e67b682b19f2f2" prot="protected" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatform::preparedOldHybridSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedOldHybridSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="439" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a9c9f80923d8466e100d6c102e50564f5" prot="protected" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatform::preparedOldDebugSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedOldDebugSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="440" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="440" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_server_platform_1aba2a5af469803ac8f5d006056c1e8bb3" prot="protected" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>BW_BEGIN_NAMESPACE const char *const ServerPlatform::machinedConfFile_</definition>
        <argsstring></argsstring>
        <name>machinedConfFile_</name>
        <initializer>= &quot;bwmachined.conf&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="442" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a33a331d1bbd02d5e73f1e60d0b7fdc60" prot="protected" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char *const ServerPlatform::bigworldConfFile_</definition>
        <argsstring></argsstring>
        <name>bigworldConfFile_</name>
        <initializer>= &quot;bigworld.conf&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="443" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a40accbaa7b115125539f44cb25df3fcb" prot="protected" static="yes" mutable="no">
        <type>PlatformReadHandlerMap</type>
        <definition>PlatformReadHandlerMap ServerPlatform::s_readHandlers</definition>
        <argsstring></argsstring>
        <name>s_readHandlers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="446" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1ad9f6553d44e49d383b8b6f130eba49ac" prot="protected" static="yes" mutable="no">
        <type>PlatformWriteHandlerMap</type>
        <definition>PlatformWriteHandlerMap ServerPlatform::s_writeHandlers</definition>
        <argsstring></argsstring>
        <name>s_writeHandlers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="447" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a55593626f0e0bba286872bf8ece8b48b" prot="protected" static="yes" mutable="no">
        <type>PlatformReadHandlerMap</type>
        <definition>PlatformReadHandlerMap ServerPlatform::s_expiredReadHandlers</definition>
        <argsstring></argsstring>
        <name>s_expiredReadHandlers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="448" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_1a7e576073bc7068bbdea372ce94391f42" prot="protected" static="yes" mutable="no">
        <type>PlatformWriteHandlerMap</type>
        <definition>PlatformWriteHandlerMap ServerPlatform::s_expiredWriteHandlers</definition>
        <argsstring></argsstring>
        <name>s_expiredWriteHandlers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="449" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="449" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_server_platform_1a20986cb4f1483bf6a702893c9dcb458b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ServerPlatform::ServerPlatform</definition>
        <argsstring>(BWMachined &amp;machined)</argsstring>
        <name>ServerPlatform</name>
        <param>
          <type><ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> &amp;</type>
          <declname>machined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machined</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> instance to contact when preparing to send data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="230" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1ab723dffb26c57d8c3617b60ab5c9ca0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ServerPlatform::isInitialised</definition>
        <argsstring>() const </argsstring>
        <name>isInitialised</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether the object has been successfully initialised.</para><para><simplesect kind="return"><para>true if the object is initialised properly, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="232" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a98a3404894c8f2300a277d97371593f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ServerPlatform::determineVersion</definition>
        <argsstring>(MachineGuardMessage::UserId uid, const BW::string &amp;bwRoot, BW::string &amp;versionString)</argsstring>
        <name>determineVersion</name>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type>BW::string &amp;</type>
          <declname>versionString</declname>
          <defname>version</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method attempts to match the binaries under BW_ROOT to the first BigWorld version that had same set of processes, that is, the earliest version the binaries <emphasis>could</emphasis> be judging only by what binaries are present.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The user ID we are searching under (used for log output). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The BW_ROOT path to check under. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>This is filled with the found version. Possibly &quot;0.0&quot; for the &quot;initial&quot; version. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a version&apos;s processes were found, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="234" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="128" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1ad8beedf982a8ca4eefe01f48b3fce781" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const BW::string &amp;</type>
        <definition>virtual const BW::string&amp; ServerPlatform::stateFileName</definition>
        <argsstring>()=0</argsstring>
        <name>stateFileName</name>
        <reimplementedby refid="class_server_platform_windows_1a0c1f75cff57313a023cab94596f4ce3e">stateFileName</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a2b91d240f543bafeb04012e4de99cf8c">stateFileName</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the filename in which to store process states for persistency between execution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a09f8d535bf0218d34dd3824bd0cea4e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ServerPlatform::notifyNetworkInitialised</definition>
        <argsstring>(uint16 port)</argsstring>
        <name>notifyNetworkInitialised</name>
        <reimplementedby refid="class_server_platform_windows_1aea5af165bd19b9bd120d8de412b658b2">notifyNetworkInitialised</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a12ff7e7d6c430b9a0461dd19fd2b37e0">notifyNetworkInitialised</reimplementedby>
        <param>
          <type>uint16</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called from BWMachineD when the network initialisation has been finalised.</para><para>This method provides the opportunity for the platform layer to establish any state information needed from the network layer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The primary communication port BWMachineD is using. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="257" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a451a7855334389b6699617c9226efa8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ServerPlatform::findUserBinaryDirForConfig</definition>
        <argsstring>(const BW::string &amp;bwRoot, const BW::string &amp;bwConfig, BW::string &amp;binaryDir)</argsstring>
        <name>findUserBinaryDirForConfig</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwConfig</declname>
        </param>
        <param>
          <type>BW::string &amp;</type>
          <declname>binaryDir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method tests whether the requested binary directory exists and is suitable for starting server processes from.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The base path to the BigWorld directory structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bwConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of binaries to discover (Hybrid / Debug) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binaryDir</parametername>
</parameternamelist>
<parameterdescription>
<para>The valid discovered binary directory to start processes from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on discovering a valid directory, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="271" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="300" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a1688fa8cecfa9835e52e16136e15354b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::isProcessRunning</definition>
        <argsstring>(uint16 pid) const  =0</argsstring>
        <name>isProcessRunning</name>
        <reimplementedby refid="class_server_platform_windows_1abdd8a9135b4ec77ab1211c4c797457a5">isProcessRunning</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a49cd71b836d07b8f9a96a69b04cb803a">isProcessRunning</reimplementedby>
        <param>
          <type>uint16</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method checks whether a given PID is running.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID to check the status of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the process is running, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a69c35c586999fa5b4d6654ac5947fd7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::killProcess</definition>
        <argsstring>(uint16 pid, uint8 signal) const  =0</argsstring>
        <name>killProcess</name>
        <reimplementedby refid="class_server_platform_windows_1acb69df9fc04a21bc228277d9b0ed7060">killProcess</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a029879dcd9efc0a094ef1c8af5e1278e">killProcess</reimplementedby>
        <param>
          <type>uint16</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method kills a given process with the specified signal</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID of the process to kill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to send to the process</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a15fdb8647d5051d53f8127e940e0a754" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::updateSystemInfo</definition>
        <argsstring>(SystemInfo &amp;systemInfo, ServerInfo *pServerInfo)=0</argsstring>
        <name>updateSystemInfo</name>
        <reimplementedby refid="class_server_platform_windows_1aaef93c4044daf381aa2a6592798af6b5">updateSystemInfo</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a99bdce7c8dc9190368f160550d38d7b8">updateSystemInfo</reimplementedby>
        <param>
          <type><ref refid="struct_system_info" kindref="compound">SystemInfo</ref> &amp;</type>
          <declname>systemInfo</declname>
        </param>
        <param>
          <type>ServerInfo *</type>
          <declname>pServerInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs an explicit update of core system information such as CPU and memory state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>systemInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure to place the updated information into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pServerInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ServerInfo structure to use when performing the update.</para></parameterdescription>
</parameteritem>
</parameterlist>
return true when the update was successful, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1aded4afecac1625a2c55dca358eb08b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ServerPlatform::updateCPUInfo</definition>
        <argsstring>(SystemInfo &amp;systemInfo)=0</argsstring>
        <name>updateCPUInfo</name>
        <reimplementedby refid="class_server_platform_windows_1a497eefaf2e783333423d54918006a082">updateCPUInfo</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1afb096ec6a19533a16f2766840c37cd3b">updateCPUInfo</reimplementedby>
        <param>
          <type><ref refid="struct_system_info" kindref="compound">SystemInfo</ref> &amp;</type>
          <declname>systemInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs checks against the system information to determine the current CPU load.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>systemInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure to place the updated information into. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a277f8ad6d827a3e4d91684260ad15d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::checkCoreDumps</definition>
        <argsstring>(MachineGuardMessage::UserId uid, const BW::string &amp;bwRoot, UserMessage::CoreDumps &amp;coreDumps)=0</argsstring>
        <name>checkCoreDumps</name>
        <reimplementedby refid="class_server_platform_windows_1a3c8416b6d1584044482af31fd39d10a0">checkCoreDumps</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a7aa417f5a65f1dacbdbcb324e98de631">checkCoreDumps</reimplementedby>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type>UserMessage::CoreDumps &amp;</type>
          <declname>coreDumps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method fills a list of CoreDumps with core file summaries for any core files and assertions found under bwRoot.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The UID of the user the core dump check relates to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The root directory to search for the core files in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coreDumps</parametername>
</parameternamelist>
<parameterdescription>
<para>The UserMessage::CoreDumps structure to fill with core file summary information. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1af580d1ba9de576853d9dedb02697e3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::canProcessMessageWithUid</definition>
        <argsstring>(int msgUid)=0</argsstring>
        <name>canProcessMessageWithUid</name>
        <reimplementedby refid="class_server_platform_windows_1a39789bf89a7a70d5e1ba668babb70ff9">canProcessMessageWithUid</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1aec5e72dab2f8207f8f26b76ab5110d15">canProcessMessageWithUid</reimplementedby>
        <param>
          <type>int</type>
          <declname>msgUid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method determines if a message with a UID attached can be handled by the current platform.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgUid</parametername>
</parameternamelist>
<parameterdescription>
<para>The UID attached to the inbound message.</para></parameterdescription>
</parameteritem>
</parameterlist>
return true when the message can be handled, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a77f7ed8d5f9b28a903d640facdeb41db" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>UserMessage *</type>
        <definition>virtual UserMessage* ServerPlatform::addUserToMapByUid</definition>
        <argsstring>(UserMap *pUserMap, int uid)=0</argsstring>
        <name>addUserToMapByUid</name>
        <reimplementedby refid="class_server_platform_windows_1ac119e1d31e87fb793c4f7752d660023e">addUserToMapByUid</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a57be86db2cb4087dcb8c23f803a261da">addUserToMapByUid</reimplementedby>
        <param>
          <type><ref refid="class_user_map" kindref="compound">UserMap</ref> *</type>
          <declname>pUserMap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method looks up and initializes a new user with the provided UID.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pUserMap</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="class_user_map" kindref="compound">UserMap</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The UID of the user to add to the map.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when the UserMessage can be populated, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1ab47d2102b0e09ecd26f5801b2269d8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>UserMessage *</type>
        <definition>virtual UserMessage* ServerPlatform::addUserToMapByUsername</definition>
        <argsstring>(UserMap *pUserMap, const char *pUserName)=0</argsstring>
        <name>addUserToMapByUsername</name>
        <reimplementedby refid="class_server_platform_windows_1ae92933c8538a12ba9166a06417f3d8ac">addUserToMapByUsername</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a7a3f26a598a06073129a538d54b0a8a9">addUserToMapByUsername</reimplementedby>
        <param>
          <type><ref refid="class_user_map" kindref="compound">UserMap</ref> *</type>
          <declname>pUserMap</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pUserName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method looks up and initializes a new user with the provided username.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pUserMap</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="class_user_map" kindref="compound">UserMap</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pUserName</parametername>
</parameternamelist>
<parameterdescription>
<para>The username attached to the inbound message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when the UserMessage can be populated, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a2776a4c3a61c1f857c66dd55faecc11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ServerPlatform::getProcessCpuMem</definition>
        <argsstring>(BW::ProcessInfo &amp;pi, BW::SystemInfo &amp;si)=0</argsstring>
        <name>getProcessCpuMem</name>
        <reimplementedby refid="class_server_platform_windows_1a4f01d55d27f0b0da208a05819fbe9204">getProcessCpuMem</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1ad4f33ec598181544c9ef11e762989b18">getProcessCpuMem</reimplementedby>
        <param>
          <type>BW::ProcessInfo &amp;</type>
          <declname>pi</declname>
        </param>
        <param>
          <type>BW::SystemInfo &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1af27277a14abcc4f6683a4adc386fb7ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ServerPlatform::notifyRead</definition>
        <argsstring>(int fd)</argsstring>
        <name>notifyRead</name>
        <reimplementedby refid="class_server_platform_linux_1a91a55b119c7e81a9b501e380ce1e6dd6">notifyRead</reimplementedby>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="368" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="368" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a6756636332f5e4b5c93e38dd2fcea0d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ServerPlatform::notifyReadError</definition>
        <argsstring>(int fd)</argsstring>
        <name>notifyReadError</name>
        <reimplementedby refid="class_server_platform_linux_1a4141b8cfb44e9b814d9cb801c86df8f6">notifyReadError</reimplementedby>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="369" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a6a72b769a503e5853bd789050ce6c4ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ServerPlatform::notifyWrite</definition>
        <argsstring>(int fd)</argsstring>
        <name>notifyWrite</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="370" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="370" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a5bd187d04c1fad6cb420d1facf95165c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ServerPlatform::notifyWriteError</definition>
        <argsstring>(int fd)</argsstring>
        <name>notifyWriteError</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="371" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a03a2e2ebd73192b1b057da6e32a1581b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ServerPlatform::cleanupHandlers</definition>
        <argsstring>(bool freeAll)</argsstring>
        <name>cleanupHandlers</name>
        <param>
          <type>bool</type>
          <declname>freeAll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cleans up any expired read or write handlers. Should be called periodically from <ref refid="class_b_w_machined" kindref="compound">BWMachined</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="372" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="377" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1ac27ca4dfec20d31d461373fa66cb37e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ServerPlatform::getProcessorSpeeds</definition>
        <argsstring>(BW::vector&lt; float &gt; &amp;speeds)=0</argsstring>
        <name>getProcessorSpeeds</name>
        <reimplementedby refid="class_server_platform_windows_1a8f5fab0fa446546008f3d8b904906273">getProcessorSpeeds</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a03f060d3352ca61072c90f5e66372c99">getProcessorSpeeds</reimplementedby>
        <param>
          <type>BW::vector&lt; float &gt; &amp;</type>
          <declname>speeds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a83985fc40d6fe41a865ee59c40191977" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::startProcess</definition>
        <argsstring>(const char *bwBinaryDir, const char *bwResPath, const char *config, const char *binaryName, MachineGuardMessage::UserId uid, uint16 gid, const char *home, BW::vector&lt; const char * &gt; args, PidMessageWithDestination *pPmwd)=0</argsstring>
        <name>startProcess</name>
        <reimplementedby refid="class_server_platform_windows_1a4ff6203ff8d0d675e2f8aa6582f5431a">startProcess</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1ab0cd0c94ab5b387e2dc956ca6d499a05">startProcess</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>bwBinaryDir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bwResPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>binaryName</declname>
        </param>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>uint16</type>
          <declname>gid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BW::vector&lt; const char * &gt;</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_message_with_destination" kindref="compound">PidMessageWithDestination</ref> *</type>
          <declname>pPmwd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a8dbe87f22c3151cd5eef01a02e5c790a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::validateProcessInfo</definition>
        <argsstring>(const ProcessInfo &amp;processInfo)=0</argsstring>
        <name>validateProcessInfo</name>
        <reimplementedby refid="class_server_platform_windows_1a3c927e53e9689b77fdcd42259db3d466">validateProcessInfo</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1af12e8e05a0f729eb0893a974c4383b8e">validateProcessInfo</reimplementedby>
        <param>
          <type>const <ref refid="struct_process_info" kindref="compound">ProcessInfo</ref> &amp;</type>
          <declname>processInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1accd69fac93d32bd78a2d0cf233cae30a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::updateProcessStats</definition>
        <argsstring>(ProcessInfo &amp;pi, const SystemInfo &amp;si)=0</argsstring>
        <name>updateProcessStats</name>
        <reimplementedby refid="class_server_platform_windows_1a9ee74004bbf469f7ef439a54a0e573bc">updateProcessStats</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a8784c790bfa2902c6dfabd5e83c5b709">updateProcessStats</reimplementedby>
        <param>
          <type><ref refid="struct_process_info" kindref="compound">ProcessInfo</ref> &amp;</type>
          <declname>pi</declname>
        </param>
        <param>
          <type>const <ref refid="struct_system_info" kindref="compound">SystemInfo</ref> &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a99be6c9cbf60a4ad5d72923f6c501c5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>BW::string</type>
        <definition>virtual BW::string ServerPlatform::getMachineConfigFileName</definition>
        <argsstring>() const  =0</argsstring>
        <name>getMachineConfigFileName</name>
        <reimplementedby refid="class_server_platform_windows_1adee6b37535d2bdf6c0f9933c357881d6">getMachineConfigFileName</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1aec46d6984bf98b44fe50bd16da55420e">getMachineConfigFileName</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1ac1e75324f9efa9b7b239c0855412619a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>BW::string</type>
        <definition>virtual BW::string ServerPlatform::getBigWorldConfigFileName</definition>
        <argsstring>() const  =0</argsstring>
        <name>getBigWorldConfigFileName</name>
        <reimplementedby refid="class_server_platform_windows_1a247a372a5184c8cbc3559073b0c39e76">getBigWorldConfigFileName</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1ae9e153cf1f9a6d5b6f7f5c3a0345e0e6">getBigWorldConfigFileName</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="397" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_server_platform_1a4ab8362df8930381798b2ef061cb81e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_server_platform" kindref="compound">ServerPlatform</ref> *</type>
        <definition>ServerPlatform * ServerPlatform::CreateServerPlatform</definition>
        <argsstring>(BWMachined &amp;machined)</argsstring>
        <name>CreateServerPlatform</name>
        <param>
          <type><ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> &amp;</type>
          <declname>machined</declname>
        </param>
        <briefdescription>
<para>Create the platform specific <ref refid="class_server_platform" kindref="compound">ServerPlatform</ref> class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="238" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="248" bodyend="251"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_server_platform_1a67c3864f0e45099891a62a3e5b049032" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ServerPlatform::initConfigSuffixes</definition>
        <argsstring>()</argsstring>
        <name>initConfigSuffixes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method initialises the suffixes of the binary paths to avoid costly string manipulations when a request to start a binary is encounterd.</para><para>Due to the large number of permutations of path suffixes now due to changing directory structures, architecture support, and even more directory structure changes, along with the need for backwards compatability support in BWMachineD, we pre-generate all the path suffixes based for each supported BW_CONFIG type to help avoid lots of string manipulation during runtime. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="401" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="169" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a91367f28953366da559374281ee92c95" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ServerPlatform::initVersionsProcesses</definition>
        <argsstring>()</argsstring>
        <name>initVersionsProcesses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method initialises the process name sets for each BigWorld version where it changed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="402" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="89" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a699ee21e633fd36fb4f19e1c0eac2ad2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::checkBinariesExist</definition>
        <argsstring>(MachineGuardMessage::UserId uid, const BW::string &amp;bwRoot, const ProcessSet &amp;processes)=0</argsstring>
        <name>checkBinariesExist</name>
        <reimplementedby refid="class_server_platform_linux_1a4ba0ce11c36a9ce1def6098d1d7887de">checkBinariesExist</reimplementedby>
        <reimplementedby refid="class_server_platform_windows_1a041c92b20bbb1a223e685baf866d5ffa">checkBinariesExist</reimplementedby>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type>const ProcessSet &amp;</type>
          <declname>processes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method checks if the binaries in the given set exist under the given BW_ROOT path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The user ID we are checking for (used in log output). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The BW_ROOT to check for binaries under. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if there is a binary for each process name in the given set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a712bd3dc2135434c3e8353212f400ba5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ServerPlatform::configDirectoryExists</definition>
        <argsstring>(const BW::string &amp;bwRoot, const StringList &amp;pregeneratedConfigPaths, BW::string &amp;binaryDir)</argsstring>
        <name>configDirectoryExists</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type>const <ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref> &amp;</type>
          <declname>pregeneratedConfigPaths</declname>
        </param>
        <param>
          <type>BW::string &amp;</type>
          <declname>binaryDir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method tests whether a any of the provided directory structure structures exist for the specified build configuration.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the root level of the BigWorld directory structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pregeneratedConfigPaths</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of subpaths to bwRoot for a pre-determined build configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binaryDir</parametername>
</parameternamelist>
<parameterdescription>
<para>This string is filled with the first available path tested that exists.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a binary directory was discovered, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="427" column="1" bodyfile="tools/bwmachined/server_platform.cpp" bodystart="347" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_1a45771fbe5cda9fe043635e025d43e021" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ServerPlatform::directoryExists</definition>
        <argsstring>(const BW::string &amp;directoryPath)=0</argsstring>
        <name>directoryExists</name>
        <reimplementedby refid="class_server_platform_windows_1a8d950aa2596234e46f8f6500c32a1279">directoryExists</reimplementedby>
        <reimplementedby refid="class_server_platform_linux_1a246828b7d73cb37d19ae29406d539dd8">directoryExists</reimplementedby>
        <param>
          <type>const BW::string &amp;</type>
          <declname>directoryPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform.hpp" line="435" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This abstract class provides the basis for any host platform implementation.</para><para>Platforms (eg: Linux, Windows) will specialise this class to provide the expected functionality required by bwmachined. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2610">
        <label>ServerPlatformLinux</label>
        <link refid="class_server_platform_linux"/>
        <childnode refid="2609" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2609">
        <label>ServerPlatform</label>
        <link refid="class_server_platform"/>
      </node>
      <node id="2611">
        <label>ServerPlatformWindows</label>
        <link refid="class_server_platform_windows"/>
        <childnode refid="2609" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2615">
        <label>WrappedMessageHandler</label>
        <link refid="class_wrapped_message_handler"/>
      </node>
      <node id="2618">
        <label>Listeners&lt; ListenerMessage &gt;</label>
        <link refid="class_listeners"/>
      </node>
      <node id="2613">
        <label>BWMachined</label>
        <link refid="class_b_w_machined"/>
        <childnode refid="2614" relation="public-inheritance">
        </childnode>
        <childnode refid="2615" relation="usage">
          <edgelabel>wrappedMessageHandler_</edgelabel>
        </childnode>
        <childnode refid="2616" relation="usage">
          <edgelabel>syslogHandler_</edgelabel>
        </childnode>
        <childnode refid="2618" relation="usage">
          <edgelabel>deathListeners_</edgelabel>
          <edgelabel>birthListeners_</edgelabel>
        </childnode>
        <childnode refid="2619" relation="usage">
          <edgelabel>systemInfo_</edgelabel>
        </childnode>
        <childnode refid="2612" relation="usage">
          <edgelabel>pServerPlatform_</edgelabel>
        </childnode>
        <childnode refid="2622" relation="usage">
          <edgelabel>users_</edgelabel>
        </childnode>
      </node>
      <node id="2621">
        <label>MaxStat</label>
        <link refid="struct_max_stat"/>
        <childnode refid="2620" relation="usage">
          <edgelabel>val</edgelabel>
          <edgelabel>max</edgelabel>
        </childnode>
      </node>
      <node id="2614">
        <label>Singleton&lt; BWMachined &gt;</label>
      </node>
      <node id="2612">
        <label>ServerPlatform</label>
        <link refid="class_server_platform"/>
        <childnode refid="2613" relation="usage">
          <edgelabel>machined_</edgelabel>
        </childnode>
      </node>
      <node id="2619">
        <label>SystemInfo</label>
        <link refid="struct_system_info"/>
        <childnode refid="2620" relation="usage">
          <edgelabel>packTotIn</edgelabel>
          <edgelabel>packDropOut</edgelabel>
          <edgelabel>packTotOut</edgelabel>
          <edgelabel>packDropIn</edgelabel>
        </childnode>
        <childnode refid="2621" relation="usage">
          <edgelabel>iowait</edgelabel>
          <edgelabel>mem</edgelabel>
        </childnode>
      </node>
      <node id="2622">
        <label>UserMap</label>
        <link refid="class_user_map"/>
      </node>
      <node id="2620">
        <label>Stat&lt; uint64 &gt;</label>
        <link refid="class_stat"/>
      </node>
      <node id="2617">
        <label>DebugMessageCallback</label>
      </node>
      <node id="2616">
        <label>SyslogMessageHandler</label>
        <link refid="class_syslog_message_handler"/>
        <childnode refid="2617" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="tools/bwmachined/server_platform.hpp" line="226" column="1" bodyfile="tools/bwmachined/server_platform.hpp" bodystart="225" bodyend="451"/>
    <listofallmembers>
      <member refid="class_server_platform_1a77f7ed8d5f9b28a903d640facdeb41db" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>addUserToMapByUid</name></member>
      <member refid="class_server_platform_1ab47d2102b0e09ecd26f5801b2269d8f6" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>addUserToMapByUsername</name></member>
      <member refid="class_server_platform_1a33a331d1bbd02d5e73f1e60d0b7fdc60" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>bigworldConfFile_</name></member>
      <member refid="class_server_platform_1af580d1ba9de576853d9dedb02697e3e0" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>canProcessMessageWithUid</name></member>
      <member refid="class_server_platform_1a699ee21e633fd36fb4f19e1c0eac2ad2" prot="protected" virt="pure-virtual"><scope>ServerPlatform</scope><name>checkBinariesExist</name></member>
      <member refid="class_server_platform_1a277f8ad6d827a3e4d91684260ad15d83" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>checkCoreDumps</name></member>
      <member refid="class_server_platform_1a03a2e2ebd73192b1b057da6e32a1581b" prot="public" virt="non-virtual"><scope>ServerPlatform</scope><name>cleanupHandlers</name></member>
      <member refid="class_server_platform_1a712bd3dc2135434c3e8353212f400ba5" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>configDirectoryExists</name></member>
      <member refid="class_server_platform_1a4ab8362df8930381798b2ef061cb81e4" prot="public" virt="non-virtual"><scope>ServerPlatform</scope><name>CreateServerPlatform</name></member>
      <member refid="class_server_platform_1a98a3404894c8f2300a277d97371593f3" prot="public" virt="non-virtual"><scope>ServerPlatform</scope><name>determineVersion</name></member>
      <member refid="class_server_platform_1a45771fbe5cda9fe043635e025d43e021" prot="protected" virt="pure-virtual"><scope>ServerPlatform</scope><name>directoryExists</name></member>
      <member refid="class_server_platform_1a451a7855334389b6699617c9226efa8b" prot="public" virt="non-virtual"><scope>ServerPlatform</scope><name>findUserBinaryDirForConfig</name></member>
      <member refid="class_server_platform_1ac1e75324f9efa9b7b239c0855412619a" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>getBigWorldConfigFileName</name></member>
      <member refid="class_server_platform_1a99be6c9cbf60a4ad5d72923f6c501c5c" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>getMachineConfigFileName</name></member>
      <member refid="class_server_platform_1a2776a4c3a61c1f857c66dd55faecc11b" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>getProcessCpuMem</name></member>
      <member refid="class_server_platform_1ac27ca4dfec20d31d461373fa66cb37e9" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>getProcessorSpeeds</name></member>
      <member refid="class_server_platform_1a67c3864f0e45099891a62a3e5b049032" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>initConfigSuffixes</name></member>
      <member refid="class_server_platform_1a91367f28953366da559374281ee92c95" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>initVersionsProcesses</name></member>
      <member refid="class_server_platform_1ab723dffb26c57d8c3617b60ab5c9ca0a" prot="public" virt="non-virtual"><scope>ServerPlatform</scope><name>isInitialised</name></member>
      <member refid="class_server_platform_1aadcd5c4f9233446221b6bbaaa8f22ed9" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>isInitialised_</name></member>
      <member refid="class_server_platform_1a1688fa8cecfa9835e52e16136e15354b" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>isProcessRunning</name></member>
      <member refid="class_server_platform_1a69c35c586999fa5b4d6654ac5947fd7a" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>killProcess</name></member>
      <member refid="class_server_platform_1a42581ff1103889ffdfd73093fbbb9c49" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>machined_</name></member>
      <member refid="class_server_platform_1aba2a5af469803ac8f5d006056c1e8bb3" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>machinedConfFile_</name></member>
      <member refid="class_server_platform_1a09f8d535bf0218d34dd3824bd0cea4e7" prot="public" virt="virtual"><scope>ServerPlatform</scope><name>notifyNetworkInitialised</name></member>
      <member refid="class_server_platform_1af27277a14abcc4f6683a4adc386fb7ef" prot="public" virt="virtual"><scope>ServerPlatform</scope><name>notifyRead</name></member>
      <member refid="class_server_platform_1a6756636332f5e4b5c93e38dd2fcea0d2" prot="public" virt="virtual"><scope>ServerPlatform</scope><name>notifyReadError</name></member>
      <member refid="class_server_platform_1a6a72b769a503e5853bd789050ce6c4ea" prot="public" virt="virtual"><scope>ServerPlatform</scope><name>notifyWrite</name></member>
      <member refid="class_server_platform_1a5bd187d04c1fad6cb420d1facf95165c" prot="public" virt="virtual"><scope>ServerPlatform</scope><name>notifyWriteError</name></member>
      <member refid="class_server_platform_1aefce2a6855f99ff6ba9e8052abc86ee3" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>preparedDebugSuffix_</name></member>
      <member refid="class_server_platform_1a7ebb47a3f912b9302f405afff08e8eb8" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>preparedHybridSuffix_</name></member>
      <member refid="class_server_platform_1a9c9f80923d8466e100d6c102e50564f5" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>preparedOldDebugSuffix_</name></member>
      <member refid="class_server_platform_1a9df0299504f9e82661e67b682b19f2f2" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>preparedOldHybridSuffix_</name></member>
      <member refid="class_server_platform_1a1f79307e0b01c385913fb76d64b029bb" prot="public" virt="non-virtual"><scope>ServerPlatform</scope><name>ProcessSet</name></member>
      <member refid="class_server_platform_1a55593626f0e0bba286872bf8ece8b48b" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>s_expiredReadHandlers</name></member>
      <member refid="class_server_platform_1a7e576073bc7068bbdea372ce94391f42" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>s_expiredWriteHandlers</name></member>
      <member refid="class_server_platform_1a40accbaa7b115125539f44cb25df3fcb" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>s_readHandlers</name></member>
      <member refid="class_server_platform_1ad9f6553d44e49d383b8b6f130eba49ac" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>s_writeHandlers</name></member>
      <member refid="class_server_platform_1a20986cb4f1483bf6a702893c9dcb458b" prot="public" virt="non-virtual"><scope>ServerPlatform</scope><name>ServerPlatform</name></member>
      <member refid="class_server_platform_1a83985fc40d6fe41a865ee59c40191977" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>startProcess</name></member>
      <member refid="class_server_platform_1ad8beedf982a8ca4eefe01f48b3fce781" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>stateFileName</name></member>
      <member refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>StringList</name></member>
      <member refid="class_server_platform_1aded4afecac1625a2c55dca358eb08b51" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>updateCPUInfo</name></member>
      <member refid="class_server_platform_1accd69fac93d32bd78a2d0cf233cae30a" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>updateProcessStats</name></member>
      <member refid="class_server_platform_1a15fdb8647d5051d53f8127e940e0a754" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>updateSystemInfo</name></member>
      <member refid="class_server_platform_1a8dbe87f22c3151cd5eef01a02e5c790a" prot="public" virt="pure-virtual"><scope>ServerPlatform</scope><name>validateProcessInfo</name></member>
      <member refid="class_server_platform_1a533223e9780ead3266c5a8a0dc54afc3" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>VersionsProcesses</name></member>
      <member refid="class_server_platform_1a6a7870c02d151ca927559f8f26dec3cf" prot="protected" virt="non-virtual"><scope>ServerPlatform</scope><name>versionsProcesses_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
