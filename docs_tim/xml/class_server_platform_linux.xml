<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_server_platform_linux" kind="class" language="C++" prot="public">
    <compoundname>ServerPlatformLinux</compoundname>
    <basecompoundref refid="class_server_platform" prot="public" virt="non-virtual">ServerPlatform</basecompoundref>
    <includes refid="server__platform__linux_8hpp" local="no">server_platform_linux.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_server_platform_linux_1acf10a9cc504c17078b2e4d0a47857368" prot="private" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatformLinux::preparedHybridSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedHybridSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="104" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_linux_1acfe4a93c476527c81b3cb036c3de32c3" prot="private" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatformLinux::preparedDebugSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedDebugSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="105" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_linux_1a3b54ecaa5d8236ca41de2e555f27180d" prot="private" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatformLinux::preparedOldHybridSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedOldHybridSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="106" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_linux_1a0c1768db9deb726c46de43cffc77815c" prot="private" static="no" mutable="no">
        <type><ref refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" kindref="member">StringList</ref></type>
        <definition>StringList ServerPlatformLinux::preparedOldDebugSuffix_</definition>
        <argsstring></argsstring>
        <name>preparedOldDebugSuffix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="107" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_linux_1a99ace56ad311800384ef5dbf83bb8f18" prot="private" static="no" mutable="no">
        <type>uint8</type>
        <definition>uint8 ServerPlatformLinux::hostArchitecture_</definition>
        <argsstring></argsstring>
        <name>hostArchitecture_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="110" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_linux_1a7763716e3813afc89be5026b57f5891a" prot="private" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string ServerPlatformLinux::architecture_</definition>
        <argsstring></argsstring>
        <name>architecture_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="111" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_linux_1aded390ce2759711ca2bf826bf0a320a0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::hasExtendedStats_</definition>
        <argsstring></argsstring>
        <name>hasExtendedStats_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="113" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_server_platform_linux_1a51b1ed5fd0ca5337d7db6f1742d39667" prot="private" static="no" mutable="no">
        <type>BW::string</type>
        <definition>BW::string ServerPlatformLinux::stateFileName_</definition>
        <argsstring></argsstring>
        <name>stateFileName_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="115" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_server_platform_linux_1a63d6b3c8c76b8f38e2854a6b06b07fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ServerPlatformLinux::ServerPlatformLinux</definition>
        <argsstring>(BWMachined &amp;machined)</argsstring>
        <name>ServerPlatformLinux</name>
        <param>
          <type><ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> &amp;</type>
          <declname>machined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machined</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_b_w_machined" kindref="compound">BWMachined</ref> instance to contact when preparing to send data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="19" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="286" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a49cd71b836d07b8f9a96a69b04cb803a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::isProcessRunning</definition>
        <argsstring>(uint16 pid) const </argsstring>
        <name>isProcessRunning</name>
        <reimplements refid="class_server_platform_1a1688fa8cecfa9835e52e16136e15354b">isProcessRunning</reimplements>
        <param>
          <type>uint16</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method checks whether a given PID is running.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID to check the status of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the process is running, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="22" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="393" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a029879dcd9efc0a094ef1c8af5e1278e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::killProcess</definition>
        <argsstring>(uint16 pid, uint8 signal) const </argsstring>
        <name>killProcess</name>
        <reimplements refid="class_server_platform_1a69c35c586999fa5b4d6654ac5947fd7a">killProcess</reimplements>
        <param>
          <type>uint16</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method kills a given process with the specified signal</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID of the process to kill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to send to the process</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="23" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a99bdce7c8dc9190368f160550d38d7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::updateSystemInfo</definition>
        <argsstring>(SystemInfo &amp;systemInfo, ServerInfo *pServerInfo)</argsstring>
        <name>updateSystemInfo</name>
        <reimplements refid="class_server_platform_1a15fdb8647d5051d53f8127e940e0a754">updateSystemInfo</reimplements>
        <param>
          <type><ref refid="struct_system_info" kindref="compound">SystemInfo</ref> &amp;</type>
          <declname>systemInfo</declname>
        </param>
        <param>
          <type>ServerInfo *</type>
          <declname>pServerInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs an explicit update of core system information such as CPU and memory state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>systemInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure to place the updated information into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pServerInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ServerInfo structure to use when performing the update.</para></parameterdescription>
</parameteritem>
</parameterlist>
return true when the update was successful, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="25" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="423" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a7aa417f5a65f1dacbdbcb324e98de631" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::checkCoreDumps</definition>
        <argsstring>(MachineGuardMessage::UserId uid, const BW::string &amp;bwRoot, UserMessage::CoreDumps &amp;coreDumps)</argsstring>
        <name>checkCoreDumps</name>
        <reimplements refid="class_server_platform_1a277f8ad6d827a3e4d91684260ad15d83">checkCoreDumps</reimplements>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type>UserMessage::CoreDumps &amp;</type>
          <declname>coreDumps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method fills a list of CoreDumps with core file summaries for any core files and assertions found under bwRoot.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The UID of the user the core dump check relates to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The root directory to search for the core files in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coreDumps</parametername>
</parameternamelist>
<parameterdescription>
<para>The UserMessage::CoreDumps structure to fill with core file summary information. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="28" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="624" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1afb096ec6a19533a16f2766840c37cd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ServerPlatformLinux::updateCPUInfo</definition>
        <argsstring>(SystemInfo &amp;systemInfo)</argsstring>
        <name>updateCPUInfo</name>
        <reimplements refid="class_server_platform_1aded4afecac1625a2c55dca358eb08b51">updateCPUInfo</reimplements>
        <param>
          <type><ref refid="struct_system_info" kindref="compound">SystemInfo</ref> &amp;</type>
          <declname>systemInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Override from <ref refid="class_server_platform" kindref="compound">ServerPlatform</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="32" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="580" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1aec5e72dab2f8207f8f26b76ab5110d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::canProcessMessageWithUid</definition>
        <argsstring>(int msgUid)</argsstring>
        <name>canProcessMessageWithUid</name>
        <reimplements refid="class_server_platform_1af580d1ba9de576853d9dedb02697e3e0">canProcessMessageWithUid</reimplements>
        <param>
          <type>int</type>
          <declname>msgUid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method determines if a message with a UID attached can be handled by the current platform.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgUid</parametername>
</parameternamelist>
<parameterdescription>
<para>The UID attached to the inbound message.</para></parameterdescription>
</parameteritem>
</parameterlist>
return true when the message can be handled, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="34" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a57be86db2cb4087dcb8c23f803a261da" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>UserMessage *</type>
        <definition>UserMessage * ServerPlatformLinux::addUserToMapByUid</definition>
        <argsstring>(UserMap *pUserMap, int uid)</argsstring>
        <name>addUserToMapByUid</name>
        <reimplements refid="class_server_platform_1a77f7ed8d5f9b28a903d640facdeb41db">addUserToMapByUid</reimplements>
        <param>
          <type><ref refid="class_user_map" kindref="compound">UserMap</ref> *</type>
          <declname>pUserMap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method looks up and initializes a new user with the provided UID.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pUserMap</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="class_user_map" kindref="compound">UserMap</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The UID of the user to add to the map.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when the UserMessage can be populated, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="36" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="658" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a7a3f26a598a06073129a538d54b0a8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>UserMessage *</type>
        <definition>UserMessage * ServerPlatformLinux::addUserToMapByUsername</definition>
        <argsstring>(UserMap *pUserMap, const char *pUserName)</argsstring>
        <name>addUserToMapByUsername</name>
        <reimplements refid="class_server_platform_1ab47d2102b0e09ecd26f5801b2269d8f6">addUserToMapByUsername</reimplements>
        <param>
          <type><ref refid="class_user_map" kindref="compound">UserMap</ref> *</type>
          <declname>pUserMap</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pUserName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method looks up and initializes a new user with the provided username.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pUserMap</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="class_user_map" kindref="compound">UserMap</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pUserName</parametername>
</parameternamelist>
<parameterdescription>
<para>The username attached to the inbound message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when the UserMessage can be populated, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="38" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="695" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a12ff7e7d6c430b9a0461dd19fd2b37e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ServerPlatformLinux::notifyNetworkInitialised</definition>
        <argsstring>(uint16 port)</argsstring>
        <name>notifyNetworkInitialised</name>
        <reimplements refid="class_server_platform_1a09f8d535bf0218d34dd3824bd0cea4e7">notifyNetworkInitialised</reimplements>
        <param>
          <type>uint16</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called from BWMachineD when the network initialisation has been finalised.</para><para>This method provides the opportunity for the platform layer to establish any state information needed from the network layer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The primary communication port BWMachineD is using. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="41" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1026" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a2b91d240f543bafeb04012e4de99cf8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const BW::string &amp;</type>
        <definition>virtual const BW::string&amp; ServerPlatformLinux::stateFileName</definition>
        <argsstring>()</argsstring>
        <name>stateFileName</name>
        <reimplements refid="class_server_platform_1ad8beedf982a8ca4eefe01f48b3fce781">stateFileName</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the full file path in which to store the process state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="47" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1ad4f33ec598181544c9ef11e762989b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ServerPlatformLinux::getProcessCpuMem</definition>
        <argsstring>(BW::ProcessInfo &amp;pi, BW::SystemInfo &amp;si)</argsstring>
        <name>getProcessCpuMem</name>
        <reimplements refid="class_server_platform_1a2776a4c3a61c1f857c66dd55faecc11b">getProcessCpuMem</reimplements>
        <param>
          <type>BW::ProcessInfo &amp;</type>
          <declname>pi</declname>
        </param>
        <param>
          <type>BW::SystemInfo &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="53" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1033" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a91a55b119c7e81a9b501e380ce1e6dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ServerPlatformLinux::notifyRead</definition>
        <argsstring>(int fd)</argsstring>
        <name>notifyRead</name>
        <reimplements refid="class_server_platform_1af27277a14abcc4f6683a4adc386fb7ef">notifyRead</reimplements>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when there is data to read from a file descriptor that was registered when a process was started.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor that was triggered. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="56" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1057" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a4141b8cfb44e9b814d9cb801c86df8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ServerPlatformLinux::notifyReadError</definition>
        <argsstring>(int fd)</argsstring>
        <name>notifyReadError</name>
        <reimplements refid="class_server_platform_1a6756636332f5e4b5c93e38dd2fcea0d2">notifyReadError</reimplements>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when there is an error on a file descriptor that was registered when a process was started. Currently just calls notifyRead, because the main error seen is EPOLLHUP, which happens when the other end shuts the pipe during normal operation. notifyRead will detect if there is an actual error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor that was triggered. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="57" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1125" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a03f060d3352ca61072c90f5e66372c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ServerPlatformLinux::getProcessorSpeeds</definition>
        <argsstring>(BW::vector&lt; float &gt; &amp;speeds)</argsstring>
        <name>getProcessorSpeeds</name>
        <reimplements refid="class_server_platform_1ac27ca4dfec20d31d461373fa66cb37e9">getProcessorSpeeds</reimplements>
        <param>
          <type>BW::vector&lt; float &gt; &amp;</type>
          <declname>speeds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="60" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1131" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1ab0cd0c94ab5b387e2dc956ca6d499a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::startProcess</definition>
        <argsstring>(const char *bwBinaryDir, const char *bwResPath, const char *config, const char *binaryName, MachineGuardMessage::UserId uid, uint16 gid, const char *home, BW::vector&lt; const char * &gt; args, PidMessageWithDestination *pPmwd)</argsstring>
        <name>startProcess</name>
        <reimplements refid="class_server_platform_1a83985fc40d6fe41a865ee59c40191977">startProcess</reimplements>
        <param>
          <type>const char *</type>
          <declname>bwBinaryDir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bwResPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>binaryName</declname>
        </param>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>uint16</type>
          <declname>gid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>home</declname>
        </param>
        <param>
          <type>BW::vector&lt; const char * &gt;</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_message_with_destination" kindref="compound">PidMessageWithDestination</ref> *</type>
          <declname>pPmwd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="66" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1216" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1af12e8e05a0f729eb0893a974c4383b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::validateProcessInfo</definition>
        <argsstring>(const ProcessInfo &amp;processInfo)</argsstring>
        <name>validateProcessInfo</name>
        <reimplements refid="class_server_platform_1a8dbe87f22c3151cd5eef01a02e5c790a">validateProcessInfo</reimplements>
        <param>
          <type>const <ref refid="struct_process_info" kindref="compound">ProcessInfo</ref> &amp;</type>
          <declname>processInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="76" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1366" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a8784c790bfa2902c6dfabd5e83c5b709" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::updateProcessStats</definition>
        <argsstring>(ProcessInfo &amp;pi, const SystemInfo &amp;si)</argsstring>
        <name>updateProcessStats</name>
        <reimplements refid="class_server_platform_1accd69fac93d32bd78a2d0cf233cae30a">updateProcessStats</reimplements>
        <param>
          <type><ref refid="struct_process_info" kindref="compound">ProcessInfo</ref> &amp;</type>
          <declname>pi</declname>
        </param>
        <param>
          <type>const <ref refid="struct_system_info" kindref="compound">SystemInfo</ref> &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="78" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1403" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1aec46d6984bf98b44fe50bd16da55420e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>BW::string</type>
        <definition>BW::string ServerPlatformLinux::getMachineConfigFileName</definition>
        <argsstring>() const </argsstring>
        <name>getMachineConfigFileName</name>
        <reimplements refid="class_server_platform_1a99be6c9cbf60a4ad5d72923f6c501c5c">getMachineConfigFileName</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="81" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1452" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1ae9e153cf1f9a6d5b6f7f5c3a0345e0e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>BW::string</type>
        <definition>BW::string ServerPlatformLinux::getBigWorldConfigFileName</definition>
        <argsstring>() const </argsstring>
        <name>getBigWorldConfigFileName</name>
        <reimplements refid="class_server_platform_1ac1e75324f9efa9b7b239c0855412619a">getBigWorldConfigFileName</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="82" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1458" bodyend="1461"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_server_platform_linux_1a4ba0ce11c36a9ce1def6098d1d7887de" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::checkBinariesExist</definition>
        <argsstring>(MachineGuardMessage::UserId uid, const BW::string &amp;bwRoot, const ProcessSet &amp;set)</argsstring>
        <name>checkBinariesExist</name>
        <reimplements refid="class_server_platform_1a699ee21e633fd36fb4f19e1c0eac2ad2">checkBinariesExist</reimplements>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type>const ProcessSet &amp;</type>
          <declname>processes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method checks if the binaries in the given set exist under the given BW_ROOT path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The user ID we are checking for (used in log output). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The BW_ROOT to check for binaries under. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if there is a binary for each process name in the given set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="85" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="1005" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a246828b7d73cb37d19ae29406d539dd8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::directoryExists</definition>
        <argsstring>(const BW::string &amp;directoryPath)</argsstring>
        <name>directoryExists</name>
        <reimplements refid="class_server_platform_1a45771fbe5cda9fe043635e025d43e021">directoryExists</reimplements>
        <param>
          <type>const BW::string &amp;</type>
          <declname>directoryPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="93" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="381" bodyend="387"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_server_platform_linux_1ad7292c8c2a19479287226b2b62a0e42f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ServerPlatformLinux::initKernelVersion</definition>
        <argsstring>()</argsstring>
        <name>initKernelVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method checks the local host&apos;s kernel version.</para><para>The kernel version can determine the structure of key data read from the /proc filesystem which allows bwmachined to provide more detailed system information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="96" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="333" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a2221e28fcff0d657a2685fa62ae8d394" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::initArchitecture</definition>
        <argsstring>()</argsstring>
        <name>initArchitecture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether we are running on a 32bit or 64bit machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="97" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="303" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_server_platform_linux_1a72998c32863a1cf6f0c87aa3f8f93204" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ServerPlatformLinux::visitBinaryPaths</definition>
        <argsstring>(MachineGuardMessage::UserId uid, const BW::string &amp;bwRoot, BinaryPathVisitor &amp;visitor, const char *purposeString=NULL)</argsstring>
        <name>visitBinaryPaths</name>
        <param>
          <type>MachineGuardMessage::UserId</type>
          <declname>uid</declname>
        </param>
        <param>
          <type>const BW::string &amp;</type>
          <declname>bwRoot</declname>
        </param>
        <param>
          <type><ref refid="class_binary_path_visitor" kindref="compound">BinaryPathVisitor</ref> &amp;</type>
          <declname>visitor</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>purposeString</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method visits all possible existing binary paths.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>The UID we are searching under (used for log output). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bwRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>The BW_ROOT to visit binary paths for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The visitor object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>purposeString</parametername>
</parameternamelist>
<parameterdescription>
<para>The purpose for visiting. Used for log output.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/bwmachined/server_platform_linux.hpp" line="99" column="1" bodyfile="tools/bwmachined/server_platform_linux.cpp" bodystart="836" bodyend="908"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class implements platform operations for Linux. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2623">
        <label>ServerPlatformLinux</label>
        <link refid="class_server_platform_linux"/>
        <childnode refid="2624" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2624">
        <label>ServerPlatform</label>
        <link refid="class_server_platform"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2629">
        <label>WrappedMessageHandler</label>
        <link refid="class_wrapped_message_handler"/>
      </node>
      <node id="2632">
        <label>Listeners&lt; ListenerMessage &gt;</label>
        <link refid="class_listeners"/>
      </node>
      <node id="2627">
        <label>BWMachined</label>
        <link refid="class_b_w_machined"/>
        <childnode refid="2628" relation="public-inheritance">
        </childnode>
        <childnode refid="2629" relation="usage">
          <edgelabel>wrappedMessageHandler_</edgelabel>
        </childnode>
        <childnode refid="2630" relation="usage">
          <edgelabel>syslogHandler_</edgelabel>
        </childnode>
        <childnode refid="2632" relation="usage">
          <edgelabel>deathListeners_</edgelabel>
          <edgelabel>birthListeners_</edgelabel>
        </childnode>
        <childnode refid="2633" relation="usage">
          <edgelabel>systemInfo_</edgelabel>
        </childnode>
        <childnode refid="2626" relation="usage">
          <edgelabel>pServerPlatform_</edgelabel>
        </childnode>
        <childnode refid="2636" relation="usage">
          <edgelabel>users_</edgelabel>
        </childnode>
      </node>
      <node id="2635">
        <label>MaxStat</label>
        <link refid="struct_max_stat"/>
        <childnode refid="2634" relation="usage">
          <edgelabel>val</edgelabel>
          <edgelabel>max</edgelabel>
        </childnode>
      </node>
      <node id="2628">
        <label>Singleton&lt; BWMachined &gt;</label>
      </node>
      <node id="2625">
        <label>ServerPlatformLinux</label>
        <link refid="class_server_platform_linux"/>
        <childnode refid="2626" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2626">
        <label>ServerPlatform</label>
        <link refid="class_server_platform"/>
        <childnode refid="2627" relation="usage">
          <edgelabel>machined_</edgelabel>
        </childnode>
      </node>
      <node id="2633">
        <label>SystemInfo</label>
        <link refid="struct_system_info"/>
        <childnode refid="2634" relation="usage">
          <edgelabel>packTotIn</edgelabel>
          <edgelabel>packDropOut</edgelabel>
          <edgelabel>packTotOut</edgelabel>
          <edgelabel>packDropIn</edgelabel>
        </childnode>
        <childnode refid="2635" relation="usage">
          <edgelabel>iowait</edgelabel>
          <edgelabel>mem</edgelabel>
        </childnode>
      </node>
      <node id="2636">
        <label>UserMap</label>
        <link refid="class_user_map"/>
      </node>
      <node id="2634">
        <label>Stat&lt; uint64 &gt;</label>
        <link refid="class_stat"/>
      </node>
      <node id="2631">
        <label>DebugMessageCallback</label>
      </node>
      <node id="2630">
        <label>SyslogMessageHandler</label>
        <link refid="class_syslog_message_handler"/>
        <childnode refid="2631" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="tools/bwmachined/server_platform_linux.hpp" line="17" column="1" bodyfile="tools/bwmachined/server_platform_linux.hpp" bodystart="16" bodyend="116"/>
    <listofallmembers>
      <member refid="class_server_platform_linux_1a57be86db2cb4087dcb8c23f803a261da" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>addUserToMapByUid</name></member>
      <member refid="class_server_platform_linux_1a7a3f26a598a06073129a538d54b0a8a9" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>addUserToMapByUsername</name></member>
      <member refid="class_server_platform_linux_1a7763716e3813afc89be5026b57f5891a" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>architecture_</name></member>
      <member refid="class_server_platform_1a33a331d1bbd02d5e73f1e60d0b7fdc60" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>bigworldConfFile_</name></member>
      <member refid="class_server_platform_linux_1aec5e72dab2f8207f8f26b76ab5110d15" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>canProcessMessageWithUid</name></member>
      <member refid="class_server_platform_linux_1a4ba0ce11c36a9ce1def6098d1d7887de" prot="protected" virt="virtual"><scope>ServerPlatformLinux</scope><name>checkBinariesExist</name></member>
      <member refid="class_server_platform_linux_1a7aa417f5a65f1dacbdbcb324e98de631" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>checkCoreDumps</name></member>
      <member refid="class_server_platform_1a03a2e2ebd73192b1b057da6e32a1581b" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>cleanupHandlers</name></member>
      <member refid="class_server_platform_1a712bd3dc2135434c3e8353212f400ba5" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>configDirectoryExists</name></member>
      <member refid="class_server_platform_1a4ab8362df8930381798b2ef061cb81e4" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>CreateServerPlatform</name></member>
      <member refid="class_server_platform_1a98a3404894c8f2300a277d97371593f3" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>determineVersion</name></member>
      <member refid="class_server_platform_linux_1a246828b7d73cb37d19ae29406d539dd8" prot="protected" virt="virtual"><scope>ServerPlatformLinux</scope><name>directoryExists</name></member>
      <member refid="class_server_platform_1a451a7855334389b6699617c9226efa8b" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>findUserBinaryDirForConfig</name></member>
      <member refid="class_server_platform_linux_1ae9e153cf1f9a6d5b6f7f5c3a0345e0e6" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>getBigWorldConfigFileName</name></member>
      <member refid="class_server_platform_linux_1aec46d6984bf98b44fe50bd16da55420e" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>getMachineConfigFileName</name></member>
      <member refid="class_server_platform_linux_1ad4f33ec598181544c9ef11e762989b18" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>getProcessCpuMem</name></member>
      <member refid="class_server_platform_linux_1a03f060d3352ca61072c90f5e66372c99" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>getProcessorSpeeds</name></member>
      <member refid="class_server_platform_linux_1aded390ce2759711ca2bf826bf0a320a0" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>hasExtendedStats_</name></member>
      <member refid="class_server_platform_linux_1a99ace56ad311800384ef5dbf83bb8f18" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>hostArchitecture_</name></member>
      <member refid="class_server_platform_linux_1a2221e28fcff0d657a2685fa62ae8d394" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>initArchitecture</name></member>
      <member refid="class_server_platform_1a67c3864f0e45099891a62a3e5b049032" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>initConfigSuffixes</name></member>
      <member refid="class_server_platform_linux_1ad7292c8c2a19479287226b2b62a0e42f" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>initKernelVersion</name></member>
      <member refid="class_server_platform_1a91367f28953366da559374281ee92c95" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>initVersionsProcesses</name></member>
      <member refid="class_server_platform_1ab723dffb26c57d8c3617b60ab5c9ca0a" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>isInitialised</name></member>
      <member refid="class_server_platform_1aadcd5c4f9233446221b6bbaaa8f22ed9" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>isInitialised_</name></member>
      <member refid="class_server_platform_linux_1a49cd71b836d07b8f9a96a69b04cb803a" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>isProcessRunning</name></member>
      <member refid="class_server_platform_linux_1a029879dcd9efc0a094ef1c8af5e1278e" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>killProcess</name></member>
      <member refid="class_server_platform_1a42581ff1103889ffdfd73093fbbb9c49" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>machined_</name></member>
      <member refid="class_server_platform_1aba2a5af469803ac8f5d006056c1e8bb3" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>machinedConfFile_</name></member>
      <member refid="class_server_platform_linux_1a12ff7e7d6c430b9a0461dd19fd2b37e0" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>notifyNetworkInitialised</name></member>
      <member refid="class_server_platform_linux_1a91a55b119c7e81a9b501e380ce1e6dd6" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>notifyRead</name></member>
      <member refid="class_server_platform_linux_1a4141b8cfb44e9b814d9cb801c86df8f6" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>notifyReadError</name></member>
      <member refid="class_server_platform_1a6a72b769a503e5853bd789050ce6c4ea" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>notifyWrite</name></member>
      <member refid="class_server_platform_1a5bd187d04c1fad6cb420d1facf95165c" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>notifyWriteError</name></member>
      <member refid="class_server_platform_linux_1acfe4a93c476527c81b3cb036c3de32c3" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>preparedDebugSuffix_</name></member>
      <member refid="class_server_platform_linux_1acf10a9cc504c17078b2e4d0a47857368" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>preparedHybridSuffix_</name></member>
      <member refid="class_server_platform_linux_1a0c1768db9deb726c46de43cffc77815c" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>preparedOldDebugSuffix_</name></member>
      <member refid="class_server_platform_linux_1a3b54ecaa5d8236ca41de2e555f27180d" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>preparedOldHybridSuffix_</name></member>
      <member refid="class_server_platform_1a1f79307e0b01c385913fb76d64b029bb" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>ProcessSet</name></member>
      <member refid="class_server_platform_1a55593626f0e0bba286872bf8ece8b48b" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>s_expiredReadHandlers</name></member>
      <member refid="class_server_platform_1a7e576073bc7068bbdea372ce94391f42" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>s_expiredWriteHandlers</name></member>
      <member refid="class_server_platform_1a40accbaa7b115125539f44cb25df3fcb" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>s_readHandlers</name></member>
      <member refid="class_server_platform_1ad9f6553d44e49d383b8b6f130eba49ac" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>s_writeHandlers</name></member>
      <member refid="class_server_platform_1a20986cb4f1483bf6a702893c9dcb458b" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>ServerPlatform</name></member>
      <member refid="class_server_platform_linux_1a63d6b3c8c76b8f38e2854a6b06b07fa0" prot="public" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>ServerPlatformLinux</name></member>
      <member refid="class_server_platform_linux_1ab0cd0c94ab5b387e2dc956ca6d499a05" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>startProcess</name></member>
      <member refid="class_server_platform_linux_1a2b91d240f543bafeb04012e4de99cf8c" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>stateFileName</name></member>
      <member refid="class_server_platform_linux_1a51b1ed5fd0ca5337d7db6f1742d39667" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>stateFileName_</name></member>
      <member refid="class_server_platform_1a5ea03261fef71821068ef416580b4034" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>StringList</name></member>
      <member refid="class_server_platform_linux_1afb096ec6a19533a16f2766840c37cd3b" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>updateCPUInfo</name></member>
      <member refid="class_server_platform_linux_1a8784c790bfa2902c6dfabd5e83c5b709" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>updateProcessStats</name></member>
      <member refid="class_server_platform_linux_1a99bdce7c8dc9190368f160550d38d7b8" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>updateSystemInfo</name></member>
      <member refid="class_server_platform_linux_1af12e8e05a0f729eb0893a974c4383b8e" prot="public" virt="virtual"><scope>ServerPlatformLinux</scope><name>validateProcessInfo</name></member>
      <member refid="class_server_platform_1a533223e9780ead3266c5a8a0dc54afc3" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>VersionsProcesses</name></member>
      <member refid="class_server_platform_1a6a7870c02d151ca927559f8f26dec3cf" prot="protected" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>versionsProcesses_</name></member>
      <member refid="class_server_platform_linux_1a72998c32863a1cf6f0c87aa3f8f93204" prot="private" virt="non-virtual"><scope>ServerPlatformLinux</scope><name>visitBinaryPaths</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
