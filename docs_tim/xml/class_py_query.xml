<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_py_query" kind="class" language="C++" prot="public">
    <compoundname>PyQuery</compoundname>
    <basecompoundref prot="public" virt="non-virtual">PyObject</basecompoundref>
    <includes refid="py__query_8hpp" local="no">py_query.hpp</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_py_query_1a9f12084664e54ddeee538cb687e56502" prot="public" static="yes" mutable="no">
        <type>PyTypeObject</type>
        <definition>PyTypeObject PyQuery::s_type_</definition>
        <argsstring></argsstring>
        <name>s_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type object for <ref refid="class_py_query" kindref="compound">PyQuery</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="62" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_py_query_1af5b714f8a83ad8cc59d4744014207553" prot="protected" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">QueryParamsPtr</ref></type>
        <definition>QueryParamsPtr PyQuery::pParams_</definition>
        <argsstring></argsstring>
        <name>pParams_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="82" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1aeb704a0398e92f1a4572432a501768f7" prot="protected" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">QueryRangePtr</ref></type>
        <definition>QueryRangePtr PyQuery::pRange_</definition>
        <argsstring></argsstring>
        <name>pRange_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="83" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1a61661f8ceb90185351e67f3c2b4a222a" prot="protected" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">PyBWLogPtr</ref></type>
        <definition>PyBWLogPtr PyQuery::pBWLog_</definition>
        <argsstring></argsstring>
        <name>pBWLog_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="85" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1abafcd2be7f22e470c3f719e2e8f6ab02" prot="protected" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">UserLogReaderPtr</ref></type>
        <definition>UserLogReaderPtr PyQuery::pUserLogReader_</definition>
        <argsstring></argsstring>
        <name>pUserLogReader_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="87" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1abb8bf74072c05aa63714af7988a580e9" prot="protected" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">PyQueryResultPtr</ref></type>
        <definition>PyQueryResultPtr PyQuery::pContextResult_</definition>
        <argsstring></argsstring>
        <name>pContextResult_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="89" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1af1d80500bc4f40048b978b96ca38f400" prot="protected" static="no" mutable="no">
        <type><ref refid="class_query_range_iterator" kindref="compound">QueryRange::iterator</ref></type>
        <definition>QueryRange::iterator PyQuery::contextPoint_</definition>
        <argsstring></argsstring>
        <name>contextPoint_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="91" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1a62a83dc2c909c28e688c4b5c597dca61" prot="protected" static="no" mutable="no">
        <type><ref refid="class_query_range_iterator" kindref="compound">QueryRange::iterator</ref></type>
        <definition>QueryRange::iterator PyQuery::contextCurr_</definition>
        <argsstring></argsstring>
        <name>contextCurr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="92" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1a3984a3bbc1a8d72fe56bfab73e766661" prot="protected" static="no" mutable="no">
        <type><ref refid="class_query_range_iterator" kindref="compound">QueryRange::iterator</ref></type>
        <definition>QueryRange::iterator PyQuery::mark_</definition>
        <argsstring></argsstring>
        <name>mark_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="93" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1a8b3c05baddb3c29294b8b52d1281bd4c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PyQuery::separatorReturned_</definition>
        <argsstring></argsstring>
        <name>separatorReturned_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="95" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1ab7290f4f3a8e64aa7291589ef510a1b9" prot="protected" static="no" mutable="no">
        <type><ref refid="class_smart_pointer" kindref="compound">PyObjectPtr</ref></type>
        <definition>PyObjectPtr PyQuery::pCallback_</definition>
        <argsstring></argsstring>
        <name>pCallback_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="97" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1a6212cfd7d4ed2698b6127f72a9613ed4" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float PyQuery::timeout_</definition>
        <argsstring></argsstring>
        <name>timeout_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="99" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_py_query_1ae17c9177ff180825cd5d1cd14ecb2e22" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int PyQuery::timeoutGranularity_</definition>
        <argsstring></argsstring>
        <name>timeoutGranularity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="100" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_py_query_1a1ae1100018b75406186f83d28dc3ca63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyQuery::PyQuery</definition>
        <argsstring>(PyBWLogPtr pBWLog, QueryParamsPtr pParams, UserLogReaderPtr pUserLog)</argsstring>
        <name>PyQuery</name>
        <param>
          <type><ref refid="class_smart_pointer" kindref="compound">PyBWLogPtr</ref></type>
          <declname>pBWLog</declname>
        </param>
        <param>
          <type><ref refid="class_smart_pointer" kindref="compound">QueryParamsPtr</ref></type>
          <declname>pParams</declname>
        </param>
        <param>
          <type><ref refid="class_smart_pointer" kindref="compound">UserLogReaderPtr</ref></type>
          <declname>pUserLog</declname>
          <defname>pUserLogReader</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pBWLog</parametername>
</parameternamelist>
<parameterdescription>
<para>The log object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pParams</parametername>
</parameternamelist>
<parameterdescription>
<para>The query parameters. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pUserLogReader</parametername>
</parameternamelist>
<parameterdescription>
<para>The log reader. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="34" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="501" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a6cc71fbf23c7b8a254f7380fda52c517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::pyGetAttribute</definition>
        <argsstring>(const char *attr)</argsstring>
        <name>pyGetAttribute</name>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns an attribute object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="38" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a9e2f0ed92e59d853373a83a2d3d25e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_get</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_get</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch at most the next &apos;n&apos; search results. Passing 0 as the argument means fetch all possible results. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="40" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="185" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a3c3f2a4c0e8bfcacfa9969aed4c65a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_inReverse</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_inReverse</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this query will return results in reverse order </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="41" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="226" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1aed7e7895feb5e1715d8a8f82dd4a39b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_getProgress</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_getProgress</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a tuple containing the number of entries seen as well as the total number of entries in the provided range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="42" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1aedb7fffdc6019924dad5b80c10783639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_resume</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_resume</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resume a query that was started earlier, recalculating the endpoint of the search and updating any mappings that might have changed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="43" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="278" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1add0936f08a4962ba6ea26dd61d2c0413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_tell</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_tell</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If you pass &apos;True&apos; as an argument to this method, it will return the address of the end of the query. Without an argument, the expected behaviour of returning the current position of the query is exhibited. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="44" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="304" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a8c4409179587327a9e0c2b1c81891df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_seek</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_seek</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method progresses the offset to the requested entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="45" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="348" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a233c2ba346248d5f1a8213ebfe2302e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_step</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_step</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method implements functionality similar to that of fseek( fp, +/-1, SEEK_CUR ), however for log queries.</para><para>Seeking forwards can be done as many times as you want, but you can only seek backwards once, much like ungetc(). Note that passing FORWARDS for the argument means search forwards with respect to the query&apos;s direction, as opposed to towards the end of the log. Same goes for BACKWARDS. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="46" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="399" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1aae5edb90fabfccb3d5ab6381fb519650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::py_setTimeout</definition>
        <argsstring>(PyObject *args)</argsstring>
        <name>py_setTimeout</name>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method sets a timeout callback that will be called inside Query::next() at a specified interval. If the callback raises an exception, this will cause <ref refid="class_py_query_1a00d74944aa1f78ffb57407c2c1ce71e5" kindref="member">PyQuery::next()</ref> to abort prematurely. The primary use of this mechanism is to limit the runtime of sparse queries. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="47" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="440" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1aaf34a8f3ab049c0a5a9de140a6e79c7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PyQuery::incRef</definition>
        <argsstring>() const </argsstring>
        <name>incRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="49" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1ac7b897b9889df124d82c7886c28a09ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PyQuery::decRef</definition>
        <argsstring>() const </argsstring>
        <name>decRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="50" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1af5f4f0f9a8d9ec7991f7c77d0b09fe92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int PyQuery::refCount</definition>
        <argsstring>() const </argsstring>
        <name>refCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="52" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a00d74944aa1f78ffb57407c2c1ce71e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::next</definition>
        <argsstring>()</argsstring>
        <name>next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used by the iterator helpers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="65" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="701" bodyend="762"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_py_query_1a4d08a3880b593a0032e2a14848f1d627" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::_tp_repr</definition>
        <argsstring>(PyObject *pObj)</argsstring>
        <name>_tp_repr</name>
        <param>
          <type>PyObject *</type>
          <declname>pObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method implements the Python repr method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="54" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="469" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1adfb0536649e8624b8a0b4d2a9ff1cbef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::_tp_getattro</definition>
        <argsstring>(PyObject *pObj, PyObject *name)</argsstring>
        <name>_tp_getattro</name>
        <param>
          <type>PyObject *</type>
          <declname>pObj</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method invokes the query&apos;s getattribute method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="55" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="482" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a527a586c06e7c41902d4d298d59a82ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void PyQuery::_tp_dealloc</definition>
        <argsstring>(PyObject *pObj)</argsstring>
        <name>_tp_dealloc</name>
        <param>
          <type>PyObject *</type>
          <declname>pObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="57" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_py_query_1aa93636679b190312a6cab5d097225533" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_py_query_result" kindref="compound">PyQueryResult</ref> *</type>
        <definition>PyQueryResult * PyQuery::getResultForEntry</definition>
        <argsstring>(const LogEntry &amp;entry, bool filter)</argsstring>
        <name>getResultForEntry</name>
        <param>
          <type>const <ref refid="class_log_entry" kindref="compound">LogEntry</ref> &amp;</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns the PyQueryResult* for the provided entry, or NULL if filter is true and the entry doesn&apos;t pass the filter criteria (raises an appropriate exception). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="71" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="533" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1afd387401f1bf03c7bc502fcf9109a97b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::getContextLines</definition>
        <argsstring>()</argsstring>
        <name>getContextLines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method reads and returns the next context entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="73" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="643" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1aef93a559872f9f35ec4e4cbcc2ea6e0e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject * PyQuery::updateContextLines</definition>
        <argsstring>(PyQueryResult *pResult, int numLinesOfContext)</argsstring>
        <name>updateContextLines</name>
        <param>
          <type><ref refid="class_py_query_result" kindref="compound">PyQueryResult</ref> *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numLinesOfContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used by <ref refid="class_py_query_1a00d74944aa1f78ffb57407c2c1ce71e5" kindref="member">next()</ref> to update the current Query context. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="75" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="768" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="class_py_query_1a3b0db52eb2a82a05d22993defb422494" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PyQuery::interpolate</definition>
        <argsstring>(const LogStringInterpolator *handler, QueryRangePtr pRange, BW::string &amp;dest)</argsstring>
        <name>interpolate</name>
        <param>
          <type>const <ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="class_smart_pointer" kindref="compound">QueryRangePtr</ref></type>
          <declname>pRange</declname>
        </param>
        <param>
          <type>BW::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used to interpolate the given query range&apos;s with the given interpolator into the destination string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/py_query.hpp" line="78" column="1" bodyfile="tools/message_logger/py_query.cpp" bodystart="821" bodyend="836"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Generator-style object for iterating over query results. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2254">
        <label>PyObject</label>
      </node>
      <node id="2253">
        <label>PyQuery</label>
        <link refid="class_py_query"/>
        <childnode refid="2254" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2262">
        <label>SmartPointer&lt; PyObject &gt;</label>
        <link refid="class_smart_pointer"/>
      </node>
      <node id="2260">
        <label>SmartPointer&lt; QueryParams &gt;</label>
        <link refid="class_smart_pointer"/>
      </node>
      <node id="2257">
        <label>SmartPointer&lt; PyBWLog &gt;</label>
        <link refid="class_smart_pointer"/>
      </node>
      <node id="2258">
        <label>SmartPointer&lt; UserLogReader &gt;</label>
        <link refid="class_smart_pointer"/>
      </node>
      <node id="2261">
        <label>QueryRangeIterator</label>
        <link refid="class_query_range_iterator"/>
      </node>
      <node id="2259">
        <label>SmartPointer&lt; QueryRange &gt;</label>
        <link refid="class_smart_pointer"/>
      </node>
      <node id="2256">
        <label>PyObject</label>
      </node>
      <node id="2255">
        <label>PyQuery</label>
        <link refid="class_py_query"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
        <childnode refid="2257" relation="usage">
          <edgelabel>pBWLog_</edgelabel>
        </childnode>
        <childnode refid="2258" relation="usage">
          <edgelabel>pUserLogReader_</edgelabel>
        </childnode>
        <childnode refid="2259" relation="usage">
          <edgelabel>pRange_</edgelabel>
        </childnode>
        <childnode refid="2260" relation="usage">
          <edgelabel>pParams_</edgelabel>
        </childnode>
        <childnode refid="2261" relation="usage">
          <edgelabel>contextCurr_</edgelabel>
          <edgelabel>contextPoint_</edgelabel>
          <edgelabel>mark_</edgelabel>
        </childnode>
        <childnode refid="2262" relation="usage">
          <edgelabel>pCallback_</edgelabel>
        </childnode>
        <childnode refid="2263" relation="usage">
          <edgelabel>pContextResult_</edgelabel>
        </childnode>
      </node>
      <node id="2263">
        <label>SmartPointer&lt; PyQueryResult &gt;</label>
        <link refid="class_smart_pointer"/>
      </node>
    </collaborationgraph>
    <location file="tools/message_logger/py_query.hpp" line="31" column="1" bodyfile="tools/message_logger/py_query.hpp" bodystart="30" bodyend="101"/>
    <listofallmembers>
      <member refid="class_py_query_1a527a586c06e7c41902d4d298d59a82ff" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>_tp_dealloc</name></member>
      <member refid="class_py_query_1adfb0536649e8624b8a0b4d2a9ff1cbef" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>_tp_getattro</name></member>
      <member refid="class_py_query_1a4d08a3880b593a0032e2a14848f1d627" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>_tp_repr</name></member>
      <member refid="class_py_query_1a62a83dc2c909c28e688c4b5c597dca61" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>contextCurr_</name></member>
      <member refid="class_py_query_1af1d80500bc4f40048b978b96ca38f400" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>contextPoint_</name></member>
      <member refid="class_py_query_1ac7b897b9889df124d82c7886c28a09ea" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>decRef</name></member>
      <member refid="class_py_query_1afd387401f1bf03c7bc502fcf9109a97b" prot="private" virt="non-virtual"><scope>PyQuery</scope><name>getContextLines</name></member>
      <member refid="class_py_query_1aa93636679b190312a6cab5d097225533" prot="private" virt="non-virtual"><scope>PyQuery</scope><name>getResultForEntry</name></member>
      <member refid="class_py_query_1aaf34a8f3ab049c0a5a9de140a6e79c7c" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>incRef</name></member>
      <member refid="class_py_query_1a3b0db52eb2a82a05d22993defb422494" prot="private" virt="non-virtual"><scope>PyQuery</scope><name>interpolate</name></member>
      <member refid="class_py_query_1a3984a3bbc1a8d72fe56bfab73e766661" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>mark_</name></member>
      <member refid="class_py_query_1a00d74944aa1f78ffb57407c2c1ce71e5" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>next</name></member>
      <member refid="class_py_query_1a61661f8ceb90185351e67f3c2b4a222a" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>pBWLog_</name></member>
      <member refid="class_py_query_1ab7290f4f3a8e64aa7291589ef510a1b9" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>pCallback_</name></member>
      <member refid="class_py_query_1abb8bf74072c05aa63714af7988a580e9" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>pContextResult_</name></member>
      <member refid="class_py_query_1af5b714f8a83ad8cc59d4744014207553" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>pParams_</name></member>
      <member refid="class_py_query_1aeb704a0398e92f1a4572432a501768f7" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>pRange_</name></member>
      <member refid="class_py_query_1abafcd2be7f22e470c3f719e2e8f6ab02" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>pUserLogReader_</name></member>
      <member refid="class_py_query_1a9e2f0ed92e59d853373a83a2d3d25e54" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_get</name></member>
      <member refid="class_py_query_1aed7e7895feb5e1715d8a8f82dd4a39b4" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_getProgress</name></member>
      <member refid="class_py_query_1a3c3f2a4c0e8bfcacfa9969aed4c65a33" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_inReverse</name></member>
      <member refid="class_py_query_1aedb7fffdc6019924dad5b80c10783639" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_resume</name></member>
      <member refid="class_py_query_1a8c4409179587327a9e0c2b1c81891df8" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_seek</name></member>
      <member refid="class_py_query_1aae5edb90fabfccb3d5ab6381fb519650" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_setTimeout</name></member>
      <member refid="class_py_query_1a233c2ba346248d5f1a8213ebfe2302e2" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_step</name></member>
      <member refid="class_py_query_1add0936f08a4962ba6ea26dd61d2c0413" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>py_tell</name></member>
      <member refid="class_py_query_1a6cc71fbf23c7b8a254f7380fda52c517" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>pyGetAttribute</name></member>
      <member refid="class_py_query_1a1ae1100018b75406186f83d28dc3ca63" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>PyQuery</name></member>
      <member refid="class_py_query_1af5f4f0f9a8d9ec7991f7c77d0b09fe92" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>refCount</name></member>
      <member refid="class_py_query_1a9f12084664e54ddeee538cb687e56502" prot="public" virt="non-virtual"><scope>PyQuery</scope><name>s_type_</name></member>
      <member refid="class_py_query_1a8b3c05baddb3c29294b8b52d1281bd4c" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>separatorReturned_</name></member>
      <member refid="class_py_query_1a6212cfd7d4ed2698b6127f72a9613ed4" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>timeout_</name></member>
      <member refid="class_py_query_1ae17c9177ff180825cd5d1cd14ecb2e22" prot="protected" virt="non-virtual"><scope>PyQuery</scope><name>timeoutGranularity_</name></member>
      <member refid="class_py_query_1aef93a559872f9f35ec4e4cbcc2ea6e0e" prot="private" virt="non-virtual"><scope>PyQuery</scope><name>updateContextLines</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
