<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_format_strings" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>FormatStrings</compoundname>
    <derivedcompoundref refid="class_format_strings_m_l_d_b" prot="public" virt="non-virtual">FormatStringsMLDB</derivedcompoundref>
    <derivedcompoundref refid="class_format_strings_mongo_d_b" prot="public" virt="non-virtual">FormatStringsMongoDB</derivedcompoundref>
    <includes refid="format__strings_8hpp" local="no">format_strings.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_format_strings_1affca51aa652e3e206f3a32bcc408ab7a" prot="private" static="no">
        <type>BW::map&lt; BW::string, <ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> * &gt;</type>
        <definition>typedef BW::map&lt; BW::string, LogStringInterpolator* &gt; FormatStrings::FormatMap</definition>
        <argsstring></argsstring>
        <name>FormatMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="38" column="1" bodyfile="tools/message_logger/format_strings.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_format_strings_1abe98a3e0795c6a2e76d43423dd4974f2" prot="private" static="no" mutable="no">
        <type>FormatMap</type>
        <definition>FormatMap FormatStrings::formatMap_</definition>
        <argsstring></argsstring>
        <name>formatMap_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="39" column="1" bodyfile="tools/message_logger/format_strings.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_format_strings_1ab33e145ffff994a46a94dd17de70605b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BW_BEGIN_NAMESPACE FormatStrings::~FormatStrings</definition>
        <argsstring>()</argsstring>
        <name>~FormatStrings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="20" column="1" bodyfile="tools/message_logger/format_strings.cpp" bodystart="10" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_format_strings_1afca5ed351b8dc30f93f919103fdf1cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool FormatStrings::writeFormatStringToDB</definition>
        <argsstring>(LogStringInterpolator *pHandler)=0</argsstring>
        <name>writeFormatStringToDB</name>
        <reimplementedby refid="class_format_strings_mongo_d_b_1a95f1b4cbc6eb8456f3483632a650e89c">writeFormatStringToDB</reimplementedby>
        <reimplementedby refid="class_format_strings_m_l_d_b_1a736059da669cffbf729bbb81602d50fd">writeFormatStringToDB</reimplementedby>
        <param>
          <type><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
          <declname>pHandler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_format_strings_1afd330c110f3a455669db0987a59d66ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool FormatStrings::canAppendToDB</definition>
        <argsstring>()=0</argsstring>
        <name>canAppendToDB</name>
        <reimplementedby refid="class_format_strings_mongo_d_b_1a00b4a2d9f18a5cc08f920ec67bad1b4c">canAppendToDB</reimplementedby>
        <reimplementedby refid="class_format_strings_m_l_d_b_1af473b260a43da4fc6e32bc39ed790316">canAppendToDB</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_format_strings_1afd22a14b8a09eadcbe10f112a69be9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
        <definition>LogStringInterpolator * FormatStrings::resolve</definition>
        <argsstring>(const BW::string &amp;fmt)</argsstring>
        <name>resolve</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If we&apos;re in write mode and the fmt string passed in does not currently exist in the mapping, it will be added to db. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="26" column="1" bodyfile="tools/message_logger/format_strings.cpp" bodystart="41" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_format_strings_1a272117842c12a2aaaafbff27a1fb58c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FormatStringList</type>
        <definition>FormatStringList FormatStrings::getFormatStrings</definition>
        <argsstring>() const </argsstring>
        <name>getFormatStrings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns a list of all the format available format strings.</para><para><simplesect kind="return"><para>A BW::vector of BW::strings. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="28" column="1" bodyfile="tools/message_logger/format_strings.cpp" bodystart="81" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_format_strings_1af20060e6b46b3115d1bf75941bfeb78e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void FormatStrings::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <reimplementedby refid="class_format_strings_m_l_d_b_1a6ca2a6bdb4220ffac1034c9a8d6b5160">clear</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is to clear our current self knowledge. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="31" column="1" bodyfile="tools/message_logger/format_strings.cpp" bodystart="24" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_format_strings_1ad054866a3a76994cf480aec71555bebf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FormatStrings::addFormatStringToMap</definition>
        <argsstring>(const BW::string &amp;fmt, LogStringInterpolator *pHandler)</argsstring>
        <name>addFormatStringToMap</name>
        <param>
          <type>const BW::string &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="class_log_string_interpolator" kindref="compound">LogStringInterpolator</ref> *</type>
          <declname>pHandler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method add the new format string to the map. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tools/message_logger/format_strings.hpp" line="33" column="1" bodyfile="tools/message_logger/format_strings.cpp" bodystart="99" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Handles the global format strings mapping and file. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1365">
        <label>FormatStringsMongoDB</label>
        <link refid="class_format_strings_mongo_d_b"/>
        <childnode refid="1363" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1364">
        <label>FormatStringsMLDB</label>
        <link refid="class_format_strings_m_l_d_b"/>
        <childnode refid="1363" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1363">
        <label>FormatStrings</label>
        <link refid="class_format_strings"/>
      </node>
    </inheritancegraph>
    <location file="tools/message_logger/format_strings.hpp" line="18" column="1" bodyfile="tools/message_logger/format_strings.hpp" bodystart="17" bodyend="40"/>
    <listofallmembers>
      <member refid="class_format_strings_1ad054866a3a76994cf480aec71555bebf" prot="protected" virt="non-virtual"><scope>FormatStrings</scope><name>addFormatStringToMap</name></member>
      <member refid="class_format_strings_1afd330c110f3a455669db0987a59d66ed" prot="public" virt="pure-virtual"><scope>FormatStrings</scope><name>canAppendToDB</name></member>
      <member refid="class_format_strings_1af20060e6b46b3115d1bf75941bfeb78e" prot="protected" virt="virtual"><scope>FormatStrings</scope><name>clear</name></member>
      <member refid="class_format_strings_1affca51aa652e3e206f3a32bcc408ab7a" prot="private" virt="non-virtual"><scope>FormatStrings</scope><name>FormatMap</name></member>
      <member refid="class_format_strings_1abe98a3e0795c6a2e76d43423dd4974f2" prot="private" virt="non-virtual"><scope>FormatStrings</scope><name>formatMap_</name></member>
      <member refid="class_format_strings_1a272117842c12a2aaaafbff27a1fb58c0" prot="public" virt="non-virtual"><scope>FormatStrings</scope><name>getFormatStrings</name></member>
      <member refid="class_format_strings_1afd22a14b8a09eadcbe10f112a69be9cf" prot="public" virt="non-virtual"><scope>FormatStrings</scope><name>resolve</name></member>
      <member refid="class_format_strings_1afca5ed351b8dc30f93f919103fdf1cc7" prot="public" virt="pure-virtual"><scope>FormatStrings</scope><name>writeFormatStringToDB</name></member>
      <member refid="class_format_strings_1ab33e145ffff994a46a94dd17de70605b" prot="public" virt="virtual"><scope>FormatStrings</scope><name>~FormatStrings</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
